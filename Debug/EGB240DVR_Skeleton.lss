
EGB240DVR_Skeleton.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000260  00800100  00004766  000047fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004766  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000006a5  00800360  00800360  00004a5a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004a5a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004ab8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003c8  00000000  00000000  00004af8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005244  00000000  00000000  00004ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f78  00000000  00000000  0000a104  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003aa4  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ef4  00000000  00000000  0000eb20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e6a  00000000  00000000  0000fa14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007a8c  00000000  00000000  0001087e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000420  00000000  00000000  0001830a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__ctors_end>
       4:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
       8:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
       c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      10:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      14:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      18:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      1c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      20:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      24:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      28:	0c 94 bb 19 	jmp	0x3376	; 0x3376 <__vector_10>
      2c:	0c 94 f9 19 	jmp	0x33f2	; 0x33f2 <__vector_11>
      30:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      34:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      38:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      3c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      40:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      44:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      48:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      4c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      50:	0c 94 20 1c 	jmp	0x3840	; 0x3840 <__vector_20>
      54:	0c 94 60 1d 	jmp	0x3ac0	; 0x3ac0 <__vector_21>
      58:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      5c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      60:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      64:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      68:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      6c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      70:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      74:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__vector_29>
      78:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      7c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      80:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      84:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      88:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      8c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      90:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      94:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      98:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      9c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      a0:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      a4:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      a8:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      ac:	56 17       	cp	r21, r22
      ae:	5e 17       	cp	r21, r30
      b0:	c1 18       	sub	r12, r1
      b2:	d0 17       	cp	r29, r16
      b4:	c1 18       	sub	r12, r1
      b6:	c1 18       	sub	r12, r1
      b8:	c1 18       	sub	r12, r1
      ba:	b8 18       	sub	r11, r8
      bc:	c1 18       	sub	r12, r1
      be:	c1 18       	sub	r12, r1
      c0:	c1 18       	sub	r12, r1
      c2:	c1 18       	sub	r12, r1
      c4:	c1 18       	sub	r12, r1
      c6:	c1 18       	sub	r12, r1
      c8:	c1 18       	sub	r12, r1
      ca:	c1 18       	sub	r12, r1
      cc:	c1 18       	sub	r12, r1
      ce:	c1 18       	sub	r12, r1
      d0:	c1 18       	sub	r12, r1
      d2:	c1 18       	sub	r12, r1
      d4:	c1 18       	sub	r12, r1
      d6:	c1 18       	sub	r12, r1
      d8:	c1 18       	sub	r12, r1
      da:	c1 18       	sub	r12, r1
      dc:	c1 18       	sub	r12, r1
      de:	c1 18       	sub	r12, r1
      e0:	c1 18       	sub	r12, r1
      e2:	c1 18       	sub	r12, r1
      e4:	c1 18       	sub	r12, r1
      e6:	c1 18       	sub	r12, r1
      e8:	c1 18       	sub	r12, r1
      ea:	c1 18       	sub	r12, r1
      ec:	c1 18       	sub	r12, r1
      ee:	c1 18       	sub	r12, r1
      f0:	c1 18       	sub	r12, r1
      f2:	c1 18       	sub	r12, r1
      f4:	c1 18       	sub	r12, r1
      f6:	c1 18       	sub	r12, r1
      f8:	c1 18       	sub	r12, r1
      fa:	c1 18       	sub	r12, r1
      fc:	c1 18       	sub	r12, r1
      fe:	c1 18       	sub	r12, r1
     100:	c1 18       	sub	r12, r1
     102:	c1 18       	sub	r12, r1
     104:	c1 18       	sub	r12, r1
     106:	c1 18       	sub	r12, r1
     108:	c1 18       	sub	r12, r1
     10a:	c1 18       	sub	r12, r1
     10c:	c1 18       	sub	r12, r1
     10e:	c1 18       	sub	r12, r1
     110:	61 18       	sub	r6, r1
     112:	67 18       	sub	r6, r7
     114:	7a 18       	sub	r7, r10
     116:	8d 18       	sub	r8, r13
     118:	a3 18       	sub	r10, r3

0000011a <__trampolines_end>:
     11a:	00 01       	movw	r0, r0
     11c:	00 00       	nop
     11e:	c7 01       	movw	r24, r14
     120:	12 00       	.word	0x0012	; ????
     122:	02 00       	.word	0x0002	; ????
     124:	00 84       	ldd	r0, Z+8	; 0x08
     126:	01 43       	sbci	r16, 0x31	; 49
     128:	00 03       	mulsu	r16, r16
     12a:	00 00       	nop
     12c:	80 01       	movw	r16, r0
     12e:	04 01       	movw	r0, r8
     130:	03 09       	sbc	r16, r3
     132:	04 6a       	ori	r16, 0xA4	; 164
     134:	01 14       	cp	r0, r1
     136:	02 03       	mulsu	r16, r18
     138:	09 04       	cpc	r0, r9
     13a:	52 01       	movw	r10, r4
     13c:	16 03       	mulsu	r17, r22
     13e:	03 09       	sbc	r16, r3
     140:	04 44       	sbci	r16, 0x44	; 68
     142:	01 0c       	add	r0, r1

00000144 <string3>:
     144:	0c 03 31 00 32 00 33 00 34 00 35 00 00 00           ..1.2.3.4.5...

00000152 <string2>:
     152:	16 03 55 00 53 00 42 00 20 00 53 00 65 00 72 00     ..U.S.B. .S.e.r.
     162:	69 00 61 00 6c 00 00 00                             i.a.l...

0000016a <string1>:
     16a:	14 03 59 00 6f 00 75 00 72 00 20 00 4e 00 61 00     ..Y.o.u.r. .N.a.
     17a:	6d 00 65 00 00 00                                   m.e...

00000180 <string0>:
     180:	04 03 09 04                                         ....

00000184 <config1_descriptor>:
     184:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     194:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     1a4:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     1b4:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     1c4:	40 00 00                                            @..

000001c7 <device_descriptor>:
     1c7:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     1d7:	03 01                                               ..

000001d9 <endpoint_config_table>:
     1d9:	00 01 c1 12 01 80 36 01 81 36 00                    ......6..6.

000001e4 <__ctors_end>:
     1e4:	11 24       	eor	r1, r1
     1e6:	1f be       	out	0x3f, r1	; 63
     1e8:	cf ef       	ldi	r28, 0xFF	; 255
     1ea:	da e0       	ldi	r29, 0x0A	; 10
     1ec:	de bf       	out	0x3e, r29	; 62
     1ee:	cd bf       	out	0x3d, r28	; 61

000001f0 <__do_copy_data>:
     1f0:	13 e0       	ldi	r17, 0x03	; 3
     1f2:	a0 e0       	ldi	r26, 0x00	; 0
     1f4:	b1 e0       	ldi	r27, 0x01	; 1
     1f6:	e6 e6       	ldi	r30, 0x66	; 102
     1f8:	f7 e4       	ldi	r31, 0x47	; 71
     1fa:	02 c0       	rjmp	.+4      	; 0x200 <__do_copy_data+0x10>
     1fc:	05 90       	lpm	r0, Z+
     1fe:	0d 92       	st	X+, r0
     200:	a0 36       	cpi	r26, 0x60	; 96
     202:	b1 07       	cpc	r27, r17
     204:	d9 f7       	brne	.-10     	; 0x1fc <__do_copy_data+0xc>

00000206 <__do_clear_bss>:
     206:	2a e0       	ldi	r18, 0x0A	; 10
     208:	a0 e6       	ldi	r26, 0x60	; 96
     20a:	b3 e0       	ldi	r27, 0x03	; 3
     20c:	01 c0       	rjmp	.+2      	; 0x210 <.do_clear_bss_start>

0000020e <.do_clear_bss_loop>:
     20e:	1d 92       	st	X+, r1

00000210 <.do_clear_bss_start>:
     210:	a5 30       	cpi	r26, 0x05	; 5
     212:	b2 07       	cpc	r27, r18
     214:	e1 f7       	brne	.-8      	; 0x20e <.do_clear_bss_loop>
     216:	0e 94 75 1c 	call	0x38ea	; 0x38ea <main>
     21a:	0c 94 b1 23 	jmp	0x4762	; 0x4762 <_exit>

0000021e <__bad_interrupt>:
     21e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000222 <adc_init>:

/************************************************************************/
/* PUBLIC/USER FUNCTIONS                                                */
/************************************************************************/
void adc_init() {
	ADMUX = 0x60;	// Left adjust result, AREF = AVCC
     222:	80 e6       	ldi	r24, 0x60	; 96
     224:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRB = 0x03;	// Select Timer0 CMPA as trigger	
     228:	83 e0       	ldi	r24, 0x03	; 3
     22a:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
     22e:	08 95       	ret

00000230 <adc_start>:
}

void adc_start() {
	ADCSRA = 0xAE;	// /64 prescaler (250 kHz clock), enable interrupts, ADC enable
     230:	8e ea       	ldi	r24, 0xAE	; 174
     232:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     236:	08 95       	ret

00000238 <adc_stop>:
}

void adc_stop() {
	ADCSRA = 0x00;
     238:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     23c:	08 95       	ret

0000023e <__vector_29>:
/**
 * ISR: ADC conversion complete
 * 
 * Interrupt service routine which executes on completion of ADC conversion.
 */
ISR(ADC_vect) {
     23e:	1f 92       	push	r1
     240:	0f 92       	push	r0
     242:	0f b6       	in	r0, 0x3f	; 63
     244:	0f 92       	push	r0
     246:	11 24       	eor	r1, r1
     248:	2f 93       	push	r18
     24a:	3f 93       	push	r19
     24c:	4f 93       	push	r20
     24e:	5f 93       	push	r21
     250:	6f 93       	push	r22
     252:	7f 93       	push	r23
     254:	8f 93       	push	r24
     256:	9f 93       	push	r25
     258:	af 93       	push	r26
     25a:	bf 93       	push	r27
     25c:	ef 93       	push	r30
     25e:	ff 93       	push	r31
	uint8_t result = ADCH;	//Read result
     260:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	buffer_queue(result);	//Store result into buffer
     264:	0e 94 67 01 	call	0x2ce	; 0x2ce <buffer_queue>
     268:	ff 91       	pop	r31
     26a:	ef 91       	pop	r30
     26c:	bf 91       	pop	r27
     26e:	af 91       	pop	r26
     270:	9f 91       	pop	r25
     272:	8f 91       	pop	r24
     274:	7f 91       	pop	r23
     276:	6f 91       	pop	r22
     278:	5f 91       	pop	r21
     27a:	4f 91       	pop	r20
     27c:	3f 91       	pop	r19
     27e:	2f 91       	pop	r18
     280:	0f 90       	pop	r0
     282:	0f be       	out	0x3f, r0	; 63
     284:	0f 90       	pop	r0
     286:	1f 90       	pop	r1
     288:	18 95       	reti

0000028a <buffer_init>:
 *    pFuncPageFull - Pointer to function to execute on "page full"
 *    pFuncPageEmpty - Pointer to function to execute on "page empty"
 */
void buffer_init(void (*pFuncPageFull)(void), void (*pFuncPageEmpty)(void)) {
	// Reset read/write pointers
	pHead = pPage0;
     28a:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <pPage0>
     28e:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <pPage0+0x1>
     292:	30 93 82 03 	sts	0x0382, r19	; 0x800382 <pHead+0x1>
     296:	20 93 81 03 	sts	0x0381, r18	; 0x800381 <pHead>
	pTail = pPage0;
     29a:	30 93 84 07 	sts	0x0784, r19	; 0x800784 <pTail+0x1>
     29e:	20 93 83 07 	sts	0x0783, r18	; 0x800783 <pTail>
	
	// Assign user supplier callback functions
	callbackPageFull = pFuncPageFull;
     2a2:	90 93 7e 03 	sts	0x037E, r25	; 0x80037e <callbackPageFull+0x1>
     2a6:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <callbackPageFull>
	callbackPageEmpty = pFuncPageEmpty;
     2aa:	70 93 80 03 	sts	0x0380, r23	; 0x800380 <callbackPageEmpty+0x1>
     2ae:	60 93 7f 03 	sts	0x037F, r22	; 0x80037f <callbackPageEmpty>
     2b2:	08 95       	ret

000002b4 <buffer_reset>:
 * 
 * Resets the read/write pointers of the buffer to the top of Page 0.
 */
void buffer_reset() {
	// Reset pointers to top of buffer
	pHead = pPage0;
     2b4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pPage0>
     2b8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <pPage0+0x1>
     2bc:	90 93 82 03 	sts	0x0382, r25	; 0x800382 <pHead+0x1>
     2c0:	80 93 81 03 	sts	0x0381, r24	; 0x800381 <pHead>
	pTail = pPage0;
     2c4:	90 93 84 07 	sts	0x0784, r25	; 0x800784 <pTail+0x1>
     2c8:	80 93 83 07 	sts	0x0783, r24	; 0x800783 <pTail>
     2cc:	08 95       	ret

000002ce <buffer_queue>:
 *
 * Parameters:
 *    word - sample (unsigned 8-bit integer) to add to queue (buffer)
 */
void buffer_queue(uint8_t word) {
	*(pHead++) = word;
     2ce:	e0 91 81 03 	lds	r30, 0x0381	; 0x800381 <pHead>
     2d2:	f0 91 82 03 	lds	r31, 0x0382	; 0x800382 <pHead+0x1>
     2d6:	9f 01       	movw	r18, r30
     2d8:	2f 5f       	subi	r18, 0xFF	; 255
     2da:	3f 4f       	sbci	r19, 0xFF	; 255
     2dc:	30 93 82 03 	sts	0x0382, r19	; 0x800382 <pHead+0x1>
     2e0:	20 93 81 03 	sts	0x0381, r18	; 0x800381 <pHead>
     2e4:	80 83       	st	Z, r24
	
	if (pHead == pPage1) {
     2e6:	80 91 81 03 	lds	r24, 0x0381	; 0x800381 <pHead>
     2ea:	90 91 82 03 	lds	r25, 0x0382	; 0x800382 <pHead+0x1>
     2ee:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <pPage1>
     2f2:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <pPage1+0x1>
     2f6:	82 17       	cp	r24, r18
     2f8:	93 07       	cpc	r25, r19
     2fa:	31 f4       	brne	.+12     	; 0x308 <buffer_queue+0x3a>
		callbackPageFull();
     2fc:	e0 91 7d 03 	lds	r30, 0x037D	; 0x80037d <callbackPageFull>
     300:	f0 91 7e 03 	lds	r31, 0x037E	; 0x80037e <callbackPageFull+0x1>
     304:	09 95       	icall
     306:	08 95       	ret
	} else if (pHead == pEnd) {
     308:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     30c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     310:	82 17       	cp	r24, r18
     312:	93 07       	cpc	r25, r19
     314:	69 f4       	brne	.+26     	; 0x330 <buffer_queue+0x62>
		pHead = pPage0;
     316:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pPage0>
     31a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <pPage0+0x1>
     31e:	90 93 82 03 	sts	0x0382, r25	; 0x800382 <pHead+0x1>
     322:	80 93 81 03 	sts	0x0381, r24	; 0x800381 <pHead>
		callbackPageFull();
     326:	e0 91 7d 03 	lds	r30, 0x037D	; 0x80037d <callbackPageFull>
     32a:	f0 91 7e 03 	lds	r31, 0x037E	; 0x80037e <callbackPageFull+0x1>
     32e:	09 95       	icall
     330:	08 95       	ret

00000332 <buffer_dequeue>:
 * where necessary). A "page empty" callback is generated when the 
 * read pointer overflows to a new page.
 *
 * Returns: The sample read from the buffer (unsigned 8-bit integer)
 */
uint8_t buffer_dequeue() {
     332:	cf 93       	push	r28
	uint8_t word = *(pTail++);
     334:	e0 91 83 07 	lds	r30, 0x0783	; 0x800783 <pTail>
     338:	f0 91 84 07 	lds	r31, 0x0784	; 0x800784 <pTail+0x1>
     33c:	cf 01       	movw	r24, r30
     33e:	01 96       	adiw	r24, 0x01	; 1
     340:	90 93 84 07 	sts	0x0784, r25	; 0x800784 <pTail+0x1>
     344:	80 93 83 07 	sts	0x0783, r24	; 0x800783 <pTail>
     348:	c0 81       	ld	r28, Z
		
	if (pTail == pPage1) {
     34a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <pPage1>
     34e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <pPage1+0x1>
     352:	82 17       	cp	r24, r18
     354:	93 07       	cpc	r25, r19
     356:	31 f4       	brne	.+12     	; 0x364 <buffer_dequeue+0x32>
		callbackPageEmpty();
     358:	e0 91 7f 03 	lds	r30, 0x037F	; 0x80037f <callbackPageEmpty>
     35c:	f0 91 80 03 	lds	r31, 0x0380	; 0x800380 <callbackPageEmpty+0x1>
     360:	09 95       	icall
     362:	14 c0       	rjmp	.+40     	; 0x38c <buffer_dequeue+0x5a>
	} else if (pTail == pEnd) {
     364:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     368:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     36c:	82 17       	cp	r24, r18
     36e:	93 07       	cpc	r25, r19
     370:	69 f4       	brne	.+26     	; 0x38c <buffer_dequeue+0x5a>
		pTail = pPage0;
     372:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pPage0>
     376:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <pPage0+0x1>
     37a:	90 93 84 07 	sts	0x0784, r25	; 0x800784 <pTail+0x1>
     37e:	80 93 83 07 	sts	0x0783, r24	; 0x800783 <pTail>
		callbackPageEmpty();
     382:	e0 91 7f 03 	lds	r30, 0x037F	; 0x80037f <callbackPageEmpty>
     386:	f0 91 80 03 	lds	r31, 0x0380	; 0x800380 <callbackPageEmpty+0x1>
     38a:	09 95       	icall
	}
	
	return word;
}
     38c:	8c 2f       	mov	r24, r28
     38e:	cf 91       	pop	r28
     390:	08 95       	ret

00000392 <buffer_readPage>:
 */
uint8_t* buffer_readPage() {
	uint8_t* page;
	
	// Advance tail to next page boundary
	if (pTail > pPage0) {
     392:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pPage0>
     396:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <pPage0+0x1>
     39a:	20 91 83 07 	lds	r18, 0x0783	; 0x800783 <pTail>
     39e:	30 91 84 07 	lds	r19, 0x0784	; 0x800784 <pTail+0x1>
     3a2:	82 17       	cp	r24, r18
     3a4:	93 07       	cpc	r25, r19
     3a6:	58 f4       	brcc	.+22     	; 0x3be <buffer_readPage+0x2c>
		page = pPage1;
     3a8:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <pPage1>
     3ac:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <pPage1+0x1>
		pTail = pPage0;
     3b0:	90 93 84 07 	sts	0x0784, r25	; 0x800784 <pTail+0x1>
     3b4:	80 93 83 07 	sts	0x0783, r24	; 0x800783 <pTail>
uint8_t* buffer_readPage() {
	uint8_t* page;
	
	// Advance tail to next page boundary
	if (pTail > pPage0) {
		page = pPage1;
     3b8:	83 2f       	mov	r24, r19
     3ba:	92 2f       	mov	r25, r18
     3bc:	08 95       	ret
		pTail = pPage0;
	} else {
		page = pPage0;
		pTail = pPage1;
     3be:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <pPage1>
     3c2:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <pPage1+0x1>
     3c6:	30 93 84 07 	sts	0x0784, r19	; 0x800784 <pTail+0x1>
     3ca:	20 93 83 07 	sts	0x0783, r18	; 0x800783 <pTail>
	}
	
	return page;
}
     3ce:	08 95       	ret

000003d0 <buffer_writePage>:
 */
uint8_t* buffer_writePage() {
	uint8_t* page;
	
	// Advance head to next page boundary
	if (pHead > pPage0) {
     3d0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pPage0>
     3d4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <pPage0+0x1>
     3d8:	20 91 81 03 	lds	r18, 0x0381	; 0x800381 <pHead>
     3dc:	30 91 82 03 	lds	r19, 0x0382	; 0x800382 <pHead+0x1>
     3e0:	82 17       	cp	r24, r18
     3e2:	93 07       	cpc	r25, r19
     3e4:	58 f4       	brcc	.+22     	; 0x3fc <buffer_writePage+0x2c>
		page = pPage1;
     3e6:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <pPage1>
     3ea:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <pPage1+0x1>
		pHead = pPage0;
     3ee:	90 93 82 03 	sts	0x0382, r25	; 0x800382 <pHead+0x1>
     3f2:	80 93 81 03 	sts	0x0381, r24	; 0x800381 <pHead>
uint8_t* buffer_writePage() {
	uint8_t* page;
	
	// Advance head to next page boundary
	if (pHead > pPage0) {
		page = pPage1;
     3f6:	83 2f       	mov	r24, r19
     3f8:	92 2f       	mov	r25, r18
     3fa:	08 95       	ret
		pHead = pPage0;
		} else {
		page = pPage0;
		pHead = pPage1;
     3fc:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <pPage1>
     400:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <pPage1+0x1>
     404:	30 93 82 03 	sts	0x0382, r19	; 0x800382 <pHead+0x1>
     408:	20 93 81 03 	sts	0x0381, r18	; 0x800381 <pHead>
	}
	
	return page;
     40c:	08 95       	ret

0000040e <mem_cpy>:
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
		i = (bw == (UINT)i) ? 0 : -1;
	}
	pb->idx = i;
	pb->nchr++;
}
     40e:	cf 93       	push	r28
     410:	df 93       	push	r29
     412:	42 30       	cpi	r20, 0x02	; 2
     414:	51 05       	cpc	r21, r1
     416:	c0 f0       	brcs	.+48     	; 0x448 <mem_cpy+0x3a>
     418:	db 01       	movw	r26, r22
     41a:	fc 01       	movw	r30, r24
     41c:	9a 01       	movw	r18, r20
     41e:	cd 91       	ld	r28, X+
     420:	dd 91       	ld	r29, X+
     422:	c1 93       	st	Z+, r28
     424:	d1 93       	st	Z+, r29
     426:	22 50       	subi	r18, 0x02	; 2
     428:	31 09       	sbc	r19, r1
     42a:	22 30       	cpi	r18, 0x02	; 2
     42c:	31 05       	cpc	r19, r1
     42e:	b8 f7       	brcc	.-18     	; 0x41e <mem_cpy+0x10>
     430:	9a 01       	movw	r18, r20
     432:	22 50       	subi	r18, 0x02	; 2
     434:	31 09       	sbc	r19, r1
     436:	2e 7f       	andi	r18, 0xFE	; 254
     438:	2e 5f       	subi	r18, 0xFE	; 254
     43a:	3f 4f       	sbci	r19, 0xFF	; 255
     43c:	82 0f       	add	r24, r18
     43e:	93 1f       	adc	r25, r19
     440:	62 0f       	add	r22, r18
     442:	73 1f       	adc	r23, r19
     444:	41 70       	andi	r20, 0x01	; 1
     446:	55 27       	eor	r21, r21
     448:	41 15       	cp	r20, r1
     44a:	51 05       	cpc	r21, r1
     44c:	49 f0       	breq	.+18     	; 0x460 <mem_cpy+0x52>
     44e:	db 01       	movw	r26, r22
     450:	fc 01       	movw	r30, r24
     452:	48 0f       	add	r20, r24
     454:	59 1f       	adc	r21, r25
     456:	9d 91       	ld	r25, X+
     458:	91 93       	st	Z+, r25
     45a:	e4 17       	cp	r30, r20
     45c:	f5 07       	cpc	r31, r21
     45e:	d9 f7       	brne	.-10     	; 0x456 <mem_cpy+0x48>
     460:	df 91       	pop	r29
     462:	cf 91       	pop	r28
     464:	08 95       	ret

00000466 <get_ldnumber>:
     466:	cf 93       	push	r28
     468:	df 93       	push	r29
     46a:	ec 01       	movw	r28, r24
     46c:	a8 81       	ld	r26, Y
     46e:	b9 81       	ldd	r27, Y+1	; 0x01
     470:	10 97       	sbiw	r26, 0x00	; 0
     472:	11 f1       	breq	.+68     	; 0x4b8 <get_ldnumber+0x52>
     474:	4c 91       	ld	r20, X
     476:	41 32       	cpi	r20, 0x21	; 33
     478:	58 f0       	brcs	.+22     	; 0x490 <get_ldnumber+0x2a>
     47a:	4a 33       	cpi	r20, 0x3A	; 58
     47c:	49 f1       	breq	.+82     	; 0x4d0 <get_ldnumber+0x6a>
     47e:	fd 01       	movw	r30, r26
     480:	31 96       	adiw	r30, 0x01	; 1
     482:	9f 01       	movw	r18, r30
     484:	91 91       	ld	r25, Z+
     486:	91 32       	cpi	r25, 0x21	; 33
     488:	28 f0       	brcs	.+10     	; 0x494 <get_ldnumber+0x2e>
     48a:	9a 33       	cpi	r25, 0x3A	; 58
     48c:	d1 f7       	brne	.-12     	; 0x482 <get_ldnumber+0x1c>
     48e:	04 c0       	rjmp	.+8      	; 0x498 <get_ldnumber+0x32>
     490:	94 2f       	mov	r25, r20
     492:	9d 01       	movw	r18, r26
     494:	9a 33       	cpi	r25, 0x3A	; 58
     496:	99 f4       	brne	.+38     	; 0x4be <get_ldnumber+0x58>
     498:	50 e0       	ldi	r21, 0x00	; 0
     49a:	ca 01       	movw	r24, r20
     49c:	c0 97       	sbiw	r24, 0x30	; 48
     49e:	ad 01       	movw	r20, r26
     4a0:	4f 5f       	subi	r20, 0xFF	; 255
     4a2:	5f 4f       	sbci	r21, 0xFF	; 255
     4a4:	24 17       	cp	r18, r20
     4a6:	35 07       	cpc	r19, r21
     4a8:	69 f4       	brne	.+26     	; 0x4c4 <get_ldnumber+0x5e>
     4aa:	82 30       	cpi	r24, 0x02	; 2
     4ac:	91 05       	cpc	r25, r1
     4ae:	68 f4       	brcc	.+26     	; 0x4ca <get_ldnumber+0x64>
     4b0:	12 96       	adiw	r26, 0x02	; 2
     4b2:	b9 83       	std	Y+1, r27	; 0x01
     4b4:	a8 83       	st	Y, r26
     4b6:	0e c0       	rjmp	.+28     	; 0x4d4 <get_ldnumber+0x6e>
     4b8:	8f ef       	ldi	r24, 0xFF	; 255
     4ba:	9f ef       	ldi	r25, 0xFF	; 255
     4bc:	0b c0       	rjmp	.+22     	; 0x4d4 <get_ldnumber+0x6e>
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	08 c0       	rjmp	.+16     	; 0x4d4 <get_ldnumber+0x6e>
     4c4:	8f ef       	ldi	r24, 0xFF	; 255
     4c6:	9f ef       	ldi	r25, 0xFF	; 255
     4c8:	05 c0       	rjmp	.+10     	; 0x4d4 <get_ldnumber+0x6e>
     4ca:	8f ef       	ldi	r24, 0xFF	; 255
     4cc:	9f ef       	ldi	r25, 0xFF	; 255
     4ce:	02 c0       	rjmp	.+4      	; 0x4d4 <get_ldnumber+0x6e>
     4d0:	9d 01       	movw	r18, r26
     4d2:	e2 cf       	rjmp	.-60     	; 0x498 <get_ldnumber+0x32>
     4d4:	df 91       	pop	r29
     4d6:	cf 91       	pop	r28
     4d8:	08 95       	ret

000004da <sync_window>:
     4da:	8f 92       	push	r8
     4dc:	9f 92       	push	r9
     4de:	af 92       	push	r10
     4e0:	bf 92       	push	r11
     4e2:	cf 92       	push	r12
     4e4:	df 92       	push	r13
     4e6:	ef 92       	push	r14
     4e8:	ff 92       	push	r15
     4ea:	0f 93       	push	r16
     4ec:	1f 93       	push	r17
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
     4f2:	fc 01       	movw	r30, r24
     4f4:	24 81       	ldd	r18, Z+4	; 0x04
     4f6:	22 23       	and	r18, r18
     4f8:	09 f4       	brne	.+2      	; 0x4fc <sync_window+0x22>
     4fa:	46 c0       	rjmp	.+140    	; 0x588 <sync_window+0xae>
     4fc:	ec 01       	movw	r28, r24
     4fe:	c2 a4       	ldd	r12, Z+42	; 0x2a
     500:	d3 a4       	ldd	r13, Z+43	; 0x2b
     502:	e4 a4       	ldd	r14, Z+44	; 0x2c
     504:	f5 a4       	ldd	r15, Z+45	; 0x2d
     506:	5c 01       	movw	r10, r24
     508:	fe e2       	ldi	r31, 0x2E	; 46
     50a:	af 0e       	add	r10, r31
     50c:	b1 1c       	adc	r11, r1
     50e:	01 e0       	ldi	r16, 0x01	; 1
     510:	10 e0       	ldi	r17, 0x00	; 0
     512:	a7 01       	movw	r20, r14
     514:	96 01       	movw	r18, r12
     516:	b5 01       	movw	r22, r10
     518:	89 81       	ldd	r24, Y+1	; 0x01
     51a:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <disk_write>
     51e:	81 11       	cpse	r24, r1
     520:	35 c0       	rjmp	.+106    	; 0x58c <sync_window+0xb2>
     522:	1c 82       	std	Y+4, r1	; 0x04
     524:	8e 8d       	ldd	r24, Y+30	; 0x1e
     526:	9f 8d       	ldd	r25, Y+31	; 0x1f
     528:	a8 a1       	ldd	r26, Y+32	; 0x20
     52a:	b9 a1       	ldd	r27, Y+33	; 0x21
     52c:	b7 01       	movw	r22, r14
     52e:	a6 01       	movw	r20, r12
     530:	48 1b       	sub	r20, r24
     532:	59 0b       	sbc	r21, r25
     534:	6a 0b       	sbc	r22, r26
     536:	7b 0b       	sbc	r23, r27
     538:	8e 89       	ldd	r24, Y+22	; 0x16
     53a:	9f 89       	ldd	r25, Y+23	; 0x17
     53c:	a8 8d       	ldd	r26, Y+24	; 0x18
     53e:	b9 8d       	ldd	r27, Y+25	; 0x19
     540:	48 17       	cp	r20, r24
     542:	59 07       	cpc	r21, r25
     544:	6a 07       	cpc	r22, r26
     546:	7b 07       	cpc	r23, r27
     548:	18 f5       	brcc	.+70     	; 0x590 <sync_window+0xb6>
     54a:	8b 80       	ldd	r8, Y+3	; 0x03
     54c:	91 2c       	mov	r9, r1
     54e:	82 e0       	ldi	r24, 0x02	; 2
     550:	88 16       	cp	r8, r24
     552:	91 04       	cpc	r9, r1
     554:	f8 f0       	brcs	.+62     	; 0x594 <sync_window+0xba>
     556:	8e 89       	ldd	r24, Y+22	; 0x16
     558:	9f 89       	ldd	r25, Y+23	; 0x17
     55a:	a8 8d       	ldd	r26, Y+24	; 0x18
     55c:	b9 8d       	ldd	r27, Y+25	; 0x19
     55e:	c8 0e       	add	r12, r24
     560:	d9 1e       	adc	r13, r25
     562:	ea 1e       	adc	r14, r26
     564:	fb 1e       	adc	r15, r27
     566:	01 e0       	ldi	r16, 0x01	; 1
     568:	10 e0       	ldi	r17, 0x00	; 0
     56a:	a7 01       	movw	r20, r14
     56c:	96 01       	movw	r18, r12
     56e:	b5 01       	movw	r22, r10
     570:	89 81       	ldd	r24, Y+1	; 0x01
     572:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <disk_write>
     576:	e1 e0       	ldi	r30, 0x01	; 1
     578:	8e 1a       	sub	r8, r30
     57a:	91 08       	sbc	r9, r1
     57c:	f1 e0       	ldi	r31, 0x01	; 1
     57e:	8f 16       	cp	r8, r31
     580:	91 04       	cpc	r9, r1
     582:	49 f7       	brne	.-46     	; 0x556 <sync_window+0x7c>
     584:	80 e0       	ldi	r24, 0x00	; 0
     586:	07 c0       	rjmp	.+14     	; 0x596 <sync_window+0xbc>
     588:	80 e0       	ldi	r24, 0x00	; 0
     58a:	05 c0       	rjmp	.+10     	; 0x596 <sync_window+0xbc>
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	03 c0       	rjmp	.+6      	; 0x596 <sync_window+0xbc>
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	01 c0       	rjmp	.+2      	; 0x596 <sync_window+0xbc>
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	df 91       	pop	r29
     598:	cf 91       	pop	r28
     59a:	1f 91       	pop	r17
     59c:	0f 91       	pop	r16
     59e:	ff 90       	pop	r15
     5a0:	ef 90       	pop	r14
     5a2:	df 90       	pop	r13
     5a4:	cf 90       	pop	r12
     5a6:	bf 90       	pop	r11
     5a8:	af 90       	pop	r10
     5aa:	9f 90       	pop	r9
     5ac:	8f 90       	pop	r8
     5ae:	08 95       	ret

000005b0 <move_window>:
     5b0:	8f 92       	push	r8
     5b2:	9f 92       	push	r9
     5b4:	af 92       	push	r10
     5b6:	bf 92       	push	r11
     5b8:	ff 92       	push	r15
     5ba:	0f 93       	push	r16
     5bc:	1f 93       	push	r17
     5be:	cf 93       	push	r28
     5c0:	df 93       	push	r29
     5c2:	ec 01       	movw	r28, r24
     5c4:	4a 01       	movw	r8, r20
     5c6:	5b 01       	movw	r10, r22
     5c8:	8a a5       	ldd	r24, Y+42	; 0x2a
     5ca:	9b a5       	ldd	r25, Y+43	; 0x2b
     5cc:	ac a5       	ldd	r26, Y+44	; 0x2c
     5ce:	bd a5       	ldd	r27, Y+45	; 0x2d
     5d0:	84 17       	cp	r24, r20
     5d2:	95 07       	cpc	r25, r21
     5d4:	a6 07       	cpc	r26, r22
     5d6:	b7 07       	cpc	r27, r23
     5d8:	e9 f0       	breq	.+58     	; 0x614 <move_window+0x64>
     5da:	ce 01       	movw	r24, r28
     5dc:	0e 94 6d 02 	call	0x4da	; 0x4da <sync_window>
     5e0:	f8 2e       	mov	r15, r24
     5e2:	81 11       	cpse	r24, r1
     5e4:	18 c0       	rjmp	.+48     	; 0x616 <move_window+0x66>
     5e6:	01 e0       	ldi	r16, 0x01	; 1
     5e8:	10 e0       	ldi	r17, 0x00	; 0
     5ea:	a5 01       	movw	r20, r10
     5ec:	94 01       	movw	r18, r8
     5ee:	be 01       	movw	r22, r28
     5f0:	62 5d       	subi	r22, 0xD2	; 210
     5f2:	7f 4f       	sbci	r23, 0xFF	; 255
     5f4:	89 81       	ldd	r24, Y+1	; 0x01
     5f6:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <disk_read>
     5fa:	88 23       	and	r24, r24
     5fc:	31 f0       	breq	.+12     	; 0x60a <move_window+0x5a>
     5fe:	ff 24       	eor	r15, r15
     600:	f3 94       	inc	r15
     602:	88 24       	eor	r8, r8
     604:	8a 94       	dec	r8
     606:	98 2c       	mov	r9, r8
     608:	54 01       	movw	r10, r8
     60a:	8a a6       	std	Y+42, r8	; 0x2a
     60c:	9b a6       	std	Y+43, r9	; 0x2b
     60e:	ac a6       	std	Y+44, r10	; 0x2c
     610:	bd a6       	std	Y+45, r11	; 0x2d
     612:	01 c0       	rjmp	.+2      	; 0x616 <move_window+0x66>
     614:	f1 2c       	mov	r15, r1
     616:	8f 2d       	mov	r24, r15
     618:	df 91       	pop	r29
     61a:	cf 91       	pop	r28
     61c:	1f 91       	pop	r17
     61e:	0f 91       	pop	r16
     620:	ff 90       	pop	r15
     622:	bf 90       	pop	r11
     624:	af 90       	pop	r10
     626:	9f 90       	pop	r9
     628:	8f 90       	pop	r8
     62a:	08 95       	ret

0000062c <check_fs>:
     62c:	cf 93       	push	r28
     62e:	df 93       	push	r29
     630:	ec 01       	movw	r28, r24
     632:	1c 82       	std	Y+4, r1	; 0x04
     634:	8f ef       	ldi	r24, 0xFF	; 255
     636:	9f ef       	ldi	r25, 0xFF	; 255
     638:	dc 01       	movw	r26, r24
     63a:	8a a7       	std	Y+42, r24	; 0x2a
     63c:	9b a7       	std	Y+43, r25	; 0x2b
     63e:	ac a7       	std	Y+44, r26	; 0x2c
     640:	bd a7       	std	Y+45, r27	; 0x2d
     642:	ce 01       	movw	r24, r28
     644:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <move_window>
     648:	81 11       	cpse	r24, r1
     64a:	23 c0       	rjmp	.+70     	; 0x692 <check_fs+0x66>
     64c:	fe 01       	movw	r30, r28
     64e:	e4 5d       	subi	r30, 0xD4	; 212
     650:	fd 4f       	sbci	r31, 0xFD	; 253
     652:	80 81       	ld	r24, Z
     654:	91 81       	ldd	r25, Z+1	; 0x01
     656:	85 35       	cpi	r24, 0x55	; 85
     658:	9a 4a       	sbci	r25, 0xAA	; 170
     65a:	e9 f4       	brne	.+58     	; 0x696 <check_fs+0x6a>
     65c:	e8 5c       	subi	r30, 0xC8	; 200
     65e:	f1 40       	sbci	r31, 0x01	; 1
     660:	80 81       	ld	r24, Z
     662:	91 81       	ldd	r25, Z+1	; 0x01
     664:	a2 81       	ldd	r26, Z+2	; 0x02
     666:	b3 81       	ldd	r27, Z+3	; 0x03
     668:	bb 27       	eor	r27, r27
     66a:	86 34       	cpi	r24, 0x46	; 70
     66c:	91 44       	sbci	r25, 0x41	; 65
     66e:	a4 45       	sbci	r26, 0x54	; 84
     670:	b1 05       	cpc	r27, r1
     672:	99 f0       	breq	.+38     	; 0x69a <check_fs+0x6e>
     674:	c0 58       	subi	r28, 0x80	; 128
     676:	df 4f       	sbci	r29, 0xFF	; 255
     678:	48 81       	ld	r20, Y
     67a:	59 81       	ldd	r21, Y+1	; 0x01
     67c:	6a 81       	ldd	r22, Y+2	; 0x02
     67e:	7b 81       	ldd	r23, Y+3	; 0x03
     680:	77 27       	eor	r23, r23
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	46 34       	cpi	r20, 0x46	; 70
     686:	51 44       	sbci	r21, 0x41	; 65
     688:	64 45       	sbci	r22, 0x54	; 84
     68a:	71 05       	cpc	r23, r1
     68c:	39 f4       	brne	.+14     	; 0x69c <check_fs+0x70>
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	05 c0       	rjmp	.+10     	; 0x69c <check_fs+0x70>
     692:	83 e0       	ldi	r24, 0x03	; 3
     694:	03 c0       	rjmp	.+6      	; 0x69c <check_fs+0x70>
     696:	82 e0       	ldi	r24, 0x02	; 2
     698:	01 c0       	rjmp	.+2      	; 0x69c <check_fs+0x70>
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	df 91       	pop	r29
     69e:	cf 91       	pop	r28
     6a0:	08 95       	ret

000006a2 <validate>:
     6a2:	00 97       	sbiw	r24, 0x00	; 0
     6a4:	c9 f0       	breq	.+50     	; 0x6d8 <validate+0x36>
     6a6:	dc 01       	movw	r26, r24
     6a8:	ed 91       	ld	r30, X+
     6aa:	fc 91       	ld	r31, X
     6ac:	11 97       	sbiw	r26, 0x01	; 1
     6ae:	30 97       	sbiw	r30, 0x00	; 0
     6b0:	a9 f0       	breq	.+42     	; 0x6dc <validate+0x3a>
     6b2:	20 81       	ld	r18, Z
     6b4:	22 23       	and	r18, r18
     6b6:	a1 f0       	breq	.+40     	; 0x6e0 <validate+0x3e>
     6b8:	26 81       	ldd	r18, Z+6	; 0x06
     6ba:	37 81       	ldd	r19, Z+7	; 0x07
     6bc:	12 96       	adiw	r26, 0x02	; 2
     6be:	8d 91       	ld	r24, X+
     6c0:	9c 91       	ld	r25, X
     6c2:	13 97       	sbiw	r26, 0x03	; 3
     6c4:	28 17       	cp	r18, r24
     6c6:	39 07       	cpc	r19, r25
     6c8:	69 f4       	brne	.+26     	; 0x6e4 <validate+0x42>
     6ca:	81 81       	ldd	r24, Z+1	; 0x01
     6cc:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <disk_status>
     6d0:	80 ff       	sbrs	r24, 0
     6d2:	0a c0       	rjmp	.+20     	; 0x6e8 <validate+0x46>
     6d4:	89 e0       	ldi	r24, 0x09	; 9
     6d6:	08 95       	ret
     6d8:	89 e0       	ldi	r24, 0x09	; 9
     6da:	08 95       	ret
     6dc:	89 e0       	ldi	r24, 0x09	; 9
     6de:	08 95       	ret
     6e0:	89 e0       	ldi	r24, 0x09	; 9
     6e2:	08 95       	ret
     6e4:	89 e0       	ldi	r24, 0x09	; 9
     6e6:	08 95       	ret
     6e8:	80 e0       	ldi	r24, 0x00	; 0
     6ea:	08 95       	ret

000006ec <find_volume>:
     6ec:	2f 92       	push	r2
     6ee:	3f 92       	push	r3
     6f0:	4f 92       	push	r4
     6f2:	5f 92       	push	r5
     6f4:	6f 92       	push	r6
     6f6:	7f 92       	push	r7
     6f8:	8f 92       	push	r8
     6fa:	9f 92       	push	r9
     6fc:	af 92       	push	r10
     6fe:	bf 92       	push	r11
     700:	cf 92       	push	r12
     702:	df 92       	push	r13
     704:	ef 92       	push	r14
     706:	ff 92       	push	r15
     708:	0f 93       	push	r16
     70a:	1f 93       	push	r17
     70c:	cf 93       	push	r28
     70e:	df 93       	push	r29
     710:	cd b7       	in	r28, 0x3d	; 61
     712:	de b7       	in	r29, 0x3e	; 62
     714:	6d 97       	sbiw	r28, 0x1d	; 29
     716:	0f b6       	in	r0, 0x3f	; 63
     718:	f8 94       	cli
     71a:	de bf       	out	0x3e, r29	; 62
     71c:	0f be       	out	0x3f, r0	; 63
     71e:	cd bf       	out	0x3d, r28	; 61
     720:	6c 01       	movw	r12, r24
     722:	cb 01       	movw	r24, r22
     724:	b4 2e       	mov	r11, r20
     726:	d6 01       	movw	r26, r12
     728:	1d 92       	st	X+, r1
     72a:	1c 92       	st	X, r1
     72c:	0e 94 33 02 	call	0x466	; 0x466 <get_ldnumber>
     730:	7c 01       	movw	r14, r24
     732:	99 23       	and	r25, r25
     734:	0c f4       	brge	.+2      	; 0x738 <find_volume+0x4c>
     736:	04 c2       	rjmp	.+1032   	; 0xb40 <__stack+0x41>
     738:	fc 01       	movw	r30, r24
     73a:	ee 0f       	add	r30, r30
     73c:	ff 1f       	adc	r31, r31
     73e:	ee 59       	subi	r30, 0x9E	; 158
     740:	fc 4f       	sbci	r31, 0xFC	; 252
     742:	00 81       	ld	r16, Z
     744:	11 81       	ldd	r17, Z+1	; 0x01
     746:	01 15       	cp	r16, r1
     748:	11 05       	cpc	r17, r1
     74a:	09 f4       	brne	.+2      	; 0x74e <find_volume+0x62>
     74c:	fb c1       	rjmp	.+1014   	; 0xb44 <__stack+0x45>
     74e:	f6 01       	movw	r30, r12
     750:	11 83       	std	Z+1, r17	; 0x01
     752:	00 83       	st	Z, r16
     754:	d8 01       	movw	r26, r16
     756:	8c 91       	ld	r24, X
     758:	88 23       	and	r24, r24
     75a:	69 f0       	breq	.+26     	; 0x776 <find_volume+0x8a>
     75c:	11 96       	adiw	r26, 0x01	; 1
     75e:	8c 91       	ld	r24, X
     760:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <disk_status>
     764:	80 fd       	sbrc	r24, 0
     766:	07 c0       	rjmp	.+14     	; 0x776 <find_volume+0x8a>
     768:	bb 20       	and	r11, r11
     76a:	09 f4       	brne	.+2      	; 0x76e <find_volume+0x82>
     76c:	ed c1       	rjmp	.+986    	; 0xb48 <__stack+0x49>
     76e:	82 ff       	sbrs	r24, 2
     770:	ed c1       	rjmp	.+986    	; 0xb4c <__stack+0x4d>
     772:	8a e0       	ldi	r24, 0x0A	; 10
     774:	8e c2       	rjmp	.+1308   	; 0xc92 <__stack+0x193>
     776:	f8 01       	movw	r30, r16
     778:	10 82       	st	Z, r1
     77a:	e1 82       	std	Z+1, r14	; 0x01
     77c:	8e 2d       	mov	r24, r14
     77e:	0e 94 91 15 	call	0x2b22	; 0x2b22 <disk_initialize>
     782:	80 fd       	sbrc	r24, 0
     784:	e5 c1       	rjmp	.+970    	; 0xb50 <__stack+0x51>
     786:	bb 20       	and	r11, r11
     788:	09 f4       	brne	.+2      	; 0x78c <find_volume+0xa0>
     78a:	02 c2       	rjmp	.+1028   	; 0xb90 <__stack+0x91>
     78c:	82 fd       	sbrc	r24, 2
     78e:	e2 c1       	rjmp	.+964    	; 0xb54 <__stack+0x55>
     790:	ff c1       	rjmp	.+1022   	; 0xb90 <__stack+0x91>
     792:	80 81       	ld	r24, Z
     794:	88 23       	and	r24, r24
     796:	29 f0       	breq	.+10     	; 0x7a2 <find_volume+0xb6>
     798:	44 80       	ldd	r4, Z+4	; 0x04
     79a:	55 80       	ldd	r5, Z+5	; 0x05
     79c:	66 80       	ldd	r6, Z+6	; 0x06
     79e:	77 80       	ldd	r7, Z+7	; 0x07
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <find_volume+0xbe>
     7a2:	4e 2c       	mov	r4, r14
     7a4:	5f 2c       	mov	r5, r15
     7a6:	67 2e       	mov	r6, r23
     7a8:	76 2e       	mov	r7, r22
     7aa:	d9 01       	movw	r26, r18
     7ac:	4d 92       	st	X+, r4
     7ae:	5d 92       	st	X+, r5
     7b0:	6d 92       	st	X+, r6
     7b2:	7d 92       	st	X+, r7
     7b4:	9d 01       	movw	r18, r26
     7b6:	70 96       	adiw	r30, 0x10	; 16
     7b8:	4e 17       	cp	r20, r30
     7ba:	5f 07       	cpc	r21, r31
     7bc:	51 f7       	brne	.-44     	; 0x792 <find_volume+0xa6>
     7be:	4e 01       	movw	r8, r28
     7c0:	b1 e1       	ldi	r27, 0x11	; 17
     7c2:	8b 0e       	add	r8, r27
     7c4:	91 1c       	adc	r9, r1
     7c6:	68 94       	set
     7c8:	77 24       	eor	r7, r7
     7ca:	71 f8       	bld	r7, 1
     7cc:	f5 01       	movw	r30, r10
     7ce:	c1 90       	ld	r12, Z+
     7d0:	d1 90       	ld	r13, Z+
     7d2:	e1 90       	ld	r14, Z+
     7d4:	f1 90       	ld	r15, Z+
     7d6:	5f 01       	movw	r10, r30
     7d8:	c1 14       	cp	r12, r1
     7da:	d1 04       	cpc	r13, r1
     7dc:	e1 04       	cpc	r14, r1
     7de:	f1 04       	cpc	r15, r1
     7e0:	41 f0       	breq	.+16     	; 0x7f2 <find_volume+0x106>
     7e2:	b7 01       	movw	r22, r14
     7e4:	a6 01       	movw	r20, r12
     7e6:	c8 01       	movw	r24, r16
     7e8:	0e 94 16 03 	call	0x62c	; 0x62c <check_fs>
     7ec:	81 11       	cpse	r24, r1
     7ee:	02 c0       	rjmp	.+4      	; 0x7f4 <find_volume+0x108>
     7f0:	0d c0       	rjmp	.+26     	; 0x80c <find_volume+0x120>
     7f2:	87 2d       	mov	r24, r7
     7f4:	a8 14       	cp	r10, r8
     7f6:	b9 04       	cpc	r11, r9
     7f8:	49 f7       	brne	.-46     	; 0x7cc <find_volume+0xe0>
     7fa:	03 c0       	rjmp	.+6      	; 0x802 <find_volume+0x116>
     7fc:	c1 2c       	mov	r12, r1
     7fe:	d1 2c       	mov	r13, r1
     800:	76 01       	movw	r14, r12
     802:	83 30       	cpi	r24, 0x03	; 3
     804:	09 f4       	brne	.+2      	; 0x808 <find_volume+0x11c>
     806:	a8 c1       	rjmp	.+848    	; 0xb58 <__stack+0x59>
     808:	81 11       	cpse	r24, r1
     80a:	a8 c1       	rjmp	.+848    	; 0xb5c <__stack+0x5d>
     80c:	d8 01       	movw	r26, r16
     80e:	d9 96       	adiw	r26, 0x39	; 57
     810:	8d 91       	ld	r24, X+
     812:	9c 91       	ld	r25, X
     814:	da 97       	sbiw	r26, 0x3a	; 58
     816:	81 15       	cp	r24, r1
     818:	92 40       	sbci	r25, 0x02	; 2
     81a:	09 f0       	breq	.+2      	; 0x81e <find_volume+0x132>
     81c:	a1 c1       	rjmp	.+834    	; 0xb60 <__stack+0x61>
     81e:	f8 01       	movw	r30, r16
     820:	ec 5b       	subi	r30, 0xBC	; 188
     822:	ff 4f       	sbci	r31, 0xFF	; 255
     824:	40 80       	ld	r4, Z
     826:	51 80       	ldd	r5, Z+1	; 0x01
     828:	61 2c       	mov	r6, r1
     82a:	71 2c       	mov	r7, r1
     82c:	41 14       	cp	r4, r1
     82e:	51 04       	cpc	r5, r1
     830:	61 04       	cpc	r6, r1
     832:	71 04       	cpc	r7, r1
     834:	29 f4       	brne	.+10     	; 0x840 <find_volume+0x154>
     836:	3e 96       	adiw	r30, 0x0e	; 14
     838:	40 80       	ld	r4, Z
     83a:	51 80       	ldd	r5, Z+1	; 0x01
     83c:	62 80       	ldd	r6, Z+2	; 0x02
     83e:	73 80       	ldd	r7, Z+3	; 0x03
     840:	f8 01       	movw	r30, r16
     842:	46 8a       	std	Z+22, r4	; 0x16
     844:	57 8a       	std	Z+23, r5	; 0x17
     846:	60 8e       	std	Z+24, r6	; 0x18
     848:	71 8e       	std	Z+25, r7	; 0x19
     84a:	a6 ad       	ldd	r26, Z+62	; 0x3e
     84c:	a3 83       	std	Z+3, r26	; 0x03
     84e:	8f ef       	ldi	r24, 0xFF	; 255
     850:	8a 0f       	add	r24, r26
     852:	82 30       	cpi	r24, 0x02	; 2
     854:	08 f0       	brcs	.+2      	; 0x858 <find_volume+0x16c>
     856:	86 c1       	rjmp	.+780    	; 0xb64 <__stack+0x65>
     858:	f3 ad       	ldd	r31, Z+59	; 0x3b
     85a:	f9 8b       	std	Y+17, r31	; 0x11
     85c:	2f 2f       	mov	r18, r31
     85e:	f8 01       	movw	r30, r16
     860:	22 83       	std	Z+2, r18	; 0x02
     862:	22 23       	and	r18, r18
     864:	09 f4       	brne	.+2      	; 0x868 <find_volume+0x17c>
     866:	80 c1       	rjmp	.+768    	; 0xb68 <__stack+0x69>
     868:	82 2f       	mov	r24, r18
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	9c 01       	movw	r18, r24
     86e:	21 50       	subi	r18, 0x01	; 1
     870:	31 09       	sbc	r19, r1
     872:	82 23       	and	r24, r18
     874:	93 23       	and	r25, r19
     876:	89 2b       	or	r24, r25
     878:	09 f0       	breq	.+2      	; 0x87c <find_volume+0x190>
     87a:	78 c1       	rjmp	.+752    	; 0xb6c <__stack+0x6d>
     87c:	ff 96       	adiw	r30, 0x3f	; 63
     87e:	20 80       	ld	r2, Z
     880:	31 80       	ldd	r3, Z+1	; 0x01
     882:	f8 01       	movw	r30, r16
     884:	31 86       	std	Z+9, r3	; 0x09
     886:	20 86       	std	Z+8, r2	; 0x08
     888:	c1 01       	movw	r24, r2
     88a:	8f 70       	andi	r24, 0x0F	; 15
     88c:	99 27       	eor	r25, r25
     88e:	89 2b       	or	r24, r25
     890:	09 f0       	breq	.+2      	; 0x894 <find_volume+0x1a8>
     892:	6e c1       	rjmp	.+732    	; 0xb70 <__stack+0x71>
     894:	ef 5b       	subi	r30, 0xBF	; 191
     896:	ff 4f       	sbci	r31, 0xFF	; 255
     898:	80 80       	ld	r8, Z
     89a:	91 80       	ldd	r9, Z+1	; 0x01
     89c:	a1 2c       	mov	r10, r1
     89e:	b1 2c       	mov	r11, r1
     8a0:	81 14       	cp	r8, r1
     8a2:	91 04       	cpc	r9, r1
     8a4:	a1 04       	cpc	r10, r1
     8a6:	b1 04       	cpc	r11, r1
     8a8:	29 f4       	brne	.+10     	; 0x8b4 <find_volume+0x1c8>
     8aa:	3d 96       	adiw	r30, 0x0d	; 13
     8ac:	80 80       	ld	r8, Z
     8ae:	91 80       	ldd	r9, Z+1	; 0x01
     8b0:	a2 80       	ldd	r10, Z+2	; 0x02
     8b2:	b3 80       	ldd	r11, Z+3	; 0x03
     8b4:	f8 01       	movw	r30, r16
     8b6:	04 ac       	ldd	r0, Z+60	; 0x3c
     8b8:	f5 ad       	ldd	r31, Z+61	; 0x3d
     8ba:	e0 2d       	mov	r30, r0
     8bc:	30 97       	sbiw	r30, 0x00	; 0
     8be:	09 f4       	brne	.+2      	; 0x8c2 <find_volume+0x1d6>
     8c0:	59 c1       	rjmp	.+690    	; 0xb74 <__stack+0x75>
     8c2:	b0 e0       	ldi	r27, 0x00	; 0
     8c4:	a3 01       	movw	r20, r6
     8c6:	92 01       	movw	r18, r4
     8c8:	0e 94 89 20 	call	0x4112	; 0x4112 <__muluhisi3>
     8cc:	6a 8f       	std	Y+26, r22	; 0x1a
     8ce:	7b 8f       	std	Y+27, r23	; 0x1b
     8d0:	8c 8f       	std	Y+28, r24	; 0x1c
     8d2:	9d 8f       	std	Y+29, r25	; 0x1d
     8d4:	9f 01       	movw	r18, r30
     8d6:	40 e0       	ldi	r20, 0x00	; 0
     8d8:	50 e0       	ldi	r21, 0x00	; 0
     8da:	2e 8b       	std	Y+22, r18	; 0x16
     8dc:	3f 8b       	std	Y+23, r19	; 0x17
     8de:	48 8f       	std	Y+24, r20	; 0x18
     8e0:	59 8f       	std	Y+25, r21	; 0x19
     8e2:	c1 01       	movw	r24, r2
     8e4:	92 95       	swap	r25
     8e6:	82 95       	swap	r24
     8e8:	8f 70       	andi	r24, 0x0F	; 15
     8ea:	89 27       	eor	r24, r25
     8ec:	9f 70       	andi	r25, 0x0F	; 15
     8ee:	89 27       	eor	r24, r25
     8f0:	28 0f       	add	r18, r24
     8f2:	39 1f       	adc	r19, r25
     8f4:	41 1d       	adc	r20, r1
     8f6:	51 1d       	adc	r21, r1
     8f8:	da 01       	movw	r26, r20
     8fa:	c9 01       	movw	r24, r18
     8fc:	2a 8d       	ldd	r18, Y+26	; 0x1a
     8fe:	3b 8d       	ldd	r19, Y+27	; 0x1b
     900:	4c 8d       	ldd	r20, Y+28	; 0x1c
     902:	5d 8d       	ldd	r21, Y+29	; 0x1d
     904:	28 0f       	add	r18, r24
     906:	39 1f       	adc	r19, r25
     908:	4a 1f       	adc	r20, r26
     90a:	5b 1f       	adc	r21, r27
     90c:	2a 8b       	std	Y+18, r18	; 0x12
     90e:	3b 8b       	std	Y+19, r19	; 0x13
     910:	4c 8b       	std	Y+20, r20	; 0x14
     912:	5d 8b       	std	Y+21, r21	; 0x15
     914:	82 16       	cp	r8, r18
     916:	93 06       	cpc	r9, r19
     918:	a4 06       	cpc	r10, r20
     91a:	b5 06       	cpc	r11, r21
     91c:	08 f4       	brcc	.+2      	; 0x920 <find_volume+0x234>
     91e:	2c c1       	rjmp	.+600    	; 0xb78 <__stack+0x79>
     920:	c5 01       	movw	r24, r10
     922:	b4 01       	movw	r22, r8
     924:	62 1b       	sub	r22, r18
     926:	73 0b       	sbc	r23, r19
     928:	84 0b       	sbc	r24, r20
     92a:	95 0b       	sbc	r25, r21
     92c:	e9 89       	ldd	r30, Y+17	; 0x11
     92e:	2e 2f       	mov	r18, r30
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e0       	ldi	r21, 0x00	; 0
     936:	0e 94 61 20 	call	0x40c2	; 0x40c2 <__udivmodsi4>
     93a:	da 01       	movw	r26, r20
     93c:	c9 01       	movw	r24, r18
     93e:	21 15       	cp	r18, r1
     940:	31 05       	cpc	r19, r1
     942:	41 05       	cpc	r20, r1
     944:	51 05       	cpc	r21, r1
     946:	09 f4       	brne	.+2      	; 0x94a <find_volume+0x25e>
     948:	19 c1       	rjmp	.+562    	; 0xb7c <__stack+0x7d>
     94a:	26 3f       	cpi	r18, 0xF6	; 246
     94c:	ff e0       	ldi	r31, 0x0F	; 15
     94e:	3f 07       	cpc	r19, r31
     950:	41 05       	cpc	r20, r1
     952:	51 05       	cpc	r21, r1
     954:	18 f0       	brcs	.+6      	; 0x95c <find_volume+0x270>
     956:	e2 e0       	ldi	r30, 0x02	; 2
     958:	e9 8b       	std	Y+17, r30	; 0x11
     95a:	02 c0       	rjmp	.+4      	; 0x960 <find_volume+0x274>
     95c:	f1 e0       	ldi	r31, 0x01	; 1
     95e:	f9 8b       	std	Y+17, r31	; 0x11
     960:	86 3f       	cpi	r24, 0xF6	; 246
     962:	9f 4f       	sbci	r25, 0xFF	; 255
     964:	a1 05       	cpc	r26, r1
     966:	b1 05       	cpc	r27, r1
     968:	08 f0       	brcs	.+2      	; 0x96c <find_volume+0x280>
     96a:	2a c1       	rjmp	.+596    	; 0xbc0 <__stack+0xc1>
     96c:	49 01       	movw	r8, r18
     96e:	5a 01       	movw	r10, r20
     970:	82 e0       	ldi	r24, 0x02	; 2
     972:	88 0e       	add	r8, r24
     974:	91 1c       	adc	r9, r1
     976:	a1 1c       	adc	r10, r1
     978:	b1 1c       	adc	r11, r1
     97a:	d8 01       	movw	r26, r16
     97c:	52 96       	adiw	r26, 0x12	; 18
     97e:	8d 92       	st	X+, r8
     980:	9d 92       	st	X+, r9
     982:	ad 92       	st	X+, r10
     984:	bc 92       	st	X, r11
     986:	55 97       	sbiw	r26, 0x15	; 21
     988:	f8 01       	movw	r30, r16
     98a:	c2 8e       	std	Z+26, r12	; 0x1a
     98c:	d3 8e       	std	Z+27, r13	; 0x1b
     98e:	e4 8e       	std	Z+28, r14	; 0x1c
     990:	f5 8e       	std	Z+29, r15	; 0x1d
     992:	8e 89       	ldd	r24, Y+22	; 0x16
     994:	9f 89       	ldd	r25, Y+23	; 0x17
     996:	a8 8d       	ldd	r26, Y+24	; 0x18
     998:	b9 8d       	ldd	r27, Y+25	; 0x19
     99a:	8c 0d       	add	r24, r12
     99c:	9d 1d       	adc	r25, r13
     99e:	ae 1d       	adc	r26, r14
     9a0:	bf 1d       	adc	r27, r15
     9a2:	86 8f       	std	Z+30, r24	; 0x1e
     9a4:	97 8f       	std	Z+31, r25	; 0x1f
     9a6:	a0 a3       	std	Z+32, r26	; 0x20
     9a8:	b1 a3       	std	Z+33, r27	; 0x21
     9aa:	4a 89       	ldd	r20, Y+18	; 0x12
     9ac:	5b 89       	ldd	r21, Y+19	; 0x13
     9ae:	6c 89       	ldd	r22, Y+20	; 0x14
     9b0:	7d 89       	ldd	r23, Y+21	; 0x15
     9b2:	4c 0d       	add	r20, r12
     9b4:	5d 1d       	adc	r21, r13
     9b6:	6e 1d       	adc	r22, r14
     9b8:	7f 1d       	adc	r23, r15
     9ba:	46 a3       	std	Z+38, r20	; 0x26
     9bc:	57 a3       	std	Z+39, r21	; 0x27
     9be:	60 a7       	std	Z+40, r22	; 0x28
     9c0:	71 a7       	std	Z+41, r23	; 0x29
     9c2:	f9 89       	ldd	r31, Y+17	; 0x11
     9c4:	f3 30       	cpi	r31, 0x03	; 3
     9c6:	69 f5       	brne	.+90     	; 0xa22 <find_volume+0x336>
     9c8:	23 28       	or	r2, r3
     9ca:	09 f0       	breq	.+2      	; 0x9ce <find_volume+0x2e2>
     9cc:	d9 c0       	rjmp	.+434    	; 0xb80 <__stack+0x81>
     9ce:	f8 01       	movw	r30, r16
     9d0:	e6 5a       	subi	r30, 0xA6	; 166
     9d2:	ff 4f       	sbci	r31, 0xFF	; 255
     9d4:	80 81       	ld	r24, Z
     9d6:	91 81       	ldd	r25, Z+1	; 0x01
     9d8:	a2 81       	ldd	r26, Z+2	; 0x02
     9da:	b3 81       	ldd	r27, Z+3	; 0x03
     9dc:	f8 01       	movw	r30, r16
     9de:	82 a3       	std	Z+34, r24	; 0x22
     9e0:	93 a3       	std	Z+35, r25	; 0x23
     9e2:	a4 a3       	std	Z+36, r26	; 0x24
     9e4:	b5 a3       	std	Z+37, r27	; 0x25
     9e6:	88 0c       	add	r8, r8
     9e8:	99 1c       	adc	r9, r9
     9ea:	aa 1c       	adc	r10, r10
     9ec:	bb 1c       	adc	r11, r11
     9ee:	88 0c       	add	r8, r8
     9f0:	99 1c       	adc	r9, r9
     9f2:	aa 1c       	adc	r10, r10
     9f4:	bb 1c       	adc	r11, r11
     9f6:	ff ef       	ldi	r31, 0xFF	; 255
     9f8:	8f 0e       	add	r8, r31
     9fa:	f1 e0       	ldi	r31, 0x01	; 1
     9fc:	9f 1e       	adc	r9, r31
     9fe:	a1 1c       	adc	r10, r1
     a00:	b1 1c       	adc	r11, r1
     a02:	07 2e       	mov	r0, r23
     a04:	79 e0       	ldi	r23, 0x09	; 9
     a06:	b6 94       	lsr	r11
     a08:	a7 94       	ror	r10
     a0a:	97 94       	ror	r9
     a0c:	87 94       	ror	r8
     a0e:	7a 95       	dec	r23
     a10:	d1 f7       	brne	.-12     	; 0xa06 <find_volume+0x31a>
     a12:	70 2d       	mov	r23, r0
     a14:	48 14       	cp	r4, r8
     a16:	59 04       	cpc	r5, r9
     a18:	6a 04       	cpc	r6, r10
     a1a:	7b 04       	cpc	r7, r11
     a1c:	08 f4       	brcc	.+2      	; 0xa20 <find_volume+0x334>
     a1e:	b2 c0       	rjmp	.+356    	; 0xb84 <__stack+0x85>
     a20:	fb c0       	rjmp	.+502    	; 0xc18 <__stack+0x119>
     a22:	23 28       	or	r2, r3
     a24:	09 f4       	brne	.+2      	; 0xa28 <find_volume+0x33c>
     a26:	b0 c0       	rjmp	.+352    	; 0xb88 <__stack+0x89>
     a28:	2a 8d       	ldd	r18, Y+26	; 0x1a
     a2a:	3b 8d       	ldd	r19, Y+27	; 0x1b
     a2c:	4c 8d       	ldd	r20, Y+28	; 0x1c
     a2e:	5d 8d       	ldd	r21, Y+29	; 0x1d
     a30:	82 0f       	add	r24, r18
     a32:	93 1f       	adc	r25, r19
     a34:	a4 1f       	adc	r26, r20
     a36:	b5 1f       	adc	r27, r21
     a38:	f8 01       	movw	r30, r16
     a3a:	82 a3       	std	Z+34, r24	; 0x22
     a3c:	93 a3       	std	Z+35, r25	; 0x23
     a3e:	a4 a3       	std	Z+36, r26	; 0x24
     a40:	b5 a3       	std	Z+37, r27	; 0x25
     a42:	f9 89       	ldd	r31, Y+17	; 0x11
     a44:	f2 30       	cpi	r31, 0x02	; 2
     a46:	29 f4       	brne	.+10     	; 0xa52 <find_volume+0x366>
     a48:	88 0c       	add	r8, r8
     a4a:	99 1c       	adc	r9, r9
     a4c:	aa 1c       	adc	r10, r10
     a4e:	bb 1c       	adc	r11, r11
     a50:	0a c1       	rjmp	.+532    	; 0xc66 <__stack+0x167>
     a52:	a3 e0       	ldi	r26, 0x03	; 3
     a54:	b0 e0       	ldi	r27, 0x00	; 0
     a56:	a5 01       	movw	r20, r10
     a58:	94 01       	movw	r18, r8
     a5a:	0e 94 89 20 	call	0x4112	; 0x4112 <__muluhisi3>
     a5e:	dc 01       	movw	r26, r24
     a60:	cb 01       	movw	r24, r22
     a62:	b6 95       	lsr	r27
     a64:	a7 95       	ror	r26
     a66:	97 95       	ror	r25
     a68:	87 95       	ror	r24
     a6a:	21 e0       	ldi	r18, 0x01	; 1
     a6c:	82 22       	and	r8, r18
     a6e:	99 24       	eor	r9, r9
     a70:	aa 24       	eor	r10, r10
     a72:	bb 24       	eor	r11, r11
     a74:	88 0e       	add	r8, r24
     a76:	99 1e       	adc	r9, r25
     a78:	aa 1e       	adc	r10, r26
     a7a:	bb 1e       	adc	r11, r27
     a7c:	f4 c0       	rjmp	.+488    	; 0xc66 <__stack+0x167>
     a7e:	b7 01       	movw	r22, r14
     a80:	a6 01       	movw	r20, r12
     a82:	4f 5f       	subi	r20, 0xFF	; 255
     a84:	5f 4f       	sbci	r21, 0xFF	; 255
     a86:	6f 4f       	sbci	r22, 0xFF	; 255
     a88:	7f 4f       	sbci	r23, 0xFF	; 255
     a8a:	c8 01       	movw	r24, r16
     a8c:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <move_window>
     a90:	81 11       	cpse	r24, r1
     a92:	39 c0       	rjmp	.+114    	; 0xb06 <__stack+0x7>
     a94:	d8 01       	movw	r26, r16
     a96:	15 96       	adiw	r26, 0x05	; 5
     a98:	1c 92       	st	X, r1
     a9a:	f8 01       	movw	r30, r16
     a9c:	e4 5d       	subi	r30, 0xD4	; 212
     a9e:	fd 4f       	sbci	r31, 0xFD	; 253
     aa0:	80 81       	ld	r24, Z
     aa2:	91 81       	ldd	r25, Z+1	; 0x01
     aa4:	85 35       	cpi	r24, 0x55	; 85
     aa6:	9a 4a       	sbci	r25, 0xAA	; 170
     aa8:	89 f5       	brne	.+98     	; 0xb0c <__stack+0xd>
     aaa:	f8 01       	movw	r30, r16
     aac:	86 a5       	ldd	r24, Z+46	; 0x2e
     aae:	97 a5       	ldd	r25, Z+47	; 0x2f
     ab0:	a0 a9       	ldd	r26, Z+48	; 0x30
     ab2:	b1 a9       	ldd	r27, Z+49	; 0x31
     ab4:	82 35       	cpi	r24, 0x52	; 82
     ab6:	92 45       	sbci	r25, 0x52	; 82
     ab8:	a1 46       	sbci	r26, 0x61	; 97
     aba:	b1 44       	sbci	r27, 0x41	; 65
     abc:	51 f5       	brne	.+84     	; 0xb12 <__stack+0x13>
     abe:	f8 01       	movw	r30, r16
     ac0:	ee 5e       	subi	r30, 0xEE	; 238
     ac2:	fd 4f       	sbci	r31, 0xFD	; 253
     ac4:	80 81       	ld	r24, Z
     ac6:	91 81       	ldd	r25, Z+1	; 0x01
     ac8:	a2 81       	ldd	r26, Z+2	; 0x02
     aca:	b3 81       	ldd	r27, Z+3	; 0x03
     acc:	82 37       	cpi	r24, 0x72	; 114
     ace:	92 47       	sbci	r25, 0x72	; 114
     ad0:	a1 44       	sbci	r26, 0x41	; 65
     ad2:	b1 46       	sbci	r27, 0x61	; 97
     ad4:	09 f5       	brne	.+66     	; 0xb18 <__stack+0x19>
     ad6:	34 96       	adiw	r30, 0x04	; 4
     ad8:	80 81       	ld	r24, Z
     ada:	91 81       	ldd	r25, Z+1	; 0x01
     adc:	a2 81       	ldd	r26, Z+2	; 0x02
     ade:	b3 81       	ldd	r27, Z+3	; 0x03
     ae0:	f8 01       	movw	r30, r16
     ae2:	86 87       	std	Z+14, r24	; 0x0e
     ae4:	97 87       	std	Z+15, r25	; 0x0f
     ae6:	a0 8b       	std	Z+16, r26	; 0x10
     ae8:	b1 8b       	std	Z+17, r27	; 0x11
     aea:	e6 5e       	subi	r30, 0xE6	; 230
     aec:	fd 4f       	sbci	r31, 0xFD	; 253
     aee:	80 81       	ld	r24, Z
     af0:	91 81       	ldd	r25, Z+1	; 0x01
     af2:	a2 81       	ldd	r26, Z+2	; 0x02
     af4:	b3 81       	ldd	r27, Z+3	; 0x03
     af6:	f8 01       	movw	r30, r16
     af8:	82 87       	std	Z+10, r24	; 0x0a
     afa:	93 87       	std	Z+11, r25	; 0x0b
     afc:	a4 87       	std	Z+12, r26	; 0x0c
     afe:	b5 87       	std	Z+13, r27	; 0x0d
     b00:	f3 e0       	ldi	r31, 0x03	; 3
     b02:	f9 8b       	std	Y+17, r31	; 0x11
     b04:	0b c0       	rjmp	.+22     	; 0xb1c <__stack+0x1d>
     b06:	e3 e0       	ldi	r30, 0x03	; 3
     b08:	e9 8b       	std	Y+17, r30	; 0x11
     b0a:	08 c0       	rjmp	.+16     	; 0xb1c <__stack+0x1d>
     b0c:	f3 e0       	ldi	r31, 0x03	; 3
     b0e:	f9 8b       	std	Y+17, r31	; 0x11
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__stack+0x1d>
     b12:	e3 e0       	ldi	r30, 0x03	; 3
     b14:	e9 8b       	std	Y+17, r30	; 0x11
     b16:	02 c0       	rjmp	.+4      	; 0xb1c <__stack+0x1d>
     b18:	f3 e0       	ldi	r31, 0x03	; 3
     b1a:	f9 8b       	std	Y+17, r31	; 0x11
     b1c:	e9 89       	ldd	r30, Y+17	; 0x11
     b1e:	d8 01       	movw	r26, r16
     b20:	ec 93       	st	X, r30
     b22:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <__data_end>
     b26:	90 91 61 03 	lds	r25, 0x0361	; 0x800361 <__data_end+0x1>
     b2a:	01 96       	adiw	r24, 0x01	; 1
     b2c:	90 93 61 03 	sts	0x0361, r25	; 0x800361 <__data_end+0x1>
     b30:	80 93 60 03 	sts	0x0360, r24	; 0x800360 <__data_end>
     b34:	17 96       	adiw	r26, 0x07	; 7
     b36:	9c 93       	st	X, r25
     b38:	8e 93       	st	-X, r24
     b3a:	16 97       	sbiw	r26, 0x06	; 6
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	a9 c0       	rjmp	.+338    	; 0xc92 <__stack+0x193>
     b40:	8b e0       	ldi	r24, 0x0B	; 11
     b42:	a7 c0       	rjmp	.+334    	; 0xc92 <__stack+0x193>
     b44:	8c e0       	ldi	r24, 0x0C	; 12
     b46:	a5 c0       	rjmp	.+330    	; 0xc92 <__stack+0x193>
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	a3 c0       	rjmp	.+326    	; 0xc92 <__stack+0x193>
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	a1 c0       	rjmp	.+322    	; 0xc92 <__stack+0x193>
     b50:	83 e0       	ldi	r24, 0x03	; 3
     b52:	9f c0       	rjmp	.+318    	; 0xc92 <__stack+0x193>
     b54:	8a e0       	ldi	r24, 0x0A	; 10
     b56:	9d c0       	rjmp	.+314    	; 0xc92 <__stack+0x193>
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	9b c0       	rjmp	.+310    	; 0xc92 <__stack+0x193>
     b5c:	8d e0       	ldi	r24, 0x0D	; 13
     b5e:	99 c0       	rjmp	.+306    	; 0xc92 <__stack+0x193>
     b60:	8d e0       	ldi	r24, 0x0D	; 13
     b62:	97 c0       	rjmp	.+302    	; 0xc92 <__stack+0x193>
     b64:	8d e0       	ldi	r24, 0x0D	; 13
     b66:	95 c0       	rjmp	.+298    	; 0xc92 <__stack+0x193>
     b68:	8d e0       	ldi	r24, 0x0D	; 13
     b6a:	93 c0       	rjmp	.+294    	; 0xc92 <__stack+0x193>
     b6c:	8d e0       	ldi	r24, 0x0D	; 13
     b6e:	91 c0       	rjmp	.+290    	; 0xc92 <__stack+0x193>
     b70:	8d e0       	ldi	r24, 0x0D	; 13
     b72:	8f c0       	rjmp	.+286    	; 0xc92 <__stack+0x193>
     b74:	8d e0       	ldi	r24, 0x0D	; 13
     b76:	8d c0       	rjmp	.+282    	; 0xc92 <__stack+0x193>
     b78:	8d e0       	ldi	r24, 0x0D	; 13
     b7a:	8b c0       	rjmp	.+278    	; 0xc92 <__stack+0x193>
     b7c:	8d e0       	ldi	r24, 0x0D	; 13
     b7e:	89 c0       	rjmp	.+274    	; 0xc92 <__stack+0x193>
     b80:	8d e0       	ldi	r24, 0x0D	; 13
     b82:	87 c0       	rjmp	.+270    	; 0xc92 <__stack+0x193>
     b84:	8d e0       	ldi	r24, 0x0D	; 13
     b86:	85 c0       	rjmp	.+266    	; 0xc92 <__stack+0x193>
     b88:	8d e0       	ldi	r24, 0x0D	; 13
     b8a:	83 c0       	rjmp	.+262    	; 0xc92 <__stack+0x193>
     b8c:	8d e0       	ldi	r24, 0x0D	; 13
     b8e:	81 c0       	rjmp	.+258    	; 0xc92 <__stack+0x193>
     b90:	40 e0       	ldi	r20, 0x00	; 0
     b92:	50 e0       	ldi	r21, 0x00	; 0
     b94:	ba 01       	movw	r22, r20
     b96:	c8 01       	movw	r24, r16
     b98:	0e 94 16 03 	call	0x62c	; 0x62c <check_fs>
     b9c:	81 30       	cpi	r24, 0x01	; 1
     b9e:	09 f0       	breq	.+2      	; 0xba2 <__stack+0xa3>
     ba0:	2d ce       	rjmp	.-934    	; 0x7fc <find_volume+0x110>
     ba2:	f8 01       	movw	r30, r16
     ba4:	e0 51       	subi	r30, 0x10	; 16
     ba6:	fe 4f       	sbci	r31, 0xFE	; 254
     ba8:	9e 01       	movw	r18, r28
     baa:	2f 5f       	subi	r18, 0xFF	; 255
     bac:	3f 4f       	sbci	r19, 0xFF	; 255
     bae:	59 01       	movw	r10, r18
     bb0:	a8 01       	movw	r20, r16
     bb2:	40 5d       	subi	r20, 0xD0	; 208
     bb4:	5d 4f       	sbci	r21, 0xFD	; 253
     bb6:	e1 2c       	mov	r14, r1
     bb8:	f1 2c       	mov	r15, r1
     bba:	70 e0       	ldi	r23, 0x00	; 0
     bbc:	60 e0       	ldi	r22, 0x00	; 0
     bbe:	e9 cd       	rjmp	.-1070   	; 0x792 <find_volume+0xa6>
     bc0:	49 01       	movw	r8, r18
     bc2:	5a 01       	movw	r10, r20
     bc4:	62 e0       	ldi	r22, 0x02	; 2
     bc6:	86 0e       	add	r8, r22
     bc8:	91 1c       	adc	r9, r1
     bca:	a1 1c       	adc	r10, r1
     bcc:	b1 1c       	adc	r11, r1
     bce:	d8 01       	movw	r26, r16
     bd0:	52 96       	adiw	r26, 0x12	; 18
     bd2:	8d 92       	st	X+, r8
     bd4:	9d 92       	st	X+, r9
     bd6:	ad 92       	st	X+, r10
     bd8:	bc 92       	st	X, r11
     bda:	55 97       	sbiw	r26, 0x15	; 21
     bdc:	f8 01       	movw	r30, r16
     bde:	c2 8e       	std	Z+26, r12	; 0x1a
     be0:	d3 8e       	std	Z+27, r13	; 0x1b
     be2:	e4 8e       	std	Z+28, r14	; 0x1c
     be4:	f5 8e       	std	Z+29, r15	; 0x1d
     be6:	8e 89       	ldd	r24, Y+22	; 0x16
     be8:	9f 89       	ldd	r25, Y+23	; 0x17
     bea:	a8 8d       	ldd	r26, Y+24	; 0x18
     bec:	b9 8d       	ldd	r27, Y+25	; 0x19
     bee:	8c 0d       	add	r24, r12
     bf0:	9d 1d       	adc	r25, r13
     bf2:	ae 1d       	adc	r26, r14
     bf4:	bf 1d       	adc	r27, r15
     bf6:	86 8f       	std	Z+30, r24	; 0x1e
     bf8:	97 8f       	std	Z+31, r25	; 0x1f
     bfa:	a0 a3       	std	Z+32, r26	; 0x20
     bfc:	b1 a3       	std	Z+33, r27	; 0x21
     bfe:	8a 89       	ldd	r24, Y+18	; 0x12
     c00:	9b 89       	ldd	r25, Y+19	; 0x13
     c02:	ac 89       	ldd	r26, Y+20	; 0x14
     c04:	bd 89       	ldd	r27, Y+21	; 0x15
     c06:	8c 0d       	add	r24, r12
     c08:	9d 1d       	adc	r25, r13
     c0a:	ae 1d       	adc	r26, r14
     c0c:	bf 1d       	adc	r27, r15
     c0e:	86 a3       	std	Z+38, r24	; 0x26
     c10:	97 a3       	std	Z+39, r25	; 0x27
     c12:	a0 a7       	std	Z+40, r26	; 0x28
     c14:	b1 a7       	std	Z+41, r27	; 0x29
     c16:	d8 ce       	rjmp	.-592    	; 0x9c8 <find_volume+0x2dc>
     c18:	8f ef       	ldi	r24, 0xFF	; 255
     c1a:	9f ef       	ldi	r25, 0xFF	; 255
     c1c:	dc 01       	movw	r26, r24
     c1e:	f8 01       	movw	r30, r16
     c20:	86 87       	std	Z+14, r24	; 0x0e
     c22:	97 87       	std	Z+15, r25	; 0x0f
     c24:	a0 8b       	std	Z+16, r26	; 0x10
     c26:	b1 8b       	std	Z+17, r27	; 0x11
     c28:	82 87       	std	Z+10, r24	; 0x0a
     c2a:	93 87       	std	Z+11, r25	; 0x0b
     c2c:	a4 87       	std	Z+12, r26	; 0x0c
     c2e:	b5 87       	std	Z+13, r27	; 0x0d
     c30:	80 e8       	ldi	r24, 0x80	; 128
     c32:	85 83       	std	Z+5, r24	; 0x05
     c34:	e2 5a       	subi	r30, 0xA2	; 162
     c36:	ff 4f       	sbci	r31, 0xFF	; 255
     c38:	80 81       	ld	r24, Z
     c3a:	91 81       	ldd	r25, Z+1	; 0x01
     c3c:	01 97       	sbiw	r24, 0x01	; 1
     c3e:	09 f4       	brne	.+2      	; 0xc42 <__stack+0x143>
     c40:	1e cf       	rjmp	.-452    	; 0xa7e <find_volume+0x392>
     c42:	f3 e0       	ldi	r31, 0x03	; 3
     c44:	f9 8b       	std	Y+17, r31	; 0x11
     c46:	6a cf       	rjmp	.-300    	; 0xb1c <__stack+0x1d>
     c48:	8f ef       	ldi	r24, 0xFF	; 255
     c4a:	9f ef       	ldi	r25, 0xFF	; 255
     c4c:	dc 01       	movw	r26, r24
     c4e:	f8 01       	movw	r30, r16
     c50:	86 87       	std	Z+14, r24	; 0x0e
     c52:	97 87       	std	Z+15, r25	; 0x0f
     c54:	a0 8b       	std	Z+16, r26	; 0x10
     c56:	b1 8b       	std	Z+17, r27	; 0x11
     c58:	82 87       	std	Z+10, r24	; 0x0a
     c5a:	93 87       	std	Z+11, r25	; 0x0b
     c5c:	a4 87       	std	Z+12, r26	; 0x0c
     c5e:	b5 87       	std	Z+13, r27	; 0x0d
     c60:	80 e8       	ldi	r24, 0x80	; 128
     c62:	85 83       	std	Z+5, r24	; 0x05
     c64:	5b cf       	rjmp	.-330    	; 0xb1c <__stack+0x1d>
     c66:	ff ef       	ldi	r31, 0xFF	; 255
     c68:	8f 0e       	add	r8, r31
     c6a:	f1 e0       	ldi	r31, 0x01	; 1
     c6c:	9f 1e       	adc	r9, r31
     c6e:	a1 1c       	adc	r10, r1
     c70:	b1 1c       	adc	r11, r1
     c72:	07 2e       	mov	r0, r23
     c74:	79 e0       	ldi	r23, 0x09	; 9
     c76:	b6 94       	lsr	r11
     c78:	a7 94       	ror	r10
     c7a:	97 94       	ror	r9
     c7c:	87 94       	ror	r8
     c7e:	7a 95       	dec	r23
     c80:	d1 f7       	brne	.-12     	; 0xc76 <__stack+0x177>
     c82:	70 2d       	mov	r23, r0
     c84:	48 14       	cp	r4, r8
     c86:	59 04       	cpc	r5, r9
     c88:	6a 04       	cpc	r6, r10
     c8a:	7b 04       	cpc	r7, r11
     c8c:	08 f4       	brcc	.+2      	; 0xc90 <__stack+0x191>
     c8e:	7e cf       	rjmp	.-260    	; 0xb8c <__stack+0x8d>
     c90:	db cf       	rjmp	.-74     	; 0xc48 <__stack+0x149>
     c92:	6d 96       	adiw	r28, 0x1d	; 29
     c94:	0f b6       	in	r0, 0x3f	; 63
     c96:	f8 94       	cli
     c98:	de bf       	out	0x3e, r29	; 62
     c9a:	0f be       	out	0x3f, r0	; 63
     c9c:	cd bf       	out	0x3d, r28	; 61
     c9e:	df 91       	pop	r29
     ca0:	cf 91       	pop	r28
     ca2:	1f 91       	pop	r17
     ca4:	0f 91       	pop	r16
     ca6:	ff 90       	pop	r15
     ca8:	ef 90       	pop	r14
     caa:	df 90       	pop	r13
     cac:	cf 90       	pop	r12
     cae:	bf 90       	pop	r11
     cb0:	af 90       	pop	r10
     cb2:	9f 90       	pop	r9
     cb4:	8f 90       	pop	r8
     cb6:	7f 90       	pop	r7
     cb8:	6f 90       	pop	r6
     cba:	5f 90       	pop	r5
     cbc:	4f 90       	pop	r4
     cbe:	3f 90       	pop	r3
     cc0:	2f 90       	pop	r2
     cc2:	08 95       	ret

00000cc4 <clust2sect>:
     cc4:	0f 93       	push	r16
     cc6:	1f 93       	push	r17
     cc8:	fc 01       	movw	r30, r24
     cca:	9a 01       	movw	r18, r20
     ccc:	ab 01       	movw	r20, r22
     cce:	22 50       	subi	r18, 0x02	; 2
     cd0:	31 09       	sbc	r19, r1
     cd2:	41 09       	sbc	r20, r1
     cd4:	51 09       	sbc	r21, r1
     cd6:	82 89       	ldd	r24, Z+18	; 0x12
     cd8:	93 89       	ldd	r25, Z+19	; 0x13
     cda:	a4 89       	ldd	r26, Z+20	; 0x14
     cdc:	b5 89       	ldd	r27, Z+21	; 0x15
     cde:	02 97       	sbiw	r24, 0x02	; 2
     ce0:	a1 09       	sbc	r26, r1
     ce2:	b1 09       	sbc	r27, r1
     ce4:	28 17       	cp	r18, r24
     ce6:	39 07       	cpc	r19, r25
     ce8:	4a 07       	cpc	r20, r26
     cea:	5b 07       	cpc	r21, r27
     cec:	68 f4       	brcc	.+26     	; 0xd08 <clust2sect+0x44>
     cee:	a2 81       	ldd	r26, Z+2	; 0x02
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	0e 94 89 20 	call	0x4112	; 0x4112 <__muluhisi3>
     cf6:	06 a1       	ldd	r16, Z+38	; 0x26
     cf8:	17 a1       	ldd	r17, Z+39	; 0x27
     cfa:	20 a5       	ldd	r18, Z+40	; 0x28
     cfc:	31 a5       	ldd	r19, Z+41	; 0x29
     cfe:	60 0f       	add	r22, r16
     d00:	71 1f       	adc	r23, r17
     d02:	82 1f       	adc	r24, r18
     d04:	93 1f       	adc	r25, r19
     d06:	03 c0       	rjmp	.+6      	; 0xd0e <clust2sect+0x4a>
     d08:	60 e0       	ldi	r22, 0x00	; 0
     d0a:	70 e0       	ldi	r23, 0x00	; 0
     d0c:	cb 01       	movw	r24, r22
     d0e:	1f 91       	pop	r17
     d10:	0f 91       	pop	r16
     d12:	08 95       	ret

00000d14 <get_fat>:
     d14:	af 92       	push	r10
     d16:	bf 92       	push	r11
     d18:	cf 92       	push	r12
     d1a:	df 92       	push	r13
     d1c:	ef 92       	push	r14
     d1e:	ff 92       	push	r15
     d20:	0f 93       	push	r16
     d22:	1f 93       	push	r17
     d24:	cf 93       	push	r28
     d26:	df 93       	push	r29
     d28:	42 30       	cpi	r20, 0x02	; 2
     d2a:	51 05       	cpc	r21, r1
     d2c:	61 05       	cpc	r22, r1
     d2e:	71 05       	cpc	r23, r1
     d30:	08 f4       	brcc	.+2      	; 0xd34 <get_fat+0x20>
     d32:	ae c0       	rjmp	.+348    	; 0xe90 <get_fat+0x17c>
     d34:	fc 01       	movw	r30, r24
     d36:	c2 88       	ldd	r12, Z+18	; 0x12
     d38:	d3 88       	ldd	r13, Z+19	; 0x13
     d3a:	e4 88       	ldd	r14, Z+20	; 0x14
     d3c:	f5 88       	ldd	r15, Z+21	; 0x15
     d3e:	4c 15       	cp	r20, r12
     d40:	5d 05       	cpc	r21, r13
     d42:	6e 05       	cpc	r22, r14
     d44:	7f 05       	cpc	r23, r15
     d46:	08 f0       	brcs	.+2      	; 0xd4a <get_fat+0x36>
     d48:	a8 c0       	rjmp	.+336    	; 0xe9a <get_fat+0x186>
     d4a:	6a 01       	movw	r12, r20
     d4c:	7b 01       	movw	r14, r22
     d4e:	ec 01       	movw	r28, r24
     d50:	80 81       	ld	r24, Z
     d52:	82 30       	cpi	r24, 0x02	; 2
     d54:	09 f4       	brne	.+2      	; 0xd58 <get_fat+0x44>
     d56:	4d c0       	rjmp	.+154    	; 0xdf2 <get_fat+0xde>
     d58:	83 30       	cpi	r24, 0x03	; 3
     d5a:	09 f4       	brne	.+2      	; 0xd5e <get_fat+0x4a>
     d5c:	6c c0       	rjmp	.+216    	; 0xe36 <get_fat+0x122>
     d5e:	81 30       	cpi	r24, 0x01	; 1
     d60:	09 f0       	breq	.+2      	; 0xd64 <get_fat+0x50>
     d62:	a0 c0       	rjmp	.+320    	; 0xea4 <get_fat+0x190>
     d64:	8a 01       	movw	r16, r20
     d66:	16 95       	lsr	r17
     d68:	07 95       	ror	r16
     d6a:	04 0f       	add	r16, r20
     d6c:	15 1f       	adc	r17, r21
     d6e:	c8 01       	movw	r24, r16
     d70:	89 2f       	mov	r24, r25
     d72:	99 27       	eor	r25, r25
     d74:	86 95       	lsr	r24
     d76:	46 8d       	ldd	r20, Z+30	; 0x1e
     d78:	57 8d       	ldd	r21, Z+31	; 0x1f
     d7a:	60 a1       	ldd	r22, Z+32	; 0x20
     d7c:	71 a1       	ldd	r23, Z+33	; 0x21
     d7e:	48 0f       	add	r20, r24
     d80:	59 1f       	adc	r21, r25
     d82:	61 1d       	adc	r22, r1
     d84:	71 1d       	adc	r23, r1
     d86:	cf 01       	movw	r24, r30
     d88:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <move_window>
     d8c:	81 11       	cpse	r24, r1
     d8e:	8f c0       	rjmp	.+286    	; 0xeae <get_fat+0x19a>
     d90:	58 01       	movw	r10, r16
     d92:	ff ef       	ldi	r31, 0xFF	; 255
     d94:	af 1a       	sub	r10, r31
     d96:	bf 0a       	sbc	r11, r31
     d98:	11 70       	andi	r17, 0x01	; 1
     d9a:	fe 01       	movw	r30, r28
     d9c:	e0 0f       	add	r30, r16
     d9e:	f1 1f       	adc	r31, r17
     da0:	16 a5       	ldd	r17, Z+46	; 0x2e
     da2:	c5 01       	movw	r24, r10
     da4:	89 2f       	mov	r24, r25
     da6:	99 27       	eor	r25, r25
     da8:	86 95       	lsr	r24
     daa:	4e 8d       	ldd	r20, Y+30	; 0x1e
     dac:	5f 8d       	ldd	r21, Y+31	; 0x1f
     dae:	68 a1       	ldd	r22, Y+32	; 0x20
     db0:	79 a1       	ldd	r23, Y+33	; 0x21
     db2:	48 0f       	add	r20, r24
     db4:	59 1f       	adc	r21, r25
     db6:	61 1d       	adc	r22, r1
     db8:	71 1d       	adc	r23, r1
     dba:	ce 01       	movw	r24, r28
     dbc:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <move_window>
     dc0:	81 11       	cpse	r24, r1
     dc2:	79 c0       	rjmp	.+242    	; 0xeb6 <get_fat+0x1a2>
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	b8 22       	and	r11, r24
     dc8:	ca 0d       	add	r28, r10
     dca:	db 1d       	adc	r29, r11
     dcc:	8e a5       	ldd	r24, Y+46	; 0x2e
     dce:	61 2f       	mov	r22, r17
     dd0:	70 e0       	ldi	r23, 0x00	; 0
     dd2:	78 2b       	or	r23, r24
     dd4:	c0 fe       	sbrs	r12, 0
     dd6:	09 c0       	rjmp	.+18     	; 0xdea <get_fat+0xd6>
     dd8:	72 95       	swap	r23
     dda:	62 95       	swap	r22
     ddc:	6f 70       	andi	r22, 0x0F	; 15
     dde:	67 27       	eor	r22, r23
     de0:	7f 70       	andi	r23, 0x0F	; 15
     de2:	67 27       	eor	r22, r23
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	71 c0       	rjmp	.+226    	; 0xecc <get_fat+0x1b8>
     dea:	7f 70       	andi	r23, 0x0F	; 15
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	6d c0       	rjmp	.+218    	; 0xecc <get_fat+0x1b8>
     df2:	45 2f       	mov	r20, r21
     df4:	56 2f       	mov	r21, r22
     df6:	67 2f       	mov	r22, r23
     df8:	77 27       	eor	r23, r23
     dfa:	86 8d       	ldd	r24, Z+30	; 0x1e
     dfc:	97 8d       	ldd	r25, Z+31	; 0x1f
     dfe:	a0 a1       	ldd	r26, Z+32	; 0x20
     e00:	b1 a1       	ldd	r27, Z+33	; 0x21
     e02:	48 0f       	add	r20, r24
     e04:	59 1f       	adc	r21, r25
     e06:	6a 1f       	adc	r22, r26
     e08:	7b 1f       	adc	r23, r27
     e0a:	cf 01       	movw	r24, r30
     e0c:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <move_window>
     e10:	81 11       	cpse	r24, r1
     e12:	55 c0       	rjmp	.+170    	; 0xebe <get_fat+0x1aa>
     e14:	b7 01       	movw	r22, r14
     e16:	a6 01       	movw	r20, r12
     e18:	44 0f       	add	r20, r20
     e1a:	55 1f       	adc	r21, r21
     e1c:	66 1f       	adc	r22, r22
     e1e:	77 1f       	adc	r23, r23
     e20:	4e 7f       	andi	r20, 0xFE	; 254
     e22:	51 70       	andi	r21, 0x01	; 1
     e24:	66 27       	eor	r22, r22
     e26:	77 27       	eor	r23, r23
     e28:	c4 0f       	add	r28, r20
     e2a:	d5 1f       	adc	r29, r21
     e2c:	6e a5       	ldd	r22, Y+46	; 0x2e
     e2e:	7f a5       	ldd	r23, Y+47	; 0x2f
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	4b c0       	rjmp	.+150    	; 0xecc <get_fat+0x1b8>
     e36:	86 8d       	ldd	r24, Z+30	; 0x1e
     e38:	97 8d       	ldd	r25, Z+31	; 0x1f
     e3a:	a0 a1       	ldd	r26, Z+32	; 0x20
     e3c:	b1 a1       	ldd	r27, Z+33	; 0x21
     e3e:	68 94       	set
     e40:	16 f8       	bld	r1, 6
     e42:	76 95       	lsr	r23
     e44:	67 95       	ror	r22
     e46:	57 95       	ror	r21
     e48:	47 95       	ror	r20
     e4a:	16 94       	lsr	r1
     e4c:	d1 f7       	brne	.-12     	; 0xe42 <get_fat+0x12e>
     e4e:	48 0f       	add	r20, r24
     e50:	59 1f       	adc	r21, r25
     e52:	6a 1f       	adc	r22, r26
     e54:	7b 1f       	adc	r23, r27
     e56:	cf 01       	movw	r24, r30
     e58:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <move_window>
     e5c:	81 11       	cpse	r24, r1
     e5e:	33 c0       	rjmp	.+102    	; 0xec6 <get_fat+0x1b2>
     e60:	b7 01       	movw	r22, r14
     e62:	a6 01       	movw	r20, r12
     e64:	44 0f       	add	r20, r20
     e66:	55 1f       	adc	r21, r21
     e68:	66 1f       	adc	r22, r22
     e6a:	77 1f       	adc	r23, r23
     e6c:	44 0f       	add	r20, r20
     e6e:	55 1f       	adc	r21, r21
     e70:	66 1f       	adc	r22, r22
     e72:	77 1f       	adc	r23, r23
     e74:	4c 7f       	andi	r20, 0xFC	; 252
     e76:	51 70       	andi	r21, 0x01	; 1
     e78:	66 27       	eor	r22, r22
     e7a:	77 27       	eor	r23, r23
     e7c:	c4 0f       	add	r28, r20
     e7e:	d5 1f       	adc	r29, r21
     e80:	8e a5       	ldd	r24, Y+46	; 0x2e
     e82:	9f a5       	ldd	r25, Y+47	; 0x2f
     e84:	a8 a9       	ldd	r26, Y+48	; 0x30
     e86:	b9 a9       	ldd	r27, Y+49	; 0x31
     e88:	bc 01       	movw	r22, r24
     e8a:	cd 01       	movw	r24, r26
     e8c:	9f 70       	andi	r25, 0x0F	; 15
     e8e:	1e c0       	rjmp	.+60     	; 0xecc <get_fat+0x1b8>
     e90:	61 e0       	ldi	r22, 0x01	; 1
     e92:	70 e0       	ldi	r23, 0x00	; 0
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	19 c0       	rjmp	.+50     	; 0xecc <get_fat+0x1b8>
     e9a:	61 e0       	ldi	r22, 0x01	; 1
     e9c:	70 e0       	ldi	r23, 0x00	; 0
     e9e:	80 e0       	ldi	r24, 0x00	; 0
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	14 c0       	rjmp	.+40     	; 0xecc <get_fat+0x1b8>
     ea4:	61 e0       	ldi	r22, 0x01	; 1
     ea6:	70 e0       	ldi	r23, 0x00	; 0
     ea8:	80 e0       	ldi	r24, 0x00	; 0
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	0f c0       	rjmp	.+30     	; 0xecc <get_fat+0x1b8>
     eae:	6f ef       	ldi	r22, 0xFF	; 255
     eb0:	7f ef       	ldi	r23, 0xFF	; 255
     eb2:	cb 01       	movw	r24, r22
     eb4:	0b c0       	rjmp	.+22     	; 0xecc <get_fat+0x1b8>
     eb6:	6f ef       	ldi	r22, 0xFF	; 255
     eb8:	7f ef       	ldi	r23, 0xFF	; 255
     eba:	cb 01       	movw	r24, r22
     ebc:	07 c0       	rjmp	.+14     	; 0xecc <get_fat+0x1b8>
     ebe:	6f ef       	ldi	r22, 0xFF	; 255
     ec0:	7f ef       	ldi	r23, 0xFF	; 255
     ec2:	cb 01       	movw	r24, r22
     ec4:	03 c0       	rjmp	.+6      	; 0xecc <get_fat+0x1b8>
     ec6:	6f ef       	ldi	r22, 0xFF	; 255
     ec8:	7f ef       	ldi	r23, 0xFF	; 255
     eca:	cb 01       	movw	r24, r22
     ecc:	df 91       	pop	r29
     ece:	cf 91       	pop	r28
     ed0:	1f 91       	pop	r17
     ed2:	0f 91       	pop	r16
     ed4:	ff 90       	pop	r15
     ed6:	ef 90       	pop	r14
     ed8:	df 90       	pop	r13
     eda:	cf 90       	pop	r12
     edc:	bf 90       	pop	r11
     ede:	af 90       	pop	r10
     ee0:	08 95       	ret

00000ee2 <dir_sdi>:
     ee2:	af 92       	push	r10
     ee4:	bf 92       	push	r11
     ee6:	cf 92       	push	r12
     ee8:	df 92       	push	r13
     eea:	ef 92       	push	r14
     eec:	ff 92       	push	r15
     eee:	0f 93       	push	r16
     ef0:	1f 93       	push	r17
     ef2:	cf 93       	push	r28
     ef4:	df 93       	push	r29
     ef6:	ec 01       	movw	r28, r24
     ef8:	8b 01       	movw	r16, r22
     efa:	7d 83       	std	Y+5, r23	; 0x05
     efc:	6c 83       	std	Y+4, r22	; 0x04
     efe:	ce 80       	ldd	r12, Y+6	; 0x06
     f00:	df 80       	ldd	r13, Y+7	; 0x07
     f02:	e8 84       	ldd	r14, Y+8	; 0x08
     f04:	f9 84       	ldd	r15, Y+9	; 0x09
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	c8 16       	cp	r12, r24
     f0a:	d1 04       	cpc	r13, r1
     f0c:	e1 04       	cpc	r14, r1
     f0e:	f1 04       	cpc	r15, r1
     f10:	09 f4       	brne	.+2      	; 0xf14 <dir_sdi+0x32>
     f12:	8b c0       	rjmp	.+278    	; 0x102a <dir_sdi+0x148>
     f14:	e8 81       	ld	r30, Y
     f16:	f9 81       	ldd	r31, Y+1	; 0x01
     f18:	82 89       	ldd	r24, Z+18	; 0x12
     f1a:	93 89       	ldd	r25, Z+19	; 0x13
     f1c:	a4 89       	ldd	r26, Z+20	; 0x14
     f1e:	b5 89       	ldd	r27, Z+21	; 0x15
     f20:	c8 16       	cp	r12, r24
     f22:	d9 06       	cpc	r13, r25
     f24:	ea 06       	cpc	r14, r26
     f26:	fb 06       	cpc	r15, r27
     f28:	08 f0       	brcs	.+2      	; 0xf2c <dir_sdi+0x4a>
     f2a:	81 c0       	rjmp	.+258    	; 0x102e <dir_sdi+0x14c>
     f2c:	c1 14       	cp	r12, r1
     f2e:	d1 04       	cpc	r13, r1
     f30:	e1 04       	cpc	r14, r1
     f32:	f1 04       	cpc	r15, r1
     f34:	c1 f4       	brne	.+48     	; 0xf66 <dir_sdi+0x84>
     f36:	80 81       	ld	r24, Z
     f38:	83 30       	cpi	r24, 0x03	; 3
     f3a:	41 f4       	brne	.+16     	; 0xf4c <dir_sdi+0x6a>
     f3c:	82 a1       	ldd	r24, Z+34	; 0x22
     f3e:	93 a1       	ldd	r25, Z+35	; 0x23
     f40:	a4 a1       	ldd	r26, Z+36	; 0x24
     f42:	b5 a1       	ldd	r27, Z+37	; 0x25
     f44:	00 97       	sbiw	r24, 0x00	; 0
     f46:	a1 05       	cpc	r26, r1
     f48:	b1 05       	cpc	r27, r1
     f4a:	59 f4       	brne	.+22     	; 0xf62 <dir_sdi+0x80>
     f4c:	80 85       	ldd	r24, Z+8	; 0x08
     f4e:	91 85       	ldd	r25, Z+9	; 0x09
     f50:	08 17       	cp	r16, r24
     f52:	19 07       	cpc	r17, r25
     f54:	08 f0       	brcs	.+2      	; 0xf58 <dir_sdi+0x76>
     f56:	6d c0       	rjmp	.+218    	; 0x1032 <dir_sdi+0x150>
     f58:	62 a1       	ldd	r22, Z+34	; 0x22
     f5a:	73 a1       	ldd	r23, Z+35	; 0x23
     f5c:	84 a1       	ldd	r24, Z+36	; 0x24
     f5e:	95 a1       	ldd	r25, Z+37	; 0x25
     f60:	37 c0       	rjmp	.+110    	; 0xfd0 <dir_sdi+0xee>
     f62:	6c 01       	movw	r12, r24
     f64:	7d 01       	movw	r14, r26
     f66:	a2 80       	ldd	r10, Z+2	; 0x02
     f68:	80 e1       	ldi	r24, 0x10	; 16
     f6a:	a8 9e       	mul	r10, r24
     f6c:	50 01       	movw	r10, r0
     f6e:	11 24       	eor	r1, r1
     f70:	0a 15       	cp	r16, r10
     f72:	1b 05       	cpc	r17, r11
     f74:	38 f1       	brcs	.+78     	; 0xfc4 <dir_sdi+0xe2>
     f76:	b7 01       	movw	r22, r14
     f78:	a6 01       	movw	r20, r12
     f7a:	88 81       	ld	r24, Y
     f7c:	99 81       	ldd	r25, Y+1	; 0x01
     f7e:	0e 94 8a 06 	call	0xd14	; 0xd14 <get_fat>
     f82:	6b 01       	movw	r12, r22
     f84:	7c 01       	movw	r14, r24
     f86:	8f ef       	ldi	r24, 0xFF	; 255
     f88:	c8 16       	cp	r12, r24
     f8a:	d8 06       	cpc	r13, r24
     f8c:	e8 06       	cpc	r14, r24
     f8e:	f8 06       	cpc	r15, r24
     f90:	09 f4       	brne	.+2      	; 0xf94 <dir_sdi+0xb2>
     f92:	51 c0       	rjmp	.+162    	; 0x1036 <dir_sdi+0x154>
     f94:	82 e0       	ldi	r24, 0x02	; 2
     f96:	c8 16       	cp	r12, r24
     f98:	d1 04       	cpc	r13, r1
     f9a:	e1 04       	cpc	r14, r1
     f9c:	f1 04       	cpc	r15, r1
     f9e:	08 f4       	brcc	.+2      	; 0xfa2 <dir_sdi+0xc0>
     fa0:	4c c0       	rjmp	.+152    	; 0x103a <dir_sdi+0x158>
     fa2:	e8 81       	ld	r30, Y
     fa4:	f9 81       	ldd	r31, Y+1	; 0x01
     fa6:	82 89       	ldd	r24, Z+18	; 0x12
     fa8:	93 89       	ldd	r25, Z+19	; 0x13
     faa:	a4 89       	ldd	r26, Z+20	; 0x14
     fac:	b5 89       	ldd	r27, Z+21	; 0x15
     fae:	c8 16       	cp	r12, r24
     fb0:	d9 06       	cpc	r13, r25
     fb2:	ea 06       	cpc	r14, r26
     fb4:	fb 06       	cpc	r15, r27
     fb6:	08 f0       	brcs	.+2      	; 0xfba <dir_sdi+0xd8>
     fb8:	42 c0       	rjmp	.+132    	; 0x103e <dir_sdi+0x15c>
     fba:	0a 19       	sub	r16, r10
     fbc:	1b 09       	sbc	r17, r11
     fbe:	0a 15       	cp	r16, r10
     fc0:	1b 05       	cpc	r17, r11
     fc2:	c8 f6       	brcc	.-78     	; 0xf76 <dir_sdi+0x94>
     fc4:	b7 01       	movw	r22, r14
     fc6:	a6 01       	movw	r20, r12
     fc8:	88 81       	ld	r24, Y
     fca:	99 81       	ldd	r25, Y+1	; 0x01
     fcc:	0e 94 62 06 	call	0xcc4	; 0xcc4 <clust2sect>
     fd0:	ca 86       	std	Y+10, r12	; 0x0a
     fd2:	db 86       	std	Y+11, r13	; 0x0b
     fd4:	ec 86       	std	Y+12, r14	; 0x0c
     fd6:	fd 86       	std	Y+13, r15	; 0x0d
     fd8:	61 15       	cp	r22, r1
     fda:	71 05       	cpc	r23, r1
     fdc:	81 05       	cpc	r24, r1
     fde:	91 05       	cpc	r25, r1
     fe0:	81 f1       	breq	.+96     	; 0x1042 <dir_sdi+0x160>
     fe2:	98 01       	movw	r18, r16
     fe4:	32 95       	swap	r19
     fe6:	22 95       	swap	r18
     fe8:	2f 70       	andi	r18, 0x0F	; 15
     fea:	23 27       	eor	r18, r19
     fec:	3f 70       	andi	r19, 0x0F	; 15
     fee:	23 27       	eor	r18, r19
     ff0:	dc 01       	movw	r26, r24
     ff2:	cb 01       	movw	r24, r22
     ff4:	82 0f       	add	r24, r18
     ff6:	93 1f       	adc	r25, r19
     ff8:	a1 1d       	adc	r26, r1
     ffa:	b1 1d       	adc	r27, r1
     ffc:	8e 87       	std	Y+14, r24	; 0x0e
     ffe:	9f 87       	std	Y+15, r25	; 0x0f
    1000:	a8 8b       	std	Y+16, r26	; 0x10
    1002:	b9 8b       	std	Y+17, r27	; 0x11
    1004:	88 81       	ld	r24, Y
    1006:	99 81       	ldd	r25, Y+1	; 0x01
    1008:	8e 96       	adiw	r24, 0x2e	; 46
    100a:	0f 70       	andi	r16, 0x0F	; 15
    100c:	11 27       	eor	r17, r17
    100e:	00 0f       	add	r16, r16
    1010:	11 1f       	adc	r17, r17
    1012:	02 95       	swap	r16
    1014:	12 95       	swap	r17
    1016:	10 7f       	andi	r17, 0xF0	; 240
    1018:	10 27       	eor	r17, r16
    101a:	00 7f       	andi	r16, 0xF0	; 240
    101c:	10 27       	eor	r17, r16
    101e:	08 0f       	add	r16, r24
    1020:	19 1f       	adc	r17, r25
    1022:	1b 8b       	std	Y+19, r17	; 0x13
    1024:	0a 8b       	std	Y+18, r16	; 0x12
    1026:	80 e0       	ldi	r24, 0x00	; 0
    1028:	0d c0       	rjmp	.+26     	; 0x1044 <dir_sdi+0x162>
    102a:	82 e0       	ldi	r24, 0x02	; 2
    102c:	0b c0       	rjmp	.+22     	; 0x1044 <dir_sdi+0x162>
    102e:	82 e0       	ldi	r24, 0x02	; 2
    1030:	09 c0       	rjmp	.+18     	; 0x1044 <dir_sdi+0x162>
    1032:	82 e0       	ldi	r24, 0x02	; 2
    1034:	07 c0       	rjmp	.+14     	; 0x1044 <dir_sdi+0x162>
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	05 c0       	rjmp	.+10     	; 0x1044 <dir_sdi+0x162>
    103a:	82 e0       	ldi	r24, 0x02	; 2
    103c:	03 c0       	rjmp	.+6      	; 0x1044 <dir_sdi+0x162>
    103e:	82 e0       	ldi	r24, 0x02	; 2
    1040:	01 c0       	rjmp	.+2      	; 0x1044 <dir_sdi+0x162>
    1042:	82 e0       	ldi	r24, 0x02	; 2
    1044:	df 91       	pop	r29
    1046:	cf 91       	pop	r28
    1048:	1f 91       	pop	r17
    104a:	0f 91       	pop	r16
    104c:	ff 90       	pop	r15
    104e:	ef 90       	pop	r14
    1050:	df 90       	pop	r13
    1052:	cf 90       	pop	r12
    1054:	bf 90       	pop	r11
    1056:	af 90       	pop	r10
    1058:	08 95       	ret

0000105a <put_fat>:
    105a:	4f 92       	push	r4
    105c:	5f 92       	push	r5
    105e:	6f 92       	push	r6
    1060:	7f 92       	push	r7
    1062:	9f 92       	push	r9
    1064:	af 92       	push	r10
    1066:	bf 92       	push	r11
    1068:	cf 92       	push	r12
    106a:	df 92       	push	r13
    106c:	ef 92       	push	r14
    106e:	ff 92       	push	r15
    1070:	0f 93       	push	r16
    1072:	1f 93       	push	r17
    1074:	cf 93       	push	r28
    1076:	df 93       	push	r29
    1078:	42 30       	cpi	r20, 0x02	; 2
    107a:	51 05       	cpc	r21, r1
    107c:	61 05       	cpc	r22, r1
    107e:	71 05       	cpc	r23, r1
    1080:	08 f4       	brcc	.+2      	; 0x1084 <put_fat+0x2a>
    1082:	db c0       	rjmp	.+438    	; 0x123a <put_fat+0x1e0>
    1084:	fc 01       	movw	r30, r24
    1086:	c2 88       	ldd	r12, Z+18	; 0x12
    1088:	d3 88       	ldd	r13, Z+19	; 0x13
    108a:	e4 88       	ldd	r14, Z+20	; 0x14
    108c:	f5 88       	ldd	r15, Z+21	; 0x15
    108e:	4c 15       	cp	r20, r12
    1090:	5d 05       	cpc	r21, r13
    1092:	6e 05       	cpc	r22, r14
    1094:	7f 05       	cpc	r23, r15
    1096:	08 f0       	brcs	.+2      	; 0x109a <put_fat+0x40>
    1098:	d4 c0       	rjmp	.+424    	; 0x1242 <put_fat+0x1e8>
    109a:	68 01       	movw	r12, r16
    109c:	79 01       	movw	r14, r18
    109e:	2a 01       	movw	r4, r20
    10a0:	3b 01       	movw	r6, r22
    10a2:	ec 01       	movw	r28, r24
    10a4:	80 81       	ld	r24, Z
    10a6:	82 30       	cpi	r24, 0x02	; 2
    10a8:	09 f4       	brne	.+2      	; 0x10ac <put_fat+0x52>
    10aa:	65 c0       	rjmp	.+202    	; 0x1176 <put_fat+0x11c>
    10ac:	83 30       	cpi	r24, 0x03	; 3
    10ae:	09 f4       	brne	.+2      	; 0x10b2 <put_fat+0x58>
    10b0:	88 c0       	rjmp	.+272    	; 0x11c2 <put_fat+0x168>
    10b2:	81 30       	cpi	r24, 0x01	; 1
    10b4:	09 f0       	breq	.+2      	; 0x10b8 <put_fat+0x5e>
    10b6:	c9 c0       	rjmp	.+402    	; 0x124a <put_fat+0x1f0>
    10b8:	8a 01       	movw	r16, r20
    10ba:	16 95       	lsr	r17
    10bc:	07 95       	ror	r16
    10be:	04 0f       	add	r16, r20
    10c0:	15 1f       	adc	r17, r21
    10c2:	c8 01       	movw	r24, r16
    10c4:	89 2f       	mov	r24, r25
    10c6:	99 27       	eor	r25, r25
    10c8:	86 95       	lsr	r24
    10ca:	46 8d       	ldd	r20, Z+30	; 0x1e
    10cc:	57 8d       	ldd	r21, Z+31	; 0x1f
    10ce:	60 a1       	ldd	r22, Z+32	; 0x20
    10d0:	71 a1       	ldd	r23, Z+33	; 0x21
    10d2:	48 0f       	add	r20, r24
    10d4:	59 1f       	adc	r21, r25
    10d6:	61 1d       	adc	r22, r1
    10d8:	71 1d       	adc	r23, r1
    10da:	cf 01       	movw	r24, r30
    10dc:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <move_window>
    10e0:	98 2e       	mov	r9, r24
    10e2:	81 11       	cpse	r24, r1
    10e4:	d1 c0       	rjmp	.+418    	; 0x1288 <put_fat+0x22e>
    10e6:	58 01       	movw	r10, r16
    10e8:	ff ef       	ldi	r31, 0xFF	; 255
    10ea:	af 1a       	sub	r10, r31
    10ec:	bf 0a       	sbc	r11, r31
    10ee:	11 70       	andi	r17, 0x01	; 1
    10f0:	40 fe       	sbrs	r4, 0
    10f2:	21 c0       	rjmp	.+66     	; 0x1136 <put_fat+0xdc>
    10f4:	fe 01       	movw	r30, r28
    10f6:	e0 0f       	add	r30, r16
    10f8:	f1 1f       	adc	r31, r17
    10fa:	86 a5       	ldd	r24, Z+46	; 0x2e
    10fc:	28 2f       	mov	r18, r24
    10fe:	2f 70       	andi	r18, 0x0F	; 15
    1100:	30 e1       	ldi	r19, 0x10	; 16
    1102:	c3 9e       	mul	r12, r19
    1104:	c0 01       	movw	r24, r0
    1106:	11 24       	eor	r1, r1
    1108:	82 2b       	or	r24, r18
    110a:	86 a7       	std	Z+46, r24	; 0x2e
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	8c 83       	std	Y+4, r24	; 0x04
    1110:	4e 8d       	ldd	r20, Y+30	; 0x1e
    1112:	5f 8d       	ldd	r21, Y+31	; 0x1f
    1114:	68 a1       	ldd	r22, Y+32	; 0x20
    1116:	79 a1       	ldd	r23, Y+33	; 0x21
    1118:	c5 01       	movw	r24, r10
    111a:	89 2f       	mov	r24, r25
    111c:	99 27       	eor	r25, r25
    111e:	86 95       	lsr	r24
    1120:	48 0f       	add	r20, r24
    1122:	59 1f       	adc	r21, r25
    1124:	61 1d       	adc	r22, r1
    1126:	71 1d       	adc	r23, r1
    1128:	ce 01       	movw	r24, r28
    112a:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <move_window>
    112e:	88 23       	and	r24, r24
    1130:	09 f4       	brne	.+2      	; 0x1134 <put_fat+0xda>
    1132:	93 c0       	rjmp	.+294    	; 0x125a <put_fat+0x200>
    1134:	8e c0       	rjmp	.+284    	; 0x1252 <put_fat+0x1f8>
    1136:	fe 01       	movw	r30, r28
    1138:	e0 0f       	add	r30, r16
    113a:	f1 1f       	adc	r31, r17
    113c:	c6 a6       	std	Z+46, r12	; 0x2e
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	8c 83       	std	Y+4, r24	; 0x04
    1142:	4e 8d       	ldd	r20, Y+30	; 0x1e
    1144:	5f 8d       	ldd	r21, Y+31	; 0x1f
    1146:	68 a1       	ldd	r22, Y+32	; 0x20
    1148:	79 a1       	ldd	r23, Y+33	; 0x21
    114a:	c5 01       	movw	r24, r10
    114c:	89 2f       	mov	r24, r25
    114e:	99 27       	eor	r25, r25
    1150:	86 95       	lsr	r24
    1152:	48 0f       	add	r20, r24
    1154:	59 1f       	adc	r21, r25
    1156:	61 1d       	adc	r22, r1
    1158:	71 1d       	adc	r23, r1
    115a:	ce 01       	movw	r24, r28
    115c:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <move_window>
    1160:	88 23       	and	r24, r24
    1162:	09 f4       	brne	.+2      	; 0x1166 <put_fat+0x10c>
    1164:	85 c0       	rjmp	.+266    	; 0x1270 <put_fat+0x216>
    1166:	77 c0       	rjmp	.+238    	; 0x1256 <put_fat+0x1fc>
    1168:	fe 01       	movw	r30, r28
    116a:	ea 0d       	add	r30, r10
    116c:	fb 1d       	adc	r31, r11
    116e:	c6 a6       	std	Z+46, r12	; 0x2e
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	8c 83       	std	Y+4, r24	; 0x04
    1174:	89 c0       	rjmp	.+274    	; 0x1288 <put_fat+0x22e>
    1176:	45 2f       	mov	r20, r21
    1178:	56 2f       	mov	r21, r22
    117a:	67 2f       	mov	r22, r23
    117c:	77 27       	eor	r23, r23
    117e:	86 8d       	ldd	r24, Z+30	; 0x1e
    1180:	97 8d       	ldd	r25, Z+31	; 0x1f
    1182:	a0 a1       	ldd	r26, Z+32	; 0x20
    1184:	b1 a1       	ldd	r27, Z+33	; 0x21
    1186:	48 0f       	add	r20, r24
    1188:	59 1f       	adc	r21, r25
    118a:	6a 1f       	adc	r22, r26
    118c:	7b 1f       	adc	r23, r27
    118e:	cf 01       	movw	r24, r30
    1190:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <move_window>
    1194:	98 2e       	mov	r9, r24
    1196:	81 11       	cpse	r24, r1
    1198:	77 c0       	rjmp	.+238    	; 0x1288 <put_fat+0x22e>
    119a:	b3 01       	movw	r22, r6
    119c:	a2 01       	movw	r20, r4
    119e:	44 0f       	add	r20, r20
    11a0:	55 1f       	adc	r21, r21
    11a2:	66 1f       	adc	r22, r22
    11a4:	77 1f       	adc	r23, r23
    11a6:	4e 7f       	andi	r20, 0xFE	; 254
    11a8:	51 70       	andi	r21, 0x01	; 1
    11aa:	66 27       	eor	r22, r22
    11ac:	77 27       	eor	r23, r23
    11ae:	42 5d       	subi	r20, 0xD2	; 210
    11b0:	5f 4f       	sbci	r21, 0xFF	; 255
    11b2:	fe 01       	movw	r30, r28
    11b4:	e4 0f       	add	r30, r20
    11b6:	f5 1f       	adc	r31, r21
    11b8:	d1 82       	std	Z+1, r13	; 0x01
    11ba:	c0 82       	st	Z, r12
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	8c 83       	std	Y+4, r24	; 0x04
    11c0:	63 c0       	rjmp	.+198    	; 0x1288 <put_fat+0x22e>
    11c2:	86 8d       	ldd	r24, Z+30	; 0x1e
    11c4:	97 8d       	ldd	r25, Z+31	; 0x1f
    11c6:	a0 a1       	ldd	r26, Z+32	; 0x20
    11c8:	b1 a1       	ldd	r27, Z+33	; 0x21
    11ca:	68 94       	set
    11cc:	16 f8       	bld	r1, 6
    11ce:	76 95       	lsr	r23
    11d0:	67 95       	ror	r22
    11d2:	57 95       	ror	r21
    11d4:	47 95       	ror	r20
    11d6:	16 94       	lsr	r1
    11d8:	d1 f7       	brne	.-12     	; 0x11ce <put_fat+0x174>
    11da:	48 0f       	add	r20, r24
    11dc:	59 1f       	adc	r21, r25
    11de:	6a 1f       	adc	r22, r26
    11e0:	7b 1f       	adc	r23, r27
    11e2:	cf 01       	movw	r24, r30
    11e4:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <move_window>
    11e8:	98 2e       	mov	r9, r24
    11ea:	81 11       	cpse	r24, r1
    11ec:	4d c0       	rjmp	.+154    	; 0x1288 <put_fat+0x22e>
    11ee:	b3 01       	movw	r22, r6
    11f0:	a2 01       	movw	r20, r4
    11f2:	44 0f       	add	r20, r20
    11f4:	55 1f       	adc	r21, r21
    11f6:	66 1f       	adc	r22, r22
    11f8:	77 1f       	adc	r23, r23
    11fa:	44 0f       	add	r20, r20
    11fc:	55 1f       	adc	r21, r21
    11fe:	66 1f       	adc	r22, r22
    1200:	77 1f       	adc	r23, r23
    1202:	4c 7f       	andi	r20, 0xFC	; 252
    1204:	51 70       	andi	r21, 0x01	; 1
    1206:	66 27       	eor	r22, r22
    1208:	77 27       	eor	r23, r23
    120a:	42 5d       	subi	r20, 0xD2	; 210
    120c:	5f 4f       	sbci	r21, 0xFF	; 255
    120e:	fe 01       	movw	r30, r28
    1210:	e4 0f       	add	r30, r20
    1212:	f5 1f       	adc	r31, r21
    1214:	00 81       	ld	r16, Z
    1216:	11 81       	ldd	r17, Z+1	; 0x01
    1218:	22 81       	ldd	r18, Z+2	; 0x02
    121a:	33 81       	ldd	r19, Z+3	; 0x03
    121c:	00 27       	eor	r16, r16
    121e:	11 27       	eor	r17, r17
    1220:	22 27       	eor	r18, r18
    1222:	30 7f       	andi	r19, 0xF0	; 240
    1224:	c0 2a       	or	r12, r16
    1226:	d1 2a       	or	r13, r17
    1228:	e2 2a       	or	r14, r18
    122a:	f3 2a       	or	r15, r19
    122c:	c0 82       	st	Z, r12
    122e:	d1 82       	std	Z+1, r13	; 0x01
    1230:	e2 82       	std	Z+2, r14	; 0x02
    1232:	f3 82       	std	Z+3, r15	; 0x03
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	8c 83       	std	Y+4, r24	; 0x04
    1238:	27 c0       	rjmp	.+78     	; 0x1288 <put_fat+0x22e>
    123a:	68 94       	set
    123c:	99 24       	eor	r9, r9
    123e:	91 f8       	bld	r9, 1
    1240:	23 c0       	rjmp	.+70     	; 0x1288 <put_fat+0x22e>
    1242:	68 94       	set
    1244:	99 24       	eor	r9, r9
    1246:	91 f8       	bld	r9, 1
    1248:	1f c0       	rjmp	.+62     	; 0x1288 <put_fat+0x22e>
    124a:	68 94       	set
    124c:	99 24       	eor	r9, r9
    124e:	91 f8       	bld	r9, 1
    1250:	1b c0       	rjmp	.+54     	; 0x1288 <put_fat+0x22e>
    1252:	98 2e       	mov	r9, r24
    1254:	19 c0       	rjmp	.+50     	; 0x1288 <put_fat+0x22e>
    1256:	98 2e       	mov	r9, r24
    1258:	17 c0       	rjmp	.+46     	; 0x1288 <put_fat+0x22e>
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	b8 22       	and	r11, r24
    125e:	68 94       	set
    1260:	13 f8       	bld	r1, 3
    1262:	f6 94       	lsr	r15
    1264:	e7 94       	ror	r14
    1266:	d7 94       	ror	r13
    1268:	c7 94       	ror	r12
    126a:	16 94       	lsr	r1
    126c:	d1 f7       	brne	.-12     	; 0x1262 <put_fat+0x208>
    126e:	7c cf       	rjmp	.-264    	; 0x1168 <put_fat+0x10e>
    1270:	e1 e0       	ldi	r30, 0x01	; 1
    1272:	be 22       	and	r11, r30
    1274:	fe 01       	movw	r30, r28
    1276:	ea 0d       	add	r30, r10
    1278:	fb 1d       	adc	r31, r11
    127a:	96 a5       	ldd	r25, Z+46	; 0x2e
    127c:	90 7f       	andi	r25, 0xF0	; 240
    127e:	8d 2d       	mov	r24, r13
    1280:	8f 70       	andi	r24, 0x0F	; 15
    1282:	c9 2e       	mov	r12, r25
    1284:	c8 2a       	or	r12, r24
    1286:	70 cf       	rjmp	.-288    	; 0x1168 <put_fat+0x10e>
    1288:	89 2d       	mov	r24, r9
    128a:	df 91       	pop	r29
    128c:	cf 91       	pop	r28
    128e:	1f 91       	pop	r17
    1290:	0f 91       	pop	r16
    1292:	ff 90       	pop	r15
    1294:	ef 90       	pop	r14
    1296:	df 90       	pop	r13
    1298:	cf 90       	pop	r12
    129a:	bf 90       	pop	r11
    129c:	af 90       	pop	r10
    129e:	9f 90       	pop	r9
    12a0:	7f 90       	pop	r7
    12a2:	6f 90       	pop	r6
    12a4:	5f 90       	pop	r5
    12a6:	4f 90       	pop	r4
    12a8:	08 95       	ret

000012aa <create_chain>:
    12aa:	4f 92       	push	r4
    12ac:	5f 92       	push	r5
    12ae:	6f 92       	push	r6
    12b0:	7f 92       	push	r7
    12b2:	8f 92       	push	r8
    12b4:	9f 92       	push	r9
    12b6:	af 92       	push	r10
    12b8:	bf 92       	push	r11
    12ba:	cf 92       	push	r12
    12bc:	df 92       	push	r13
    12be:	ef 92       	push	r14
    12c0:	ff 92       	push	r15
    12c2:	0f 93       	push	r16
    12c4:	1f 93       	push	r17
    12c6:	cf 93       	push	r28
    12c8:	df 93       	push	r29
    12ca:	ec 01       	movw	r28, r24
    12cc:	2a 01       	movw	r4, r20
    12ce:	3b 01       	movw	r6, r22
    12d0:	41 15       	cp	r20, r1
    12d2:	51 05       	cpc	r21, r1
    12d4:	61 05       	cpc	r22, r1
    12d6:	71 05       	cpc	r23, r1
    12d8:	b9 f4       	brne	.+46     	; 0x1308 <create_chain+0x5e>
    12da:	8a 84       	ldd	r8, Y+10	; 0x0a
    12dc:	9b 84       	ldd	r9, Y+11	; 0x0b
    12de:	ac 84       	ldd	r10, Y+12	; 0x0c
    12e0:	bd 84       	ldd	r11, Y+13	; 0x0d
    12e2:	81 14       	cp	r8, r1
    12e4:	91 04       	cpc	r9, r1
    12e6:	a1 04       	cpc	r10, r1
    12e8:	b1 04       	cpc	r11, r1
    12ea:	61 f1       	breq	.+88     	; 0x1344 <create_chain+0x9a>
    12ec:	8a 89       	ldd	r24, Y+18	; 0x12
    12ee:	9b 89       	ldd	r25, Y+19	; 0x13
    12f0:	ac 89       	ldd	r26, Y+20	; 0x14
    12f2:	bd 89       	ldd	r27, Y+21	; 0x15
    12f4:	88 16       	cp	r8, r24
    12f6:	99 06       	cpc	r9, r25
    12f8:	aa 06       	cpc	r10, r26
    12fa:	bb 06       	cpc	r11, r27
    12fc:	38 f1       	brcs	.+78     	; 0x134c <create_chain+0xa2>
    12fe:	81 2c       	mov	r8, r1
    1300:	91 2c       	mov	r9, r1
    1302:	54 01       	movw	r10, r8
    1304:	83 94       	inc	r8
    1306:	22 c0       	rjmp	.+68     	; 0x134c <create_chain+0xa2>
    1308:	0e 94 8a 06 	call	0xd14	; 0xd14 <get_fat>
    130c:	6b 01       	movw	r12, r22
    130e:	7c 01       	movw	r14, r24
    1310:	62 30       	cpi	r22, 0x02	; 2
    1312:	71 05       	cpc	r23, r1
    1314:	81 05       	cpc	r24, r1
    1316:	91 05       	cpc	r25, r1
    1318:	08 f4       	brcc	.+2      	; 0x131c <create_chain+0x72>
    131a:	8e c0       	rjmp	.+284    	; 0x1438 <create_chain+0x18e>
    131c:	8f ef       	ldi	r24, 0xFF	; 255
    131e:	c8 16       	cp	r12, r24
    1320:	d8 06       	cpc	r13, r24
    1322:	e8 06       	cpc	r14, r24
    1324:	f8 06       	cpc	r15, r24
    1326:	09 f4       	brne	.+2      	; 0x132a <create_chain+0x80>
    1328:	8c c0       	rjmp	.+280    	; 0x1442 <create_chain+0x198>
    132a:	8a 89       	ldd	r24, Y+18	; 0x12
    132c:	9b 89       	ldd	r25, Y+19	; 0x13
    132e:	ac 89       	ldd	r26, Y+20	; 0x14
    1330:	bd 89       	ldd	r27, Y+21	; 0x15
    1332:	c8 16       	cp	r12, r24
    1334:	d9 06       	cpc	r13, r25
    1336:	ea 06       	cpc	r14, r26
    1338:	fb 06       	cpc	r15, r27
    133a:	08 f4       	brcc	.+2      	; 0x133e <create_chain+0x94>
    133c:	87 c0       	rjmp	.+270    	; 0x144c <create_chain+0x1a2>
    133e:	53 01       	movw	r10, r6
    1340:	42 01       	movw	r8, r4
    1342:	04 c0       	rjmp	.+8      	; 0x134c <create_chain+0xa2>
    1344:	81 2c       	mov	r8, r1
    1346:	91 2c       	mov	r9, r1
    1348:	54 01       	movw	r10, r8
    134a:	83 94       	inc	r8
    134c:	75 01       	movw	r14, r10
    134e:	64 01       	movw	r12, r8
    1350:	2f ef       	ldi	r18, 0xFF	; 255
    1352:	c2 1a       	sub	r12, r18
    1354:	d2 0a       	sbc	r13, r18
    1356:	e2 0a       	sbc	r14, r18
    1358:	f2 0a       	sbc	r15, r18
    135a:	8a 89       	ldd	r24, Y+18	; 0x12
    135c:	9b 89       	ldd	r25, Y+19	; 0x13
    135e:	ac 89       	ldd	r26, Y+20	; 0x14
    1360:	bd 89       	ldd	r27, Y+21	; 0x15
    1362:	c8 16       	cp	r12, r24
    1364:	d9 06       	cpc	r13, r25
    1366:	ea 06       	cpc	r14, r26
    1368:	fb 06       	cpc	r15, r27
    136a:	60 f0       	brcs	.+24     	; 0x1384 <create_chain+0xda>
    136c:	82 e0       	ldi	r24, 0x02	; 2
    136e:	88 16       	cp	r8, r24
    1370:	91 04       	cpc	r9, r1
    1372:	a1 04       	cpc	r10, r1
    1374:	b1 04       	cpc	r11, r1
    1376:	08 f4       	brcc	.+2      	; 0x137a <create_chain+0xd0>
    1378:	6e c0       	rjmp	.+220    	; 0x1456 <create_chain+0x1ac>
    137a:	c1 2c       	mov	r12, r1
    137c:	d1 2c       	mov	r13, r1
    137e:	76 01       	movw	r14, r12
    1380:	68 94       	set
    1382:	c1 f8       	bld	r12, 1
    1384:	b7 01       	movw	r22, r14
    1386:	a6 01       	movw	r20, r12
    1388:	ce 01       	movw	r24, r28
    138a:	0e 94 8a 06 	call	0xd14	; 0xd14 <get_fat>
    138e:	61 15       	cp	r22, r1
    1390:	71 05       	cpc	r23, r1
    1392:	81 05       	cpc	r24, r1
    1394:	91 05       	cpc	r25, r1
    1396:	99 f0       	breq	.+38     	; 0x13be <create_chain+0x114>
    1398:	6f 3f       	cpi	r22, 0xFF	; 255
    139a:	2f ef       	ldi	r18, 0xFF	; 255
    139c:	72 07       	cpc	r23, r18
    139e:	82 07       	cpc	r24, r18
    13a0:	92 07       	cpc	r25, r18
    13a2:	09 f4       	brne	.+2      	; 0x13a6 <create_chain+0xfc>
    13a4:	5d c0       	rjmp	.+186    	; 0x1460 <create_chain+0x1b6>
    13a6:	61 30       	cpi	r22, 0x01	; 1
    13a8:	71 05       	cpc	r23, r1
    13aa:	81 05       	cpc	r24, r1
    13ac:	91 05       	cpc	r25, r1
    13ae:	09 f4       	brne	.+2      	; 0x13b2 <create_chain+0x108>
    13b0:	5c c0       	rjmp	.+184    	; 0x146a <create_chain+0x1c0>
    13b2:	c8 14       	cp	r12, r8
    13b4:	d9 04       	cpc	r13, r9
    13b6:	ea 04       	cpc	r14, r10
    13b8:	fb 04       	cpc	r15, r11
    13ba:	51 f6       	brne	.-108    	; 0x1350 <create_chain+0xa6>
    13bc:	5b c0       	rjmp	.+182    	; 0x1474 <create_chain+0x1ca>
    13be:	0f ef       	ldi	r16, 0xFF	; 255
    13c0:	1f ef       	ldi	r17, 0xFF	; 255
    13c2:	2f ef       	ldi	r18, 0xFF	; 255
    13c4:	3f e0       	ldi	r19, 0x0F	; 15
    13c6:	b7 01       	movw	r22, r14
    13c8:	a6 01       	movw	r20, r12
    13ca:	ce 01       	movw	r24, r28
    13cc:	0e 94 2d 08 	call	0x105a	; 0x105a <put_fat>
    13d0:	81 11       	cpse	r24, r1
    13d2:	2b c0       	rjmp	.+86     	; 0x142a <create_chain+0x180>
    13d4:	41 14       	cp	r4, r1
    13d6:	51 04       	cpc	r5, r1
    13d8:	61 04       	cpc	r6, r1
    13da:	71 04       	cpc	r7, r1
    13dc:	49 f0       	breq	.+18     	; 0x13f0 <create_chain+0x146>
    13de:	97 01       	movw	r18, r14
    13e0:	86 01       	movw	r16, r12
    13e2:	b3 01       	movw	r22, r6
    13e4:	a2 01       	movw	r20, r4
    13e6:	ce 01       	movw	r24, r28
    13e8:	0e 94 2d 08 	call	0x105a	; 0x105a <put_fat>
    13ec:	81 11       	cpse	r24, r1
    13ee:	1d c0       	rjmp	.+58     	; 0x142a <create_chain+0x180>
    13f0:	ca 86       	std	Y+10, r12	; 0x0a
    13f2:	db 86       	std	Y+11, r13	; 0x0b
    13f4:	ec 86       	std	Y+12, r14	; 0x0c
    13f6:	fd 86       	std	Y+13, r15	; 0x0d
    13f8:	8e 85       	ldd	r24, Y+14	; 0x0e
    13fa:	9f 85       	ldd	r25, Y+15	; 0x0f
    13fc:	a8 89       	ldd	r26, Y+16	; 0x10
    13fe:	b9 89       	ldd	r27, Y+17	; 0x11
    1400:	8f 3f       	cpi	r24, 0xFF	; 255
    1402:	2f ef       	ldi	r18, 0xFF	; 255
    1404:	92 07       	cpc	r25, r18
    1406:	a2 07       	cpc	r26, r18
    1408:	b2 07       	cpc	r27, r18
    140a:	c9 f1       	breq	.+114    	; 0x147e <create_chain+0x1d4>
    140c:	01 97       	sbiw	r24, 0x01	; 1
    140e:	a1 09       	sbc	r26, r1
    1410:	b1 09       	sbc	r27, r1
    1412:	8e 87       	std	Y+14, r24	; 0x0e
    1414:	9f 87       	std	Y+15, r25	; 0x0f
    1416:	a8 8b       	std	Y+16, r26	; 0x10
    1418:	b9 8b       	std	Y+17, r27	; 0x11
    141a:	8d 81       	ldd	r24, Y+5	; 0x05
    141c:	81 60       	ori	r24, 0x01	; 1
    141e:	8d 83       	std	Y+5, r24	; 0x05
    1420:	6c 2d       	mov	r22, r12
    1422:	7d 2d       	mov	r23, r13
    1424:	8e 2d       	mov	r24, r14
    1426:	9f 2d       	mov	r25, r15
    1428:	33 c0       	rjmp	.+102    	; 0x1490 <create_chain+0x1e6>
    142a:	81 30       	cpi	r24, 0x01	; 1
    142c:	69 f1       	breq	.+90     	; 0x1488 <create_chain+0x1de>
    142e:	61 e0       	ldi	r22, 0x01	; 1
    1430:	70 e0       	ldi	r23, 0x00	; 0
    1432:	80 e0       	ldi	r24, 0x00	; 0
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	2c c0       	rjmp	.+88     	; 0x1490 <create_chain+0x1e6>
    1438:	61 e0       	ldi	r22, 0x01	; 1
    143a:	70 e0       	ldi	r23, 0x00	; 0
    143c:	80 e0       	ldi	r24, 0x00	; 0
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	27 c0       	rjmp	.+78     	; 0x1490 <create_chain+0x1e6>
    1442:	6f ef       	ldi	r22, 0xFF	; 255
    1444:	7f ef       	ldi	r23, 0xFF	; 255
    1446:	8f ef       	ldi	r24, 0xFF	; 255
    1448:	9f ef       	ldi	r25, 0xFF	; 255
    144a:	22 c0       	rjmp	.+68     	; 0x1490 <create_chain+0x1e6>
    144c:	6c 2d       	mov	r22, r12
    144e:	7d 2d       	mov	r23, r13
    1450:	8e 2d       	mov	r24, r14
    1452:	9f 2d       	mov	r25, r15
    1454:	1d c0       	rjmp	.+58     	; 0x1490 <create_chain+0x1e6>
    1456:	60 e0       	ldi	r22, 0x00	; 0
    1458:	70 e0       	ldi	r23, 0x00	; 0
    145a:	80 e0       	ldi	r24, 0x00	; 0
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	18 c0       	rjmp	.+48     	; 0x1490 <create_chain+0x1e6>
    1460:	6f ef       	ldi	r22, 0xFF	; 255
    1462:	7f ef       	ldi	r23, 0xFF	; 255
    1464:	8f ef       	ldi	r24, 0xFF	; 255
    1466:	9f ef       	ldi	r25, 0xFF	; 255
    1468:	13 c0       	rjmp	.+38     	; 0x1490 <create_chain+0x1e6>
    146a:	61 e0       	ldi	r22, 0x01	; 1
    146c:	70 e0       	ldi	r23, 0x00	; 0
    146e:	80 e0       	ldi	r24, 0x00	; 0
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	0e c0       	rjmp	.+28     	; 0x1490 <create_chain+0x1e6>
    1474:	60 e0       	ldi	r22, 0x00	; 0
    1476:	70 e0       	ldi	r23, 0x00	; 0
    1478:	80 e0       	ldi	r24, 0x00	; 0
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	09 c0       	rjmp	.+18     	; 0x1490 <create_chain+0x1e6>
    147e:	6c 2d       	mov	r22, r12
    1480:	7d 2d       	mov	r23, r13
    1482:	8e 2d       	mov	r24, r14
    1484:	9f 2d       	mov	r25, r15
    1486:	04 c0       	rjmp	.+8      	; 0x1490 <create_chain+0x1e6>
    1488:	6f ef       	ldi	r22, 0xFF	; 255
    148a:	7f ef       	ldi	r23, 0xFF	; 255
    148c:	8f ef       	ldi	r24, 0xFF	; 255
    148e:	9f ef       	ldi	r25, 0xFF	; 255
    1490:	df 91       	pop	r29
    1492:	cf 91       	pop	r28
    1494:	1f 91       	pop	r17
    1496:	0f 91       	pop	r16
    1498:	ff 90       	pop	r15
    149a:	ef 90       	pop	r14
    149c:	df 90       	pop	r13
    149e:	cf 90       	pop	r12
    14a0:	bf 90       	pop	r11
    14a2:	af 90       	pop	r10
    14a4:	9f 90       	pop	r9
    14a6:	8f 90       	pop	r8
    14a8:	7f 90       	pop	r7
    14aa:	6f 90       	pop	r6
    14ac:	5f 90       	pop	r5
    14ae:	4f 90       	pop	r4
    14b0:	08 95       	ret

000014b2 <dir_next>:
    14b2:	7f 92       	push	r7
    14b4:	8f 92       	push	r8
    14b6:	9f 92       	push	r9
    14b8:	af 92       	push	r10
    14ba:	bf 92       	push	r11
    14bc:	cf 92       	push	r12
    14be:	df 92       	push	r13
    14c0:	ef 92       	push	r14
    14c2:	ff 92       	push	r15
    14c4:	0f 93       	push	r16
    14c6:	1f 93       	push	r17
    14c8:	cf 93       	push	r28
    14ca:	df 93       	push	r29
    14cc:	dc 01       	movw	r26, r24
    14ce:	14 96       	adiw	r26, 0x04	; 4
    14d0:	cd 91       	ld	r28, X+
    14d2:	dc 91       	ld	r29, X
    14d4:	15 97       	sbiw	r26, 0x05	; 5
    14d6:	21 96       	adiw	r28, 0x01	; 1
    14d8:	09 f4       	brne	.+2      	; 0x14dc <dir_next+0x2a>
    14da:	01 c1       	rjmp	.+514    	; 0x16de <dir_next+0x22c>
    14dc:	1e 96       	adiw	r26, 0x0e	; 14
    14de:	8d 90       	ld	r8, X+
    14e0:	9d 90       	ld	r9, X+
    14e2:	ad 90       	ld	r10, X+
    14e4:	bc 90       	ld	r11, X
    14e6:	51 97       	sbiw	r26, 0x11	; 17
    14e8:	81 14       	cp	r8, r1
    14ea:	91 04       	cpc	r9, r1
    14ec:	a1 04       	cpc	r10, r1
    14ee:	b1 04       	cpc	r11, r1
    14f0:	09 f4       	brne	.+2      	; 0x14f4 <dir_next+0x42>
    14f2:	f7 c0       	rjmp	.+494    	; 0x16e2 <dir_next+0x230>
    14f4:	7b 01       	movw	r14, r22
    14f6:	8c 01       	movw	r16, r24
    14f8:	6e 01       	movw	r12, r28
    14fa:	bf e0       	ldi	r27, 0x0F	; 15
    14fc:	cb 22       	and	r12, r27
    14fe:	dd 24       	eor	r13, r13
    1500:	c1 14       	cp	r12, r1
    1502:	d1 04       	cpc	r13, r1
    1504:	09 f0       	breq	.+2      	; 0x1508 <dir_next+0x56>
    1506:	d5 c0       	rjmp	.+426    	; 0x16b2 <dir_next+0x200>
    1508:	ef ef       	ldi	r30, 0xFF	; 255
    150a:	8e 1a       	sub	r8, r30
    150c:	9e 0a       	sbc	r9, r30
    150e:	ae 0a       	sbc	r10, r30
    1510:	be 0a       	sbc	r11, r30
    1512:	dc 01       	movw	r26, r24
    1514:	1e 96       	adiw	r26, 0x0e	; 14
    1516:	8d 92       	st	X+, r8
    1518:	9d 92       	st	X+, r9
    151a:	ad 92       	st	X+, r10
    151c:	bc 92       	st	X, r11
    151e:	51 97       	sbiw	r26, 0x11	; 17
    1520:	1a 96       	adiw	r26, 0x0a	; 10
    1522:	4d 91       	ld	r20, X+
    1524:	5d 91       	ld	r21, X+
    1526:	6d 91       	ld	r22, X+
    1528:	7c 91       	ld	r23, X
    152a:	1d 97       	sbiw	r26, 0x0d	; 13
    152c:	41 15       	cp	r20, r1
    152e:	51 05       	cpc	r21, r1
    1530:	61 05       	cpc	r22, r1
    1532:	71 05       	cpc	r23, r1
    1534:	49 f4       	brne	.+18     	; 0x1548 <dir_next+0x96>
    1536:	ed 91       	ld	r30, X+
    1538:	fc 91       	ld	r31, X
    153a:	80 85       	ldd	r24, Z+8	; 0x08
    153c:	91 85       	ldd	r25, Z+9	; 0x09
    153e:	c8 17       	cp	r28, r24
    1540:	d9 07       	cpc	r29, r25
    1542:	08 f0       	brcs	.+2      	; 0x1546 <dir_next+0x94>
    1544:	d0 c0       	rjmp	.+416    	; 0x16e6 <dir_next+0x234>
    1546:	b5 c0       	rjmp	.+362    	; 0x16b2 <dir_next+0x200>
    1548:	dc 01       	movw	r26, r24
    154a:	ed 91       	ld	r30, X+
    154c:	fc 91       	ld	r31, X
    154e:	22 81       	ldd	r18, Z+2	; 0x02
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	21 50       	subi	r18, 0x01	; 1
    1554:	31 09       	sbc	r19, r1
    1556:	ce 01       	movw	r24, r28
    1558:	92 95       	swap	r25
    155a:	82 95       	swap	r24
    155c:	8f 70       	andi	r24, 0x0F	; 15
    155e:	89 27       	eor	r24, r25
    1560:	9f 70       	andi	r25, 0x0F	; 15
    1562:	89 27       	eor	r24, r25
    1564:	28 23       	and	r18, r24
    1566:	39 23       	and	r19, r25
    1568:	23 2b       	or	r18, r19
    156a:	09 f0       	breq	.+2      	; 0x156e <dir_next+0xbc>
    156c:	a2 c0       	rjmp	.+324    	; 0x16b2 <dir_next+0x200>
    156e:	cf 01       	movw	r24, r30
    1570:	0e 94 8a 06 	call	0xd14	; 0xd14 <get_fat>
    1574:	4b 01       	movw	r8, r22
    1576:	5c 01       	movw	r10, r24
    1578:	62 30       	cpi	r22, 0x02	; 2
    157a:	71 05       	cpc	r23, r1
    157c:	81 05       	cpc	r24, r1
    157e:	91 05       	cpc	r25, r1
    1580:	08 f4       	brcc	.+2      	; 0x1584 <dir_next+0xd2>
    1582:	b3 c0       	rjmp	.+358    	; 0x16ea <dir_next+0x238>
    1584:	6f 3f       	cpi	r22, 0xFF	; 255
    1586:	7f 4f       	sbci	r23, 0xFF	; 255
    1588:	8f 4f       	sbci	r24, 0xFF	; 255
    158a:	9f 4f       	sbci	r25, 0xFF	; 255
    158c:	09 f4       	brne	.+2      	; 0x1590 <dir_next+0xde>
    158e:	af c0       	rjmp	.+350    	; 0x16ee <dir_next+0x23c>
    1590:	d8 01       	movw	r26, r16
    1592:	ed 91       	ld	r30, X+
    1594:	fc 91       	ld	r31, X
    1596:	82 89       	ldd	r24, Z+18	; 0x12
    1598:	93 89       	ldd	r25, Z+19	; 0x13
    159a:	a4 89       	ldd	r26, Z+20	; 0x14
    159c:	b5 89       	ldd	r27, Z+21	; 0x15
    159e:	88 16       	cp	r8, r24
    15a0:	99 06       	cpc	r9, r25
    15a2:	aa 06       	cpc	r10, r26
    15a4:	bb 06       	cpc	r11, r27
    15a6:	08 f4       	brcc	.+2      	; 0x15aa <dir_next+0xf8>
    15a8:	72 c0       	rjmp	.+228    	; 0x168e <dir_next+0x1dc>
    15aa:	ef 28       	or	r14, r15
    15ac:	09 f4       	brne	.+2      	; 0x15b0 <dir_next+0xfe>
    15ae:	a1 c0       	rjmp	.+322    	; 0x16f2 <dir_next+0x240>
    15b0:	d8 01       	movw	r26, r16
    15b2:	1a 96       	adiw	r26, 0x0a	; 10
    15b4:	4d 91       	ld	r20, X+
    15b6:	5d 91       	ld	r21, X+
    15b8:	6d 91       	ld	r22, X+
    15ba:	7c 91       	ld	r23, X
    15bc:	1d 97       	sbiw	r26, 0x0d	; 13
    15be:	cf 01       	movw	r24, r30
    15c0:	0e 94 55 09 	call	0x12aa	; 0x12aa <create_chain>
    15c4:	4b 01       	movw	r8, r22
    15c6:	5c 01       	movw	r10, r24
    15c8:	61 15       	cp	r22, r1
    15ca:	71 05       	cpc	r23, r1
    15cc:	81 05       	cpc	r24, r1
    15ce:	91 05       	cpc	r25, r1
    15d0:	09 f4       	brne	.+2      	; 0x15d4 <dir_next+0x122>
    15d2:	91 c0       	rjmp	.+290    	; 0x16f6 <dir_next+0x244>
    15d4:	61 30       	cpi	r22, 0x01	; 1
    15d6:	71 05       	cpc	r23, r1
    15d8:	81 05       	cpc	r24, r1
    15da:	91 05       	cpc	r25, r1
    15dc:	09 f4       	brne	.+2      	; 0x15e0 <dir_next+0x12e>
    15de:	8d c0       	rjmp	.+282    	; 0x16fa <dir_next+0x248>
    15e0:	6f 3f       	cpi	r22, 0xFF	; 255
    15e2:	7f 4f       	sbci	r23, 0xFF	; 255
    15e4:	8f 4f       	sbci	r24, 0xFF	; 255
    15e6:	9f 4f       	sbci	r25, 0xFF	; 255
    15e8:	09 f4       	brne	.+2      	; 0x15ec <dir_next+0x13a>
    15ea:	89 c0       	rjmp	.+274    	; 0x16fe <dir_next+0x24c>
    15ec:	d8 01       	movw	r26, r16
    15ee:	8d 91       	ld	r24, X+
    15f0:	9c 91       	ld	r25, X
    15f2:	0e 94 6d 02 	call	0x4da	; 0x4da <sync_window>
    15f6:	81 11       	cpse	r24, r1
    15f8:	84 c0       	rjmp	.+264    	; 0x1702 <dir_next+0x250>
    15fa:	f8 01       	movw	r30, r16
    15fc:	80 81       	ld	r24, Z
    15fe:	91 81       	ldd	r25, Z+1	; 0x01
    1600:	fc 01       	movw	r30, r24
    1602:	be 96       	adiw	r30, 0x2e	; 46
    1604:	82 5d       	subi	r24, 0xD2	; 210
    1606:	9d 4f       	sbci	r25, 0xFD	; 253
    1608:	11 92       	st	Z+, r1
    160a:	e8 17       	cp	r30, r24
    160c:	f9 07       	cpc	r31, r25
    160e:	e1 f7       	brne	.-8      	; 0x1608 <dir_next+0x156>
    1610:	d8 01       	movw	r26, r16
    1612:	ed 90       	ld	r14, X+
    1614:	fc 90       	ld	r15, X
    1616:	b5 01       	movw	r22, r10
    1618:	a4 01       	movw	r20, r8
    161a:	c7 01       	movw	r24, r14
    161c:	0e 94 62 06 	call	0xcc4	; 0xcc4 <clust2sect>
    1620:	f7 01       	movw	r30, r14
    1622:	62 a7       	std	Z+42, r22	; 0x2a
    1624:	73 a7       	std	Z+43, r23	; 0x2b
    1626:	84 a7       	std	Z+44, r24	; 0x2c
    1628:	95 a7       	std	Z+45, r25	; 0x2d
    162a:	e1 2c       	mov	r14, r1
    162c:	f1 2c       	mov	r15, r1
    162e:	77 24       	eor	r7, r7
    1630:	73 94       	inc	r7
    1632:	19 c0       	rjmp	.+50     	; 0x1666 <dir_next+0x1b4>
    1634:	74 82       	std	Z+4, r7	; 0x04
    1636:	d8 01       	movw	r26, r16
    1638:	8d 91       	ld	r24, X+
    163a:	9c 91       	ld	r25, X
    163c:	0e 94 6d 02 	call	0x4da	; 0x4da <sync_window>
    1640:	81 11       	cpse	r24, r1
    1642:	61 c0       	rjmp	.+194    	; 0x1706 <dir_next+0x254>
    1644:	d8 01       	movw	r26, r16
    1646:	ed 91       	ld	r30, X+
    1648:	fc 91       	ld	r31, X
    164a:	82 a5       	ldd	r24, Z+42	; 0x2a
    164c:	93 a5       	ldd	r25, Z+43	; 0x2b
    164e:	a4 a5       	ldd	r26, Z+44	; 0x2c
    1650:	b5 a5       	ldd	r27, Z+45	; 0x2d
    1652:	01 96       	adiw	r24, 0x01	; 1
    1654:	a1 1d       	adc	r26, r1
    1656:	b1 1d       	adc	r27, r1
    1658:	82 a7       	std	Z+42, r24	; 0x2a
    165a:	93 a7       	std	Z+43, r25	; 0x2b
    165c:	a4 a7       	std	Z+44, r26	; 0x2c
    165e:	b5 a7       	std	Z+45, r27	; 0x2d
    1660:	bf ef       	ldi	r27, 0xFF	; 255
    1662:	eb 1a       	sub	r14, r27
    1664:	fb 0a       	sbc	r15, r27
    1666:	d8 01       	movw	r26, r16
    1668:	ed 91       	ld	r30, X+
    166a:	fc 91       	ld	r31, X
    166c:	82 81       	ldd	r24, Z+2	; 0x02
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	e8 16       	cp	r14, r24
    1672:	f9 06       	cpc	r15, r25
    1674:	f8 f2       	brcs	.-66     	; 0x1634 <dir_next+0x182>
    1676:	82 a5       	ldd	r24, Z+42	; 0x2a
    1678:	93 a5       	ldd	r25, Z+43	; 0x2b
    167a:	a4 a5       	ldd	r26, Z+44	; 0x2c
    167c:	b5 a5       	ldd	r27, Z+45	; 0x2d
    167e:	8e 19       	sub	r24, r14
    1680:	9f 09       	sbc	r25, r15
    1682:	a1 09       	sbc	r26, r1
    1684:	b1 09       	sbc	r27, r1
    1686:	82 a7       	std	Z+42, r24	; 0x2a
    1688:	93 a7       	std	Z+43, r25	; 0x2b
    168a:	a4 a7       	std	Z+44, r26	; 0x2c
    168c:	b5 a7       	std	Z+45, r27	; 0x2d
    168e:	f8 01       	movw	r30, r16
    1690:	82 86       	std	Z+10, r8	; 0x0a
    1692:	93 86       	std	Z+11, r9	; 0x0b
    1694:	a4 86       	std	Z+12, r10	; 0x0c
    1696:	b5 86       	std	Z+13, r11	; 0x0d
    1698:	b5 01       	movw	r22, r10
    169a:	a4 01       	movw	r20, r8
    169c:	80 81       	ld	r24, Z
    169e:	91 81       	ldd	r25, Z+1	; 0x01
    16a0:	0e 94 62 06 	call	0xcc4	; 0xcc4 <clust2sect>
    16a4:	d8 01       	movw	r26, r16
    16a6:	1e 96       	adiw	r26, 0x0e	; 14
    16a8:	6d 93       	st	X+, r22
    16aa:	7d 93       	st	X+, r23
    16ac:	8d 93       	st	X+, r24
    16ae:	9c 93       	st	X, r25
    16b0:	51 97       	sbiw	r26, 0x11	; 17
    16b2:	f8 01       	movw	r30, r16
    16b4:	d5 83       	std	Z+5, r29	; 0x05
    16b6:	c4 83       	std	Z+4, r28	; 0x04
    16b8:	80 81       	ld	r24, Z
    16ba:	91 81       	ldd	r25, Z+1	; 0x01
    16bc:	8e 96       	adiw	r24, 0x2e	; 46
    16be:	cc 0c       	add	r12, r12
    16c0:	dd 1c       	adc	r13, r13
    16c2:	cc 0c       	add	r12, r12
    16c4:	dd 1c       	adc	r13, r13
    16c6:	cc 0c       	add	r12, r12
    16c8:	dd 1c       	adc	r13, r13
    16ca:	cc 0c       	add	r12, r12
    16cc:	dd 1c       	adc	r13, r13
    16ce:	cc 0c       	add	r12, r12
    16d0:	dd 1c       	adc	r13, r13
    16d2:	c8 0e       	add	r12, r24
    16d4:	d9 1e       	adc	r13, r25
    16d6:	d3 8a       	std	Z+19, r13	; 0x13
    16d8:	c2 8a       	std	Z+18, r12	; 0x12
    16da:	80 e0       	ldi	r24, 0x00	; 0
    16dc:	15 c0       	rjmp	.+42     	; 0x1708 <dir_next+0x256>
    16de:	84 e0       	ldi	r24, 0x04	; 4
    16e0:	13 c0       	rjmp	.+38     	; 0x1708 <dir_next+0x256>
    16e2:	84 e0       	ldi	r24, 0x04	; 4
    16e4:	11 c0       	rjmp	.+34     	; 0x1708 <dir_next+0x256>
    16e6:	84 e0       	ldi	r24, 0x04	; 4
    16e8:	0f c0       	rjmp	.+30     	; 0x1708 <dir_next+0x256>
    16ea:	82 e0       	ldi	r24, 0x02	; 2
    16ec:	0d c0       	rjmp	.+26     	; 0x1708 <dir_next+0x256>
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	0b c0       	rjmp	.+22     	; 0x1708 <dir_next+0x256>
    16f2:	84 e0       	ldi	r24, 0x04	; 4
    16f4:	09 c0       	rjmp	.+18     	; 0x1708 <dir_next+0x256>
    16f6:	87 e0       	ldi	r24, 0x07	; 7
    16f8:	07 c0       	rjmp	.+14     	; 0x1708 <dir_next+0x256>
    16fa:	82 e0       	ldi	r24, 0x02	; 2
    16fc:	05 c0       	rjmp	.+10     	; 0x1708 <dir_next+0x256>
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	03 c0       	rjmp	.+6      	; 0x1708 <dir_next+0x256>
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	01 c0       	rjmp	.+2      	; 0x1708 <dir_next+0x256>
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	df 91       	pop	r29
    170a:	cf 91       	pop	r28
    170c:	1f 91       	pop	r17
    170e:	0f 91       	pop	r16
    1710:	ff 90       	pop	r15
    1712:	ef 90       	pop	r14
    1714:	df 90       	pop	r13
    1716:	cf 90       	pop	r12
    1718:	bf 90       	pop	r11
    171a:	af 90       	pop	r10
    171c:	9f 90       	pop	r9
    171e:	8f 90       	pop	r8
    1720:	7f 90       	pop	r7
    1722:	08 95       	ret

00001724 <f_mount>:
    1724:	1f 93       	push	r17
    1726:	cf 93       	push	r28
    1728:	df 93       	push	r29
    172a:	00 d0       	rcall	.+0      	; 0x172c <f_mount+0x8>
    172c:	00 d0       	rcall	.+0      	; 0x172e <f_mount+0xa>
    172e:	00 d0       	rcall	.+0      	; 0x1730 <f_mount+0xc>
    1730:	cd b7       	in	r28, 0x3d	; 61
    1732:	de b7       	in	r29, 0x3e	; 62
    1734:	9c 83       	std	Y+4, r25	; 0x04
    1736:	8b 83       	std	Y+3, r24	; 0x03
    1738:	7e 83       	std	Y+6, r23	; 0x06
    173a:	6d 83       	std	Y+5, r22	; 0x05
    173c:	14 2f       	mov	r17, r20
    173e:	7a 83       	std	Y+2, r23	; 0x02
    1740:	69 83       	std	Y+1, r22	; 0x01
    1742:	ce 01       	movw	r24, r28
    1744:	01 96       	adiw	r24, 0x01	; 1
    1746:	0e 94 33 02 	call	0x466	; 0x466 <get_ldnumber>
    174a:	99 23       	and	r25, r25
    174c:	34 f1       	brlt	.+76     	; 0x179a <f_mount+0x76>
    174e:	fc 01       	movw	r30, r24
    1750:	ee 0f       	add	r30, r30
    1752:	ff 1f       	adc	r31, r31
    1754:	ee 59       	subi	r30, 0x9E	; 158
    1756:	fc 4f       	sbci	r31, 0xFC	; 252
    1758:	01 90       	ld	r0, Z+
    175a:	f0 81       	ld	r31, Z
    175c:	e0 2d       	mov	r30, r0
    175e:	30 97       	sbiw	r30, 0x00	; 0
    1760:	09 f0       	breq	.+2      	; 0x1764 <f_mount+0x40>
    1762:	10 82       	st	Z, r1
    1764:	eb 81       	ldd	r30, Y+3	; 0x03
    1766:	fc 81       	ldd	r31, Y+4	; 0x04
    1768:	30 97       	sbiw	r30, 0x00	; 0
    176a:	e9 f0       	breq	.+58     	; 0x17a6 <f_mount+0x82>
    176c:	10 82       	st	Z, r1
    176e:	2b 81       	ldd	r18, Y+3	; 0x03
    1770:	3c 81       	ldd	r19, Y+4	; 0x04
    1772:	88 0f       	add	r24, r24
    1774:	99 1f       	adc	r25, r25
    1776:	fc 01       	movw	r30, r24
    1778:	ee 59       	subi	r30, 0x9E	; 158
    177a:	fc 4f       	sbci	r31, 0xFC	; 252
    177c:	31 83       	std	Z+1, r19	; 0x01
    177e:	20 83       	st	Z, r18
    1780:	23 2b       	or	r18, r19
    1782:	69 f0       	breq	.+26     	; 0x179e <f_mount+0x7a>
    1784:	11 30       	cpi	r17, 0x01	; 1
    1786:	69 f4       	brne	.+26     	; 0x17a2 <f_mount+0x7e>
    1788:	40 e0       	ldi	r20, 0x00	; 0
    178a:	be 01       	movw	r22, r28
    178c:	6b 5f       	subi	r22, 0xFB	; 251
    178e:	7f 4f       	sbci	r23, 0xFF	; 255
    1790:	ce 01       	movw	r24, r28
    1792:	03 96       	adiw	r24, 0x03	; 3
    1794:	0e 94 76 03 	call	0x6ec	; 0x6ec <find_volume>
    1798:	0e c0       	rjmp	.+28     	; 0x17b6 <f_mount+0x92>
    179a:	8b e0       	ldi	r24, 0x0B	; 11
    179c:	0c c0       	rjmp	.+24     	; 0x17b6 <f_mount+0x92>
    179e:	80 e0       	ldi	r24, 0x00	; 0
    17a0:	0a c0       	rjmp	.+20     	; 0x17b6 <f_mount+0x92>
    17a2:	80 e0       	ldi	r24, 0x00	; 0
    17a4:	08 c0       	rjmp	.+16     	; 0x17b6 <f_mount+0x92>
    17a6:	88 0f       	add	r24, r24
    17a8:	99 1f       	adc	r25, r25
    17aa:	fc 01       	movw	r30, r24
    17ac:	ee 59       	subi	r30, 0x9E	; 158
    17ae:	fc 4f       	sbci	r31, 0xFC	; 252
    17b0:	11 82       	std	Z+1, r1	; 0x01
    17b2:	10 82       	st	Z, r1
    17b4:	80 e0       	ldi	r24, 0x00	; 0
    17b6:	26 96       	adiw	r28, 0x06	; 6
    17b8:	0f b6       	in	r0, 0x3f	; 63
    17ba:	f8 94       	cli
    17bc:	de bf       	out	0x3e, r29	; 62
    17be:	0f be       	out	0x3f, r0	; 63
    17c0:	cd bf       	out	0x3d, r28	; 61
    17c2:	df 91       	pop	r29
    17c4:	cf 91       	pop	r28
    17c6:	1f 91       	pop	r17
    17c8:	08 95       	ret

000017ca <f_open>:
    17ca:	2f 92       	push	r2
    17cc:	3f 92       	push	r3
    17ce:	4f 92       	push	r4
    17d0:	5f 92       	push	r5
    17d2:	6f 92       	push	r6
    17d4:	7f 92       	push	r7
    17d6:	8f 92       	push	r8
    17d8:	9f 92       	push	r9
    17da:	af 92       	push	r10
    17dc:	bf 92       	push	r11
    17de:	cf 92       	push	r12
    17e0:	df 92       	push	r13
    17e2:	ef 92       	push	r14
    17e4:	ff 92       	push	r15
    17e6:	0f 93       	push	r16
    17e8:	1f 93       	push	r17
    17ea:	cf 93       	push	r28
    17ec:	df 93       	push	r29
    17ee:	cd b7       	in	r28, 0x3d	; 61
    17f0:	de b7       	in	r29, 0x3e	; 62
    17f2:	ae 97       	sbiw	r28, 0x2e	; 46
    17f4:	0f b6       	in	r0, 0x3f	; 63
    17f6:	f8 94       	cli
    17f8:	de bf       	out	0x3e, r29	; 62
    17fa:	0f be       	out	0x3f, r0	; 63
    17fc:	cd bf       	out	0x3d, r28	; 61
    17fe:	7c a3       	std	Y+36, r23	; 0x24
    1800:	6b a3       	std	Y+35, r22	; 0x23
    1802:	00 97       	sbiw	r24, 0x00	; 0
    1804:	09 f4       	brne	.+2      	; 0x1808 <f_open+0x3e>
    1806:	9d c2       	rjmp	.+1338   	; 0x1d42 <f_open+0x578>
    1808:	84 2e       	mov	r8, r20
    180a:	1c 01       	movw	r2, r24
    180c:	dc 01       	movw	r26, r24
    180e:	1d 92       	st	X+, r1
    1810:	1c 92       	st	X, r1
    1812:	4e 71       	andi	r20, 0x1E	; 30
    1814:	be 01       	movw	r22, r28
    1816:	6d 5d       	subi	r22, 0xDD	; 221
    1818:	7f 4f       	sbci	r23, 0xFF	; 255
    181a:	ce 01       	movw	r24, r28
    181c:	01 96       	adiw	r24, 0x01	; 1
    181e:	0e 94 76 03 	call	0x6ec	; 0x6ec <find_volume>
    1822:	81 11       	cpse	r24, r1
    1824:	f7 c2       	rjmp	.+1518   	; 0x1e14 <f_open+0x64a>
    1826:	ce 01       	movw	r24, r28
    1828:	47 96       	adiw	r24, 0x17	; 23
    182a:	9e 8b       	std	Y+22, r25	; 0x16
    182c:	8d 8b       	std	Y+21, r24	; 0x15
    182e:	cb a0       	ldd	r12, Y+35	; 0x23
    1830:	dc a0       	ldd	r13, Y+36	; 0x24
    1832:	f6 01       	movw	r30, r12
    1834:	80 81       	ld	r24, Z
    1836:	8f 32       	cpi	r24, 0x2F	; 47
    1838:	11 f0       	breq	.+4      	; 0x183e <f_open+0x74>
    183a:	8c 35       	cpi	r24, 0x5C	; 92
    183c:	19 f4       	brne	.+6      	; 0x1844 <f_open+0x7a>
    183e:	ff ef       	ldi	r31, 0xFF	; 255
    1840:	cf 1a       	sub	r12, r31
    1842:	df 0a       	sbc	r13, r31
    1844:	28 2d       	mov	r18, r8
    1846:	2f 71       	andi	r18, 0x1F	; 31
    1848:	2d a7       	std	Y+45, r18	; 0x2d
    184a:	1f 82       	std	Y+7, r1	; 0x07
    184c:	18 86       	std	Y+8, r1	; 0x08
    184e:	19 86       	std	Y+9, r1	; 0x09
    1850:	1a 86       	std	Y+10, r1	; 0x0a
    1852:	d6 01       	movw	r26, r12
    1854:	8c 91       	ld	r24, X
    1856:	80 32       	cpi	r24, 0x20	; 32
    1858:	70 f4       	brcc	.+28     	; 0x1876 <f_open+0xac>
    185a:	60 e0       	ldi	r22, 0x00	; 0
    185c:	70 e0       	ldi	r23, 0x00	; 0
    185e:	ce 01       	movw	r24, r28
    1860:	01 96       	adiw	r24, 0x01	; 1
    1862:	0e 94 71 07 	call	0xee2	; 0xee2 <dir_sdi>
    1866:	1c 8a       	std	Y+20, r1	; 0x14
    1868:	1b 8a       	std	Y+19, r1	; 0x13
    186a:	e1 2c       	mov	r14, r1
    186c:	f1 2c       	mov	r15, r1
    186e:	88 23       	and	r24, r24
    1870:	09 f4       	brne	.+2      	; 0x1874 <f_open+0xaa>
    1872:	9c c2       	rjmp	.+1336   	; 0x1dac <f_open+0x5e2>
    1874:	a2 c2       	rjmp	.+1348   	; 0x1dba <f_open+0x5f0>
    1876:	68 94       	set
    1878:	bb 24       	eor	r11, r11
    187a:	b5 f8       	bld	r11, 5
    187c:	a1 2c       	mov	r10, r1
    187e:	71 2c       	mov	r7, r1
    1880:	68 94       	set
    1882:	66 24       	eor	r6, r6
    1884:	63 f8       	bld	r6, 3
    1886:	41 2c       	mov	r4, r1
    1888:	56 2c       	mov	r5, r6
    188a:	4e a6       	std	Y+46, r4	; 0x2e
    188c:	f6 01       	movw	r30, r12
    188e:	03 c0       	rjmp	.+6      	; 0x1896 <f_open+0xcc>
    1890:	fd 01       	movw	r30, r26
    1892:	01 c0       	rjmp	.+2      	; 0x1896 <f_open+0xcc>
    1894:	fd 01       	movw	r30, r26
    1896:	9f 01       	movw	r18, r30
    1898:	df 01       	movw	r26, r30
    189a:	8d 91       	ld	r24, X+
    189c:	8f 32       	cpi	r24, 0x2F	; 47
    189e:	c1 f3       	breq	.-16     	; 0x1890 <f_open+0xc6>
    18a0:	8c 35       	cpi	r24, 0x5C	; 92
    18a2:	c1 f3       	breq	.-16     	; 0x1894 <f_open+0xca>
    18a4:	6d 89       	ldd	r22, Y+21	; 0x15
    18a6:	7e 89       	ldd	r23, Y+22	; 0x16
    18a8:	db 01       	movw	r26, r22
    18aa:	cb 01       	movw	r24, r22
    18ac:	0b 96       	adiw	r24, 0x0b	; 11
    18ae:	bd 92       	st	X+, r11
    18b0:	a8 17       	cp	r26, r24
    18b2:	b9 07       	cpc	r27, r25
    18b4:	e1 f7       	brne	.-8      	; 0x18ae <f_open+0xe4>
    18b6:	4a 2d       	mov	r20, r10
    18b8:	57 2d       	mov	r21, r7
    18ba:	c1 2c       	mov	r12, r1
    18bc:	d1 2c       	mov	r13, r1
    18be:	e6 2c       	mov	r14, r6
    18c0:	f4 2c       	mov	r15, r4
    18c2:	91 2c       	mov	r9, r1
    18c4:	3a a7       	std	Y+42, r19	; 0x2a
    18c6:	29 a7       	std	Y+41, r18	; 0x29
    18c8:	7e a3       	std	Y+38, r23	; 0x26
    18ca:	6d a3       	std	Y+37, r22	; 0x25
    18cc:	39 2d       	mov	r19, r9
    18ce:	bf ef       	ldi	r27, 0xFF	; 255
    18d0:	cb 1a       	sub	r12, r27
    18d2:	db 0a       	sbc	r13, r27
    18d4:	71 91       	ld	r23, Z+
    18d6:	71 32       	cpi	r23, 0x21	; 33
    18d8:	08 f4       	brcc	.+2      	; 0x18dc <f_open+0x112>
    18da:	44 c2       	rjmp	.+1160   	; 0x1d64 <f_open+0x59a>
    18dc:	7f 32       	cpi	r23, 0x2F	; 47
    18de:	09 f4       	brne	.+2      	; 0x18e2 <f_open+0x118>
    18e0:	38 c2       	rjmp	.+1136   	; 0x1d52 <f_open+0x588>
    18e2:	7c 35       	cpi	r23, 0x5C	; 92
    18e4:	09 f4       	brne	.+2      	; 0x18e8 <f_open+0x11e>
    18e6:	35 c2       	rjmp	.+1130   	; 0x1d52 <f_open+0x588>
    18e8:	7e 32       	cpi	r23, 0x2E	; 46
    18ea:	19 f0       	breq	.+6      	; 0x18f2 <f_open+0x128>
    18ec:	4e 15       	cp	r20, r14
    18ee:	5f 05       	cpc	r21, r15
    18f0:	90 f0       	brcs	.+36     	; 0x1916 <f_open+0x14c>
    18f2:	28 e0       	ldi	r18, 0x08	; 8
    18f4:	e2 16       	cp	r14, r18
    18f6:	f1 04       	cpc	r15, r1
    18f8:	09 f0       	breq	.+2      	; 0x18fc <f_open+0x132>
    18fa:	78 c2       	rjmp	.+1264   	; 0x1dec <f_open+0x622>
    18fc:	7e 32       	cpi	r23, 0x2E	; 46
    18fe:	09 f0       	breq	.+2      	; 0x1902 <f_open+0x138>
    1900:	75 c2       	rjmp	.+1258   	; 0x1dec <f_open+0x622>
    1902:	33 0f       	add	r19, r19
    1904:	33 0f       	add	r19, r19
    1906:	45 2d       	mov	r20, r5
    1908:	5e a5       	ldd	r21, Y+46	; 0x2e
    190a:	0f 2e       	mov	r0, r31
    190c:	fb e0       	ldi	r31, 0x0B	; 11
    190e:	ef 2e       	mov	r14, r31
    1910:	f0 2d       	mov	r31, r0
    1912:	f1 2c       	mov	r15, r1
    1914:	dc cf       	rjmp	.-72     	; 0x18ce <f_open+0x104>
    1916:	77 23       	and	r23, r23
    1918:	0c f4       	brge	.+2      	; 0x191c <f_open+0x152>
    191a:	68 c2       	rjmp	.+1232   	; 0x1dec <f_open+0x622>
    191c:	07 2f       	mov	r16, r23
    191e:	10 e0       	ldi	r17, 0x00	; 0
    1920:	02 32       	cpi	r16, 0x22	; 34
    1922:	11 05       	cpc	r17, r1
    1924:	09 f4       	brne	.+2      	; 0x1928 <f_open+0x15e>
    1926:	36 c2       	rjmp	.+1132   	; 0x1d94 <f_open+0x5ca>
    1928:	a2 e2       	ldi	r26, 0x22	; 34
    192a:	b1 e0       	ldi	r27, 0x01	; 1
    192c:	8d 91       	ld	r24, X+
    192e:	88 23       	and	r24, r24
    1930:	09 f4       	brne	.+2      	; 0x1934 <f_open+0x16a>
    1932:	09 c2       	rjmp	.+1042   	; 0x1d46 <f_open+0x57c>
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	08 17       	cp	r16, r24
    1938:	19 07       	cpc	r17, r25
    193a:	c1 f7       	brne	.-16     	; 0x192c <f_open+0x162>
    193c:	86 e0       	ldi	r24, 0x06	; 6
    193e:	2f c2       	rjmp	.+1118   	; 0x1d9e <f_open+0x5d4>
    1940:	32 60       	ori	r19, 0x02	; 2
    1942:	06 c0       	rjmp	.+12     	; 0x1950 <f_open+0x186>
    1944:	8f e9       	ldi	r24, 0x9F	; 159
    1946:	87 0f       	add	r24, r23
    1948:	8a 31       	cpi	r24, 0x1A	; 26
    194a:	10 f4       	brcc	.+4      	; 0x1950 <f_open+0x186>
    194c:	31 60       	ori	r19, 0x01	; 1
    194e:	70 52       	subi	r23, 0x20	; 32
    1950:	ad a1       	ldd	r26, Y+37	; 0x25
    1952:	be a1       	ldd	r27, Y+38	; 0x26
    1954:	a4 0f       	add	r26, r20
    1956:	b5 1f       	adc	r27, r21
    1958:	7c 93       	st	X, r23
    195a:	4f 5f       	subi	r20, 0xFF	; 255
    195c:	5f 4f       	sbci	r21, 0xFF	; 255
    195e:	b7 cf       	rjmp	.-146    	; 0x18ce <f_open+0x104>
    1960:	45 2b       	or	r20, r21
    1962:	09 f4       	brne	.+2      	; 0x1966 <f_open+0x19c>
    1964:	43 c2       	rjmp	.+1158   	; 0x1dec <f_open+0x622>
    1966:	db 01       	movw	r26, r22
    1968:	9c 91       	ld	r25, X
    196a:	95 3e       	cpi	r25, 0xE5	; 229
    196c:	11 f4       	brne	.+4      	; 0x1972 <f_open+0x1a8>
    196e:	e5 e0       	ldi	r30, 0x05	; 5
    1970:	ec 93       	st	X, r30
    1972:	f8 e0       	ldi	r31, 0x08	; 8
    1974:	ef 16       	cp	r14, r31
    1976:	f1 04       	cpc	r15, r1
    1978:	11 f4       	brne	.+4      	; 0x197e <f_open+0x1b4>
    197a:	99 0c       	add	r9, r9
    197c:	99 0c       	add	r9, r9
    197e:	99 2d       	mov	r25, r9
    1980:	93 70       	andi	r25, 0x03	; 3
    1982:	91 30       	cpi	r25, 0x01	; 1
    1984:	09 f4       	brne	.+2      	; 0x1988 <f_open+0x1be>
    1986:	80 61       	ori	r24, 0x10	; 16
    1988:	99 2d       	mov	r25, r9
    198a:	9c 70       	andi	r25, 0x0C	; 12
    198c:	94 30       	cpi	r25, 0x04	; 4
    198e:	09 f4       	brne	.+2      	; 0x1992 <f_open+0x1c8>
    1990:	88 60       	ori	r24, 0x08	; 8
    1992:	db 01       	movw	r26, r22
    1994:	1b 96       	adiw	r26, 0x0b	; 11
    1996:	8c 93       	st	X, r24
    1998:	6a 2d       	mov	r22, r10
    199a:	77 2d       	mov	r23, r7
    199c:	ce 01       	movw	r24, r28
    199e:	01 96       	adiw	r24, 0x01	; 1
    19a0:	0e 94 71 07 	call	0xee2	; 0xee2 <dir_sdi>
    19a4:	81 11       	cpse	r24, r1
    19a6:	ec c1       	rjmp	.+984    	; 0x1d80 <f_open+0x5b6>
    19a8:	4f 85       	ldd	r20, Y+15	; 0x0f
    19aa:	58 89       	ldd	r21, Y+16	; 0x10
    19ac:	69 89       	ldd	r22, Y+17	; 0x11
    19ae:	7a 89       	ldd	r23, Y+18	; 0x12
    19b0:	89 81       	ldd	r24, Y+1	; 0x01
    19b2:	9a 81       	ldd	r25, Y+2	; 0x02
    19b4:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <move_window>
    19b8:	81 11       	cpse	r24, r1
    19ba:	e2 c1       	rjmp	.+964    	; 0x1d80 <f_open+0x5b6>
    19bc:	eb 88       	ldd	r14, Y+19	; 0x13
    19be:	fc 88       	ldd	r15, Y+20	; 0x14
    19c0:	f7 01       	movw	r30, r14
    19c2:	80 81       	ld	r24, Z
    19c4:	88 23       	and	r24, r24
    19c6:	d9 f0       	breq	.+54     	; 0x19fe <f_open+0x234>
    19c8:	63 85       	ldd	r22, Z+11	; 0x0b
    19ca:	63 fd       	sbrc	r22, 3
    19cc:	0f c0       	rjmp	.+30     	; 0x19ec <f_open+0x222>
    19ce:	4d 89       	ldd	r20, Y+21	; 0x15
    19d0:	5e 89       	ldd	r21, Y+22	; 0x16
    19d2:	da 01       	movw	r26, r20
    19d4:	97 01       	movw	r18, r14
    19d6:	25 5f       	subi	r18, 0xF5	; 245
    19d8:	3f 4f       	sbci	r19, 0xFF	; 255
    19da:	04 c0       	rjmp	.+8      	; 0x19e4 <f_open+0x21a>
    19dc:	2e 17       	cp	r18, r30
    19de:	3f 07       	cpc	r19, r31
    19e0:	09 f4       	brne	.+2      	; 0x19e4 <f_open+0x21a>
    19e2:	c9 c1       	rjmp	.+914    	; 0x1d76 <f_open+0x5ac>
    19e4:	91 91       	ld	r25, Z+
    19e6:	8d 91       	ld	r24, X+
    19e8:	98 17       	cp	r25, r24
    19ea:	c1 f3       	breq	.-16     	; 0x19dc <f_open+0x212>
    19ec:	6a 2d       	mov	r22, r10
    19ee:	77 2d       	mov	r23, r7
    19f0:	ce 01       	movw	r24, r28
    19f2:	01 96       	adiw	r24, 0x01	; 1
    19f4:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <dir_next>
    19f8:	88 23       	and	r24, r24
    19fa:	b1 f2       	breq	.-84     	; 0x19a8 <f_open+0x1de>
    19fc:	c1 c1       	rjmp	.+898    	; 0x1d80 <f_open+0x5b6>
    19fe:	ed 89       	ldd	r30, Y+21	; 0x15
    1a00:	fe 89       	ldd	r31, Y+22	; 0x16
    1a02:	93 85       	ldd	r25, Z+11	; 0x0b
    1a04:	92 fd       	sbrc	r25, 2
    1a06:	c8 c1       	rjmp	.+912    	; 0x1d98 <f_open+0x5ce>
    1a08:	85 e0       	ldi	r24, 0x05	; 5
    1a0a:	c9 c1       	rjmp	.+914    	; 0x1d9e <f_open+0x5d4>
    1a0c:	64 ff       	sbrs	r22, 4
    1a0e:	c6 c1       	rjmp	.+908    	; 0x1d9c <f_open+0x5d2>
    1a10:	d7 01       	movw	r26, r14
    1a12:	5a 96       	adiw	r26, 0x1a	; 26
    1a14:	8d 91       	ld	r24, X+
    1a16:	9c 91       	ld	r25, X
    1a18:	5b 97       	sbiw	r26, 0x1b	; 27
    1a1a:	a0 e0       	ldi	r26, 0x00	; 0
    1a1c:	b0 e0       	ldi	r27, 0x00	; 0
    1a1e:	e9 81       	ldd	r30, Y+1	; 0x01
    1a20:	fa 81       	ldd	r31, Y+2	; 0x02
    1a22:	20 81       	ld	r18, Z
    1a24:	23 30       	cpi	r18, 0x03	; 3
    1a26:	61 f4       	brne	.+24     	; 0x1a40 <f_open+0x276>
    1a28:	f7 01       	movw	r30, r14
    1a2a:	44 89       	ldd	r20, Z+20	; 0x14
    1a2c:	55 89       	ldd	r21, Z+21	; 0x15
    1a2e:	60 e0       	ldi	r22, 0x00	; 0
    1a30:	70 e0       	ldi	r23, 0x00	; 0
    1a32:	ba 01       	movw	r22, r20
    1a34:	55 27       	eor	r21, r21
    1a36:	44 27       	eor	r20, r20
    1a38:	84 2b       	or	r24, r20
    1a3a:	95 2b       	or	r25, r21
    1a3c:	a6 2b       	or	r26, r22
    1a3e:	b7 2b       	or	r27, r23
    1a40:	8f 83       	std	Y+7, r24	; 0x07
    1a42:	98 87       	std	Y+8, r25	; 0x08
    1a44:	a9 87       	std	Y+9, r26	; 0x09
    1a46:	ba 87       	std	Y+10, r27	; 0x0a
    1a48:	21 cf       	rjmp	.-446    	; 0x188c <f_open+0xc2>
    1a4a:	88 23       	and	r24, r24
    1a4c:	09 f4       	brne	.+2      	; 0x1a50 <f_open+0x286>
    1a4e:	55 c0       	rjmp	.+170    	; 0x1afa <f_open+0x330>
    1a50:	84 30       	cpi	r24, 0x04	; 4
    1a52:	09 f0       	breq	.+2      	; 0x1a56 <f_open+0x28c>
    1a54:	4a c0       	rjmp	.+148    	; 0x1aea <f_open+0x320>
    1a56:	60 e0       	ldi	r22, 0x00	; 0
    1a58:	70 e0       	ldi	r23, 0x00	; 0
    1a5a:	ce 01       	movw	r24, r28
    1a5c:	01 96       	adiw	r24, 0x01	; 1
    1a5e:	0e 94 71 07 	call	0xee2	; 0xee2 <dir_sdi>
    1a62:	81 11       	cpse	r24, r1
    1a64:	19 c0       	rjmp	.+50     	; 0x1a98 <f_open+0x2ce>
    1a66:	4f 85       	ldd	r20, Y+15	; 0x0f
    1a68:	58 89       	ldd	r21, Y+16	; 0x10
    1a6a:	69 89       	ldd	r22, Y+17	; 0x11
    1a6c:	7a 89       	ldd	r23, Y+18	; 0x12
    1a6e:	89 81       	ldd	r24, Y+1	; 0x01
    1a70:	9a 81       	ldd	r25, Y+2	; 0x02
    1a72:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <move_window>
    1a76:	81 11       	cpse	r24, r1
    1a78:	0f c0       	rjmp	.+30     	; 0x1a98 <f_open+0x2ce>
    1a7a:	eb 89       	ldd	r30, Y+19	; 0x13
    1a7c:	fc 89       	ldd	r31, Y+20	; 0x14
    1a7e:	80 81       	ld	r24, Z
    1a80:	85 3e       	cpi	r24, 0xE5	; 229
    1a82:	79 f0       	breq	.+30     	; 0x1aa2 <f_open+0x2d8>
    1a84:	88 23       	and	r24, r24
    1a86:	69 f0       	breq	.+26     	; 0x1aa2 <f_open+0x2d8>
    1a88:	61 e0       	ldi	r22, 0x01	; 1
    1a8a:	70 e0       	ldi	r23, 0x00	; 0
    1a8c:	ce 01       	movw	r24, r28
    1a8e:	01 96       	adiw	r24, 0x01	; 1
    1a90:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <dir_next>
    1a94:	88 23       	and	r24, r24
    1a96:	39 f3       	breq	.-50     	; 0x1a66 <f_open+0x29c>
    1a98:	84 30       	cpi	r24, 0x04	; 4
    1a9a:	09 f4       	brne	.+2      	; 0x1a9e <f_open+0x2d4>
    1a9c:	ab c1       	rjmp	.+854    	; 0x1df4 <f_open+0x62a>
    1a9e:	81 11       	cpse	r24, r1
    1aa0:	ac c1       	rjmp	.+856    	; 0x1dfa <f_open+0x630>
    1aa2:	4f 85       	ldd	r20, Y+15	; 0x0f
    1aa4:	58 89       	ldd	r21, Y+16	; 0x10
    1aa6:	69 89       	ldd	r22, Y+17	; 0x11
    1aa8:	7a 89       	ldd	r23, Y+18	; 0x12
    1aaa:	89 81       	ldd	r24, Y+1	; 0x01
    1aac:	9a 81       	ldd	r25, Y+2	; 0x02
    1aae:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <move_window>
    1ab2:	81 11       	cpse	r24, r1
    1ab4:	a2 c1       	rjmp	.+836    	; 0x1dfa <f_open+0x630>
    1ab6:	eb 89       	ldd	r30, Y+19	; 0x13
    1ab8:	fc 89       	ldd	r31, Y+20	; 0x14
    1aba:	cf 01       	movw	r24, r30
    1abc:	80 96       	adiw	r24, 0x20	; 32
    1abe:	11 92       	st	Z+, r1
    1ac0:	e8 17       	cp	r30, r24
    1ac2:	f9 07       	cpc	r31, r25
    1ac4:	e1 f7       	brne	.-8      	; 0x1abe <f_open+0x2f4>
    1ac6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ac8:	7e 89       	ldd	r23, Y+22	; 0x16
    1aca:	4b e0       	ldi	r20, 0x0B	; 11
    1acc:	50 e0       	ldi	r21, 0x00	; 0
    1ace:	8b 89       	ldd	r24, Y+19	; 0x13
    1ad0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ad2:	0e 94 07 02 	call	0x40e	; 0x40e <mem_cpy>
    1ad6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ad8:	fa 81       	ldd	r31, Y+2	; 0x02
    1ada:	81 e0       	ldi	r24, 0x01	; 1
    1adc:	84 83       	std	Z+4, r24	; 0x04
    1ade:	fd a5       	ldd	r31, Y+45	; 0x2d
    1ae0:	f8 60       	ori	r31, 0x08	; 8
    1ae2:	fd a7       	std	Y+45, r31	; 0x2d
    1ae4:	eb 88       	ldd	r14, Y+19	; 0x13
    1ae6:	fc 88       	ldd	r15, Y+20	; 0x14
    1ae8:	10 c0       	rjmp	.+32     	; 0x1b0a <f_open+0x340>
    1aea:	2d a5       	ldd	r18, Y+45	; 0x2d
    1aec:	28 60       	ori	r18, 0x08	; 8
    1aee:	2d a7       	std	Y+45, r18	; 0x2d
    1af0:	eb 88       	ldd	r14, Y+19	; 0x13
    1af2:	fc 88       	ldd	r15, Y+20	; 0x14
    1af4:	88 23       	and	r24, r24
    1af6:	49 f0       	breq	.+18     	; 0x1b0a <f_open+0x340>
    1af8:	8d c1       	rjmp	.+794    	; 0x1e14 <f_open+0x64a>
    1afa:	d7 01       	movw	r26, r14
    1afc:	1b 96       	adiw	r26, 0x0b	; 11
    1afe:	8c 91       	ld	r24, X
    1b00:	81 71       	andi	r24, 0x11	; 17
    1b02:	09 f0       	breq	.+2      	; 0x1b06 <f_open+0x33c>
    1b04:	80 c1       	rjmp	.+768    	; 0x1e06 <f_open+0x63c>
    1b06:	82 fc       	sbrc	r8, 2
    1b08:	80 c1       	rjmp	.+768    	; 0x1e0a <f_open+0x640>
    1b0a:	bd a5       	ldd	r27, Y+45	; 0x2d
    1b0c:	b3 ff       	sbrs	r27, 3
    1b0e:	ca c0       	rjmp	.+404    	; 0x1ca4 <f_open+0x4da>
    1b10:	80 e0       	ldi	r24, 0x00	; 0
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	a1 e2       	ldi	r26, 0x21	; 33
    1b16:	b8 e4       	ldi	r27, 0x48	; 72
    1b18:	f7 01       	movw	r30, r14
    1b1a:	86 87       	std	Z+14, r24	; 0x0e
    1b1c:	97 87       	std	Z+15, r25	; 0x0f
    1b1e:	a0 8b       	std	Z+16, r26	; 0x10
    1b20:	b1 8b       	std	Z+17, r27	; 0x11
    1b22:	86 8b       	std	Z+22, r24	; 0x16
    1b24:	97 8b       	std	Z+23, r25	; 0x17
    1b26:	a0 8f       	std	Z+24, r26	; 0x18
    1b28:	b1 8f       	std	Z+25, r27	; 0x19
    1b2a:	13 86       	std	Z+11, r1	; 0x0b
    1b2c:	d7 01       	movw	r26, r14
    1b2e:	14 8e       	std	Z+28, r1	; 0x1c
    1b30:	15 8e       	std	Z+29, r1	; 0x1d
    1b32:	16 8e       	std	Z+30, r1	; 0x1e
    1b34:	17 8e       	std	Z+31, r1	; 0x1f
    1b36:	c9 80       	ldd	r12, Y+1	; 0x01
    1b38:	da 80       	ldd	r13, Y+2	; 0x02
    1b3a:	82 8c       	ldd	r8, Z+26	; 0x1a
    1b3c:	93 8c       	ldd	r9, Z+27	; 0x1b
    1b3e:	a1 2c       	mov	r10, r1
    1b40:	b1 2c       	mov	r11, r1
    1b42:	f6 01       	movw	r30, r12
    1b44:	80 81       	ld	r24, Z
    1b46:	83 30       	cpi	r24, 0x03	; 3
    1b48:	69 f4       	brne	.+26     	; 0x1b64 <f_open+0x39a>
    1b4a:	54 96       	adiw	r26, 0x14	; 20
    1b4c:	8d 91       	ld	r24, X+
    1b4e:	9c 91       	ld	r25, X
    1b50:	55 97       	sbiw	r26, 0x15	; 21
    1b52:	a0 e0       	ldi	r26, 0x00	; 0
    1b54:	b0 e0       	ldi	r27, 0x00	; 0
    1b56:	dc 01       	movw	r26, r24
    1b58:	99 27       	eor	r25, r25
    1b5a:	88 27       	eor	r24, r24
    1b5c:	88 2a       	or	r8, r24
    1b5e:	99 2a       	or	r9, r25
    1b60:	aa 2a       	or	r10, r26
    1b62:	bb 2a       	or	r11, r27
    1b64:	d7 01       	movw	r26, r14
    1b66:	5b 96       	adiw	r26, 0x1b	; 27
    1b68:	1c 92       	st	X, r1
    1b6a:	1e 92       	st	-X, r1
    1b6c:	5a 97       	sbiw	r26, 0x1a	; 26
    1b6e:	55 96       	adiw	r26, 0x15	; 21
    1b70:	1c 92       	st	X, r1
    1b72:	1e 92       	st	-X, r1
    1b74:	54 97       	sbiw	r26, 0x14	; 20
    1b76:	81 e0       	ldi	r24, 0x01	; 1
    1b78:	f6 01       	movw	r30, r12
    1b7a:	84 83       	std	Z+4, r24	; 0x04
    1b7c:	81 14       	cp	r8, r1
    1b7e:	91 04       	cpc	r9, r1
    1b80:	a1 04       	cpc	r10, r1
    1b82:	b1 04       	cpc	r11, r1
    1b84:	09 f4       	brne	.+2      	; 0x1b88 <f_open+0x3be>
    1b86:	8b c0       	rjmp	.+278    	; 0x1c9e <f_open+0x4d4>
    1b88:	22 a5       	ldd	r18, Z+42	; 0x2a
    1b8a:	33 a5       	ldd	r19, Z+43	; 0x2b
    1b8c:	44 a5       	ldd	r20, Z+44	; 0x2c
    1b8e:	55 a5       	ldd	r21, Z+45	; 0x2d
    1b90:	29 a7       	std	Y+41, r18	; 0x29
    1b92:	3a a7       	std	Y+42, r19	; 0x2a
    1b94:	4b a7       	std	Y+43, r20	; 0x2b
    1b96:	5c a7       	std	Y+44, r21	; 0x2c
    1b98:	b2 e0       	ldi	r27, 0x02	; 2
    1b9a:	8b 16       	cp	r8, r27
    1b9c:	91 04       	cpc	r9, r1
    1b9e:	a1 04       	cpc	r10, r1
    1ba0:	b1 04       	cpc	r11, r1
    1ba2:	08 f4       	brcc	.+2      	; 0x1ba6 <f_open+0x3dc>
    1ba4:	14 c1       	rjmp	.+552    	; 0x1dce <f_open+0x604>
    1ba6:	82 89       	ldd	r24, Z+18	; 0x12
    1ba8:	93 89       	ldd	r25, Z+19	; 0x13
    1baa:	a4 89       	ldd	r26, Z+20	; 0x14
    1bac:	b5 89       	ldd	r27, Z+21	; 0x15
    1bae:	88 16       	cp	r8, r24
    1bb0:	99 06       	cpc	r9, r25
    1bb2:	aa 06       	cpc	r10, r26
    1bb4:	bb 06       	cpc	r11, r27
    1bb6:	08 f0       	brcs	.+2      	; 0x1bba <f_open+0x3f0>
    1bb8:	0c c1       	rjmp	.+536    	; 0x1dd2 <f_open+0x608>
    1bba:	8d a2       	std	Y+37, r8	; 0x25
    1bbc:	9e a2       	std	Y+38, r9	; 0x26
    1bbe:	af a2       	std	Y+39, r10	; 0x27
    1bc0:	b8 a6       	std	Y+40, r11	; 0x28
    1bc2:	4d a1       	ldd	r20, Y+37	; 0x25
    1bc4:	5e a1       	ldd	r21, Y+38	; 0x26
    1bc6:	6f a1       	ldd	r22, Y+39	; 0x27
    1bc8:	78 a5       	ldd	r23, Y+40	; 0x28
    1bca:	c6 01       	movw	r24, r12
    1bcc:	0e 94 8a 06 	call	0xd14	; 0xd14 <get_fat>
    1bd0:	2b 01       	movw	r4, r22
    1bd2:	3c 01       	movw	r6, r24
    1bd4:	61 15       	cp	r22, r1
    1bd6:	71 05       	cpc	r23, r1
    1bd8:	81 05       	cpc	r24, r1
    1bda:	91 05       	cpc	r25, r1
    1bdc:	e9 f1       	breq	.+122    	; 0x1c58 <f_open+0x48e>
    1bde:	61 30       	cpi	r22, 0x01	; 1
    1be0:	71 05       	cpc	r23, r1
    1be2:	81 05       	cpc	r24, r1
    1be4:	91 05       	cpc	r25, r1
    1be6:	09 f4       	brne	.+2      	; 0x1bea <f_open+0x420>
    1be8:	f6 c0       	rjmp	.+492    	; 0x1dd6 <f_open+0x60c>
    1bea:	6f 3f       	cpi	r22, 0xFF	; 255
    1bec:	7f 4f       	sbci	r23, 0xFF	; 255
    1bee:	8f 4f       	sbci	r24, 0xFF	; 255
    1bf0:	9f 4f       	sbci	r25, 0xFF	; 255
    1bf2:	09 f4       	brne	.+2      	; 0x1bf6 <f_open+0x42c>
    1bf4:	f2 c0       	rjmp	.+484    	; 0x1dda <f_open+0x610>
    1bf6:	00 e0       	ldi	r16, 0x00	; 0
    1bf8:	10 e0       	ldi	r17, 0x00	; 0
    1bfa:	98 01       	movw	r18, r16
    1bfc:	4d a1       	ldd	r20, Y+37	; 0x25
    1bfe:	5e a1       	ldd	r21, Y+38	; 0x26
    1c00:	6f a1       	ldd	r22, Y+39	; 0x27
    1c02:	78 a5       	ldd	r23, Y+40	; 0x28
    1c04:	c6 01       	movw	r24, r12
    1c06:	0e 94 2d 08 	call	0x105a	; 0x105a <put_fat>
    1c0a:	81 11       	cpse	r24, r1
    1c0c:	e7 c0       	rjmp	.+462    	; 0x1ddc <f_open+0x612>
    1c0e:	f6 01       	movw	r30, r12
    1c10:	86 85       	ldd	r24, Z+14	; 0x0e
    1c12:	97 85       	ldd	r25, Z+15	; 0x0f
    1c14:	a0 89       	ldd	r26, Z+16	; 0x10
    1c16:	b1 89       	ldd	r27, Z+17	; 0x11
    1c18:	8f 3f       	cpi	r24, 0xFF	; 255
    1c1a:	ff ef       	ldi	r31, 0xFF	; 255
    1c1c:	9f 07       	cpc	r25, r31
    1c1e:	af 07       	cpc	r26, r31
    1c20:	bf 07       	cpc	r27, r31
    1c22:	59 f0       	breq	.+22     	; 0x1c3a <f_open+0x470>
    1c24:	01 96       	adiw	r24, 0x01	; 1
    1c26:	a1 1d       	adc	r26, r1
    1c28:	b1 1d       	adc	r27, r1
    1c2a:	f6 01       	movw	r30, r12
    1c2c:	86 87       	std	Z+14, r24	; 0x0e
    1c2e:	97 87       	std	Z+15, r25	; 0x0f
    1c30:	a0 8b       	std	Z+16, r26	; 0x10
    1c32:	b1 8b       	std	Z+17, r27	; 0x11
    1c34:	85 81       	ldd	r24, Z+5	; 0x05
    1c36:	81 60       	ori	r24, 0x01	; 1
    1c38:	85 83       	std	Z+5, r24	; 0x05
    1c3a:	4d a2       	std	Y+37, r4	; 0x25
    1c3c:	5e a2       	std	Y+38, r5	; 0x26
    1c3e:	6f a2       	std	Y+39, r6	; 0x27
    1c40:	78 a6       	std	Y+40, r7	; 0x28
    1c42:	f6 01       	movw	r30, r12
    1c44:	82 89       	ldd	r24, Z+18	; 0x12
    1c46:	93 89       	ldd	r25, Z+19	; 0x13
    1c48:	a4 89       	ldd	r26, Z+20	; 0x14
    1c4a:	b5 89       	ldd	r27, Z+21	; 0x15
    1c4c:	48 16       	cp	r4, r24
    1c4e:	59 06       	cpc	r5, r25
    1c50:	6a 06       	cpc	r6, r26
    1c52:	7b 06       	cpc	r7, r27
    1c54:	08 f4       	brcc	.+2      	; 0x1c58 <f_open+0x48e>
    1c56:	b5 cf       	rjmp	.-150    	; 0x1bc2 <f_open+0x3f8>
    1c58:	89 81       	ldd	r24, Y+1	; 0x01
    1c5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c5c:	f1 e0       	ldi	r31, 0x01	; 1
    1c5e:	8f 1a       	sub	r8, r31
    1c60:	91 08       	sbc	r9, r1
    1c62:	a1 08       	sbc	r10, r1
    1c64:	b1 08       	sbc	r11, r1
    1c66:	dc 01       	movw	r26, r24
    1c68:	1a 96       	adiw	r26, 0x0a	; 10
    1c6a:	8d 92       	st	X+, r8
    1c6c:	9d 92       	st	X+, r9
    1c6e:	ad 92       	st	X+, r10
    1c70:	bc 92       	st	X, r11
    1c72:	1d 97       	sbiw	r26, 0x0d	; 13
    1c74:	49 a5       	ldd	r20, Y+41	; 0x29
    1c76:	5a a5       	ldd	r21, Y+42	; 0x2a
    1c78:	6b a5       	ldd	r22, Y+43	; 0x2b
    1c7a:	7c a5       	ldd	r23, Y+44	; 0x2c
    1c7c:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <move_window>
    1c80:	88 23       	and	r24, r24
    1c82:	69 f0       	breq	.+26     	; 0x1c9e <f_open+0x4d4>
    1c84:	c7 c0       	rjmp	.+398    	; 0x1e14 <f_open+0x64a>
    1c86:	81 11       	cpse	r24, r1
    1c88:	c5 c0       	rjmp	.+394    	; 0x1e14 <f_open+0x64a>
    1c8a:	f7 01       	movw	r30, r14
    1c8c:	83 85       	ldd	r24, Z+11	; 0x0b
    1c8e:	84 fd       	sbrc	r24, 4
    1c90:	be c0       	rjmp	.+380    	; 0x1e0e <f_open+0x644>
    1c92:	81 fe       	sbrs	r8, 1
    1c94:	02 c0       	rjmp	.+4      	; 0x1c9a <f_open+0x4d0>
    1c96:	80 fd       	sbrc	r24, 0
    1c98:	bc c0       	rjmp	.+376    	; 0x1e12 <f_open+0x648>
    1c9a:	83 fe       	sbrs	r8, 3
    1c9c:	03 c0       	rjmp	.+6      	; 0x1ca4 <f_open+0x4da>
    1c9e:	fd a5       	ldd	r31, Y+45	; 0x2d
    1ca0:	f0 62       	ori	r31, 0x20	; 32
    1ca2:	fd a7       	std	Y+45, r31	; 0x2d
    1ca4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ca6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ca8:	82 a5       	ldd	r24, Z+42	; 0x2a
    1caa:	93 a5       	ldd	r25, Z+43	; 0x2b
    1cac:	a4 a5       	ldd	r26, Z+44	; 0x2c
    1cae:	b5 a5       	ldd	r27, Z+45	; 0x2d
    1cb0:	f1 01       	movw	r30, r2
    1cb2:	82 8f       	std	Z+26, r24	; 0x1a
    1cb4:	93 8f       	std	Z+27, r25	; 0x1b
    1cb6:	a4 8f       	std	Z+28, r26	; 0x1c
    1cb8:	b5 8f       	std	Z+29, r27	; 0x1d
    1cba:	f7 8e       	std	Z+31, r15	; 0x1f
    1cbc:	e6 8e       	std	Z+30, r14	; 0x1e
    1cbe:	ed a5       	ldd	r30, Y+45	; 0x2d
    1cc0:	d1 01       	movw	r26, r2
    1cc2:	14 96       	adiw	r26, 0x04	; 4
    1cc4:	ec 93       	st	X, r30
    1cc6:	14 97       	sbiw	r26, 0x04	; 4
    1cc8:	15 96       	adiw	r26, 0x05	; 5
    1cca:	1c 92       	st	X, r1
    1ccc:	09 81       	ldd	r16, Y+1	; 0x01
    1cce:	1a 81       	ldd	r17, Y+2	; 0x02
    1cd0:	d7 01       	movw	r26, r14
    1cd2:	5a 96       	adiw	r26, 0x1a	; 26
    1cd4:	8d 91       	ld	r24, X+
    1cd6:	9c 91       	ld	r25, X
    1cd8:	5b 97       	sbiw	r26, 0x1b	; 27
    1cda:	a0 e0       	ldi	r26, 0x00	; 0
    1cdc:	b0 e0       	ldi	r27, 0x00	; 0
    1cde:	f8 01       	movw	r30, r16
    1ce0:	20 81       	ld	r18, Z
    1ce2:	23 30       	cpi	r18, 0x03	; 3
    1ce4:	61 f4       	brne	.+24     	; 0x1cfe <f_open+0x534>
    1ce6:	f7 01       	movw	r30, r14
    1ce8:	44 89       	ldd	r20, Z+20	; 0x14
    1cea:	55 89       	ldd	r21, Z+21	; 0x15
    1cec:	60 e0       	ldi	r22, 0x00	; 0
    1cee:	70 e0       	ldi	r23, 0x00	; 0
    1cf0:	ba 01       	movw	r22, r20
    1cf2:	55 27       	eor	r21, r21
    1cf4:	44 27       	eor	r20, r20
    1cf6:	84 2b       	or	r24, r20
    1cf8:	95 2b       	or	r25, r21
    1cfa:	a6 2b       	or	r26, r22
    1cfc:	b7 2b       	or	r27, r23
    1cfe:	f1 01       	movw	r30, r2
    1d00:	86 87       	std	Z+14, r24	; 0x0e
    1d02:	97 87       	std	Z+15, r25	; 0x0f
    1d04:	a0 8b       	std	Z+16, r26	; 0x10
    1d06:	b1 8b       	std	Z+17, r27	; 0x11
    1d08:	f7 01       	movw	r30, r14
    1d0a:	84 8d       	ldd	r24, Z+28	; 0x1c
    1d0c:	95 8d       	ldd	r25, Z+29	; 0x1d
    1d0e:	a6 8d       	ldd	r26, Z+30	; 0x1e
    1d10:	b7 8d       	ldd	r27, Z+31	; 0x1f
    1d12:	f1 01       	movw	r30, r2
    1d14:	82 87       	std	Z+10, r24	; 0x0a
    1d16:	93 87       	std	Z+11, r25	; 0x0b
    1d18:	a4 87       	std	Z+12, r26	; 0x0c
    1d1a:	b5 87       	std	Z+13, r27	; 0x0d
    1d1c:	16 82       	std	Z+6, r1	; 0x06
    1d1e:	17 82       	std	Z+7, r1	; 0x07
    1d20:	10 86       	std	Z+8, r1	; 0x08
    1d22:	11 86       	std	Z+9, r1	; 0x09
    1d24:	16 8a       	std	Z+22, r1	; 0x16
    1d26:	17 8a       	std	Z+23, r1	; 0x17
    1d28:	10 8e       	std	Z+24, r1	; 0x18
    1d2a:	11 8e       	std	Z+25, r1	; 0x19
    1d2c:	11 83       	std	Z+1, r17	; 0x01
    1d2e:	00 83       	st	Z, r16
    1d30:	d8 01       	movw	r26, r16
    1d32:	16 96       	adiw	r26, 0x06	; 6
    1d34:	8d 91       	ld	r24, X+
    1d36:	9c 91       	ld	r25, X
    1d38:	17 97       	sbiw	r26, 0x07	; 7
    1d3a:	93 83       	std	Z+3, r25	; 0x03
    1d3c:	82 83       	std	Z+2, r24	; 0x02
    1d3e:	80 e0       	ldi	r24, 0x00	; 0
    1d40:	69 c0       	rjmp	.+210    	; 0x1e14 <f_open+0x64a>
    1d42:	89 e0       	ldi	r24, 0x09	; 9
    1d44:	67 c0       	rjmp	.+206    	; 0x1e14 <f_open+0x64a>
    1d46:	8f eb       	ldi	r24, 0xBF	; 191
    1d48:	87 0f       	add	r24, r23
    1d4a:	8a 31       	cpi	r24, 0x1A	; 26
    1d4c:	08 f4       	brcc	.+2      	; 0x1d50 <f_open+0x586>
    1d4e:	f8 cd       	rjmp	.-1040   	; 0x1940 <f_open+0x176>
    1d50:	f9 cd       	rjmp	.-1038   	; 0x1944 <f_open+0x17a>
    1d52:	6d a1       	ldd	r22, Y+37	; 0x25
    1d54:	7e a1       	ldd	r23, Y+38	; 0x26
    1d56:	93 2e       	mov	r9, r19
    1d58:	29 a5       	ldd	r18, Y+41	; 0x29
    1d5a:	3a a5       	ldd	r19, Y+42	; 0x2a
    1d5c:	c2 0e       	add	r12, r18
    1d5e:	d3 1e       	adc	r13, r19
    1d60:	80 e0       	ldi	r24, 0x00	; 0
    1d62:	fe cd       	rjmp	.-1028   	; 0x1960 <f_open+0x196>
    1d64:	6d a1       	ldd	r22, Y+37	; 0x25
    1d66:	7e a1       	ldd	r23, Y+38	; 0x26
    1d68:	93 2e       	mov	r9, r19
    1d6a:	29 a5       	ldd	r18, Y+41	; 0x29
    1d6c:	3a a5       	ldd	r19, Y+42	; 0x2a
    1d6e:	c2 0e       	add	r12, r18
    1d70:	d3 1e       	adc	r13, r19
    1d72:	84 e0       	ldi	r24, 0x04	; 4
    1d74:	f5 cd       	rjmp	.-1046   	; 0x1960 <f_open+0x196>
    1d76:	fa 01       	movw	r30, r20
    1d78:	83 85       	ldd	r24, Z+11	; 0x0b
    1d7a:	82 ff       	sbrs	r24, 2
    1d7c:	47 ce       	rjmp	.-882    	; 0x1a0c <f_open+0x242>
    1d7e:	06 c0       	rjmp	.+12     	; 0x1d8c <f_open+0x5c2>
    1d80:	ed 89       	ldd	r30, Y+21	; 0x15
    1d82:	fe 89       	ldd	r31, Y+22	; 0x16
    1d84:	93 85       	ldd	r25, Z+11	; 0x0b
    1d86:	84 30       	cpi	r24, 0x04	; 4
    1d88:	51 f4       	brne	.+20     	; 0x1d9e <f_open+0x5d4>
    1d8a:	3c ce       	rjmp	.-904    	; 0x1a04 <f_open+0x23a>
    1d8c:	e1 14       	cp	r14, r1
    1d8e:	f1 04       	cpc	r15, r1
    1d90:	c9 f4       	brne	.+50     	; 0x1dc4 <f_open+0x5fa>
    1d92:	0c c0       	rjmp	.+24     	; 0x1dac <f_open+0x5e2>
    1d94:	86 e0       	ldi	r24, 0x06	; 6
    1d96:	03 c0       	rjmp	.+6      	; 0x1d9e <f_open+0x5d4>
    1d98:	84 e0       	ldi	r24, 0x04	; 4
    1d9a:	01 c0       	rjmp	.+2      	; 0x1d9e <f_open+0x5d4>
    1d9c:	85 e0       	ldi	r24, 0x05	; 5
    1d9e:	eb 88       	ldd	r14, Y+19	; 0x13
    1da0:	fc 88       	ldd	r15, Y+20	; 0x14
    1da2:	98 2d       	mov	r25, r8
    1da4:	9c 71       	andi	r25, 0x1C	; 28
    1da6:	09 f0       	breq	.+2      	; 0x1daa <f_open+0x5e0>
    1da8:	50 ce       	rjmp	.-864    	; 0x1a4a <f_open+0x280>
    1daa:	6d cf       	rjmp	.-294    	; 0x1c86 <f_open+0x4bc>
    1dac:	18 2d       	mov	r17, r8
    1dae:	1c 71       	andi	r17, 0x1C	; 28
    1db0:	19 f5       	brne	.+70     	; 0x1df8 <f_open+0x62e>
    1db2:	e1 2c       	mov	r14, r1
    1db4:	f1 2c       	mov	r15, r1
    1db6:	86 e0       	ldi	r24, 0x06	; 6
    1db8:	15 c0       	rjmp	.+42     	; 0x1de4 <f_open+0x61a>
    1dba:	18 2d       	mov	r17, r8
    1dbc:	1c 71       	andi	r17, 0x1C	; 28
    1dbe:	09 f0       	breq	.+2      	; 0x1dc2 <f_open+0x5f8>
    1dc0:	47 ce       	rjmp	.-882    	; 0x1a50 <f_open+0x286>
    1dc2:	10 c0       	rjmp	.+32     	; 0x1de4 <f_open+0x61a>
    1dc4:	88 2d       	mov	r24, r8
    1dc6:	8c 71       	andi	r24, 0x1C	; 28
    1dc8:	09 f0       	breq	.+2      	; 0x1dcc <f_open+0x602>
    1dca:	97 ce       	rjmp	.-722    	; 0x1afa <f_open+0x330>
    1dcc:	5e cf       	rjmp	.-324    	; 0x1c8a <f_open+0x4c0>
    1dce:	82 e0       	ldi	r24, 0x02	; 2
    1dd0:	05 c0       	rjmp	.+10     	; 0x1ddc <f_open+0x612>
    1dd2:	82 e0       	ldi	r24, 0x02	; 2
    1dd4:	03 c0       	rjmp	.+6      	; 0x1ddc <f_open+0x612>
    1dd6:	82 e0       	ldi	r24, 0x02	; 2
    1dd8:	01 c0       	rjmp	.+2      	; 0x1ddc <f_open+0x612>
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	88 23       	and	r24, r24
    1dde:	09 f4       	brne	.+2      	; 0x1de2 <f_open+0x618>
    1de0:	5e cf       	rjmp	.-324    	; 0x1c9e <f_open+0x4d4>
    1de2:	18 c0       	rjmp	.+48     	; 0x1e14 <f_open+0x64a>
    1de4:	88 23       	and	r24, r24
    1de6:	09 f4       	brne	.+2      	; 0x1dea <f_open+0x620>
    1de8:	6a cf       	rjmp	.-300    	; 0x1cbe <f_open+0x4f4>
    1dea:	14 c0       	rjmp	.+40     	; 0x1e14 <f_open+0x64a>
    1dec:	eb 88       	ldd	r14, Y+19	; 0x13
    1dee:	fc 88       	ldd	r15, Y+20	; 0x14
    1df0:	86 e0       	ldi	r24, 0x06	; 6
    1df2:	e3 cf       	rjmp	.-58     	; 0x1dba <f_open+0x5f0>
    1df4:	87 e0       	ldi	r24, 0x07	; 7
    1df6:	01 c0       	rjmp	.+2      	; 0x1dfa <f_open+0x630>
    1df8:	86 e0       	ldi	r24, 0x06	; 6
    1dfa:	fd a5       	ldd	r31, Y+45	; 0x2d
    1dfc:	f8 60       	ori	r31, 0x08	; 8
    1dfe:	fd a7       	std	Y+45, r31	; 0x2d
    1e00:	eb 88       	ldd	r14, Y+19	; 0x13
    1e02:	fc 88       	ldd	r15, Y+20	; 0x14
    1e04:	ef cf       	rjmp	.-34     	; 0x1de4 <f_open+0x61a>
    1e06:	87 e0       	ldi	r24, 0x07	; 7
    1e08:	05 c0       	rjmp	.+10     	; 0x1e14 <f_open+0x64a>
    1e0a:	88 e0       	ldi	r24, 0x08	; 8
    1e0c:	03 c0       	rjmp	.+6      	; 0x1e14 <f_open+0x64a>
    1e0e:	84 e0       	ldi	r24, 0x04	; 4
    1e10:	01 c0       	rjmp	.+2      	; 0x1e14 <f_open+0x64a>
    1e12:	87 e0       	ldi	r24, 0x07	; 7
    1e14:	ae 96       	adiw	r28, 0x2e	; 46
    1e16:	0f b6       	in	r0, 0x3f	; 63
    1e18:	f8 94       	cli
    1e1a:	de bf       	out	0x3e, r29	; 62
    1e1c:	0f be       	out	0x3f, r0	; 63
    1e1e:	cd bf       	out	0x3d, r28	; 61
    1e20:	df 91       	pop	r29
    1e22:	cf 91       	pop	r28
    1e24:	1f 91       	pop	r17
    1e26:	0f 91       	pop	r16
    1e28:	ff 90       	pop	r15
    1e2a:	ef 90       	pop	r14
    1e2c:	df 90       	pop	r13
    1e2e:	cf 90       	pop	r12
    1e30:	bf 90       	pop	r11
    1e32:	af 90       	pop	r10
    1e34:	9f 90       	pop	r9
    1e36:	8f 90       	pop	r8
    1e38:	7f 90       	pop	r7
    1e3a:	6f 90       	pop	r6
    1e3c:	5f 90       	pop	r5
    1e3e:	4f 90       	pop	r4
    1e40:	3f 90       	pop	r3
    1e42:	2f 90       	pop	r2
    1e44:	08 95       	ret

00001e46 <f_read>:
    1e46:	2f 92       	push	r2
    1e48:	3f 92       	push	r3
    1e4a:	4f 92       	push	r4
    1e4c:	5f 92       	push	r5
    1e4e:	6f 92       	push	r6
    1e50:	7f 92       	push	r7
    1e52:	8f 92       	push	r8
    1e54:	9f 92       	push	r9
    1e56:	af 92       	push	r10
    1e58:	bf 92       	push	r11
    1e5a:	cf 92       	push	r12
    1e5c:	df 92       	push	r13
    1e5e:	ef 92       	push	r14
    1e60:	ff 92       	push	r15
    1e62:	0f 93       	push	r16
    1e64:	1f 93       	push	r17
    1e66:	cf 93       	push	r28
    1e68:	df 93       	push	r29
    1e6a:	ec 01       	movw	r28, r24
    1e6c:	4b 01       	movw	r8, r22
    1e6e:	6a 01       	movw	r12, r20
    1e70:	59 01       	movw	r10, r18
    1e72:	f9 01       	movw	r30, r18
    1e74:	11 82       	std	Z+1, r1	; 0x01
    1e76:	10 82       	st	Z, r1
    1e78:	0e 94 51 03 	call	0x6a2	; 0x6a2 <validate>
    1e7c:	81 11       	cpse	r24, r1
    1e7e:	0c c1       	rjmp	.+536    	; 0x2098 <f_read+0x252>
    1e80:	8d 81       	ldd	r24, Y+5	; 0x05
    1e82:	81 11       	cpse	r24, r1
    1e84:	09 c1       	rjmp	.+530    	; 0x2098 <f_read+0x252>
    1e86:	8c 81       	ldd	r24, Y+4	; 0x04
    1e88:	80 ff       	sbrs	r24, 0
    1e8a:	03 c1       	rjmp	.+518    	; 0x2092 <f_read+0x24c>
    1e8c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e8e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e90:	ac 85       	ldd	r26, Y+12	; 0x0c
    1e92:	bd 85       	ldd	r27, Y+13	; 0x0d
    1e94:	4e 81       	ldd	r20, Y+6	; 0x06
    1e96:	5f 81       	ldd	r21, Y+7	; 0x07
    1e98:	68 85       	ldd	r22, Y+8	; 0x08
    1e9a:	79 85       	ldd	r23, Y+9	; 0x09
    1e9c:	84 1b       	sub	r24, r20
    1e9e:	95 0b       	sbc	r25, r21
    1ea0:	a6 0b       	sbc	r26, r22
    1ea2:	b7 0b       	sbc	r27, r23
    1ea4:	a6 01       	movw	r20, r12
    1ea6:	60 e0       	ldi	r22, 0x00	; 0
    1ea8:	70 e0       	ldi	r23, 0x00	; 0
    1eaa:	84 17       	cp	r24, r20
    1eac:	95 07       	cpc	r25, r21
    1eae:	a6 07       	cpc	r26, r22
    1eb0:	b7 07       	cpc	r27, r23
    1eb2:	08 f4       	brcc	.+2      	; 0x1eb6 <f_read+0x70>
    1eb4:	6c 01       	movw	r12, r24
    1eb6:	c1 14       	cp	r12, r1
    1eb8:	d1 04       	cpc	r13, r1
    1eba:	09 f4       	brne	.+2      	; 0x1ebe <f_read+0x78>
    1ebc:	ec c0       	rjmp	.+472    	; 0x2096 <f_read+0x250>
    1ebe:	4e 81       	ldd	r20, Y+6	; 0x06
    1ec0:	5f 81       	ldd	r21, Y+7	; 0x07
    1ec2:	68 85       	ldd	r22, Y+8	; 0x08
    1ec4:	79 85       	ldd	r23, Y+9	; 0x09
    1ec6:	db 01       	movw	r26, r22
    1ec8:	ca 01       	movw	r24, r20
    1eca:	91 70       	andi	r25, 0x01	; 1
    1ecc:	aa 27       	eor	r26, r26
    1ece:	bb 27       	eor	r27, r27
    1ed0:	89 2b       	or	r24, r25
    1ed2:	8a 2b       	or	r24, r26
    1ed4:	8b 2b       	or	r24, r27
    1ed6:	09 f0       	breq	.+2      	; 0x1eda <f_read+0x94>
    1ed8:	98 c0       	rjmp	.+304    	; 0x200a <f_read+0x1c4>
    1eda:	e8 81       	ld	r30, Y
    1edc:	f9 81       	ldd	r31, Y+1	; 0x01
    1ede:	12 81       	ldd	r17, Z+2	; 0x02
    1ee0:	11 50       	subi	r17, 0x01	; 1
    1ee2:	db 01       	movw	r26, r22
    1ee4:	ca 01       	movw	r24, r20
    1ee6:	07 2e       	mov	r0, r23
    1ee8:	79 e0       	ldi	r23, 0x09	; 9
    1eea:	b6 95       	lsr	r27
    1eec:	a7 95       	ror	r26
    1eee:	97 95       	ror	r25
    1ef0:	87 95       	ror	r24
    1ef2:	7a 95       	dec	r23
    1ef4:	d1 f7       	brne	.-12     	; 0x1eea <f_read+0xa4>
    1ef6:	70 2d       	mov	r23, r0
    1ef8:	18 23       	and	r17, r24
    1efa:	29 f5       	brne	.+74     	; 0x1f46 <f_read+0x100>
    1efc:	45 2b       	or	r20, r21
    1efe:	46 2b       	or	r20, r22
    1f00:	47 2b       	or	r20, r23
    1f02:	29 f4       	brne	.+10     	; 0x1f0e <f_read+0xc8>
    1f04:	6e 85       	ldd	r22, Y+14	; 0x0e
    1f06:	7f 85       	ldd	r23, Y+15	; 0x0f
    1f08:	88 89       	ldd	r24, Y+16	; 0x10
    1f0a:	99 89       	ldd	r25, Y+17	; 0x11
    1f0c:	07 c0       	rjmp	.+14     	; 0x1f1c <f_read+0xd6>
    1f0e:	4a 89       	ldd	r20, Y+18	; 0x12
    1f10:	5b 89       	ldd	r21, Y+19	; 0x13
    1f12:	6c 89       	ldd	r22, Y+20	; 0x14
    1f14:	7d 89       	ldd	r23, Y+21	; 0x15
    1f16:	cf 01       	movw	r24, r30
    1f18:	0e 94 8a 06 	call	0xd14	; 0xd14 <get_fat>
    1f1c:	62 30       	cpi	r22, 0x02	; 2
    1f1e:	71 05       	cpc	r23, r1
    1f20:	81 05       	cpc	r24, r1
    1f22:	91 05       	cpc	r25, r1
    1f24:	18 f4       	brcc	.+6      	; 0x1f2c <f_read+0xe6>
    1f26:	82 e0       	ldi	r24, 0x02	; 2
    1f28:	8d 83       	std	Y+5, r24	; 0x05
    1f2a:	b6 c0       	rjmp	.+364    	; 0x2098 <f_read+0x252>
    1f2c:	6f 3f       	cpi	r22, 0xFF	; 255
    1f2e:	ff ef       	ldi	r31, 0xFF	; 255
    1f30:	7f 07       	cpc	r23, r31
    1f32:	8f 07       	cpc	r24, r31
    1f34:	9f 07       	cpc	r25, r31
    1f36:	19 f4       	brne	.+6      	; 0x1f3e <f_read+0xf8>
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	8d 83       	std	Y+5, r24	; 0x05
    1f3c:	ad c0       	rjmp	.+346    	; 0x2098 <f_read+0x252>
    1f3e:	6a 8b       	std	Y+18, r22	; 0x12
    1f40:	7b 8b       	std	Y+19, r23	; 0x13
    1f42:	8c 8b       	std	Y+20, r24	; 0x14
    1f44:	9d 8b       	std	Y+21, r25	; 0x15
    1f46:	28 80       	ld	r2, Y
    1f48:	39 80       	ldd	r3, Y+1	; 0x01
    1f4a:	4a 89       	ldd	r20, Y+18	; 0x12
    1f4c:	5b 89       	ldd	r21, Y+19	; 0x13
    1f4e:	6c 89       	ldd	r22, Y+20	; 0x14
    1f50:	7d 89       	ldd	r23, Y+21	; 0x15
    1f52:	c1 01       	movw	r24, r2
    1f54:	0e 94 62 06 	call	0xcc4	; 0xcc4 <clust2sect>
    1f58:	61 15       	cp	r22, r1
    1f5a:	71 05       	cpc	r23, r1
    1f5c:	81 05       	cpc	r24, r1
    1f5e:	91 05       	cpc	r25, r1
    1f60:	19 f4       	brne	.+6      	; 0x1f68 <f_read+0x122>
    1f62:	82 e0       	ldi	r24, 0x02	; 2
    1f64:	8d 83       	std	Y+5, r24	; 0x05
    1f66:	98 c0       	rjmp	.+304    	; 0x2098 <f_read+0x252>
    1f68:	2b 01       	movw	r4, r22
    1f6a:	3c 01       	movw	r6, r24
    1f6c:	41 0e       	add	r4, r17
    1f6e:	51 1c       	adc	r5, r1
    1f70:	61 1c       	adc	r6, r1
    1f72:	71 1c       	adc	r7, r1
    1f74:	76 01       	movw	r14, r12
    1f76:	ef 2c       	mov	r14, r15
    1f78:	ff 24       	eor	r15, r15
    1f7a:	e6 94       	lsr	r14
    1f7c:	e1 14       	cp	r14, r1
    1f7e:	f1 04       	cpc	r15, r1
    1f80:	09 f4       	brne	.+2      	; 0x1f84 <f_read+0x13e>
    1f82:	3f c0       	rjmp	.+126    	; 0x2002 <f_read+0x1bc>
    1f84:	f1 01       	movw	r30, r2
    1f86:	42 81       	ldd	r20, Z+2	; 0x02
    1f88:	24 2f       	mov	r18, r20
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	c7 01       	movw	r24, r14
    1f8e:	81 0f       	add	r24, r17
    1f90:	91 1d       	adc	r25, r1
    1f92:	28 17       	cp	r18, r24
    1f94:	39 07       	cpc	r19, r25
    1f96:	18 f4       	brcc	.+6      	; 0x1f9e <f_read+0x158>
    1f98:	79 01       	movw	r14, r18
    1f9a:	e1 1a       	sub	r14, r17
    1f9c:	f1 08       	sbc	r15, r1
    1f9e:	87 01       	movw	r16, r14
    1fa0:	a3 01       	movw	r20, r6
    1fa2:	92 01       	movw	r18, r4
    1fa4:	b4 01       	movw	r22, r8
    1fa6:	f1 01       	movw	r30, r2
    1fa8:	81 81       	ldd	r24, Z+1	; 0x01
    1faa:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <disk_read>
    1fae:	88 23       	and	r24, r24
    1fb0:	19 f0       	breq	.+6      	; 0x1fb8 <f_read+0x172>
    1fb2:	81 e0       	ldi	r24, 0x01	; 1
    1fb4:	8d 83       	std	Y+5, r24	; 0x05
    1fb6:	70 c0       	rjmp	.+224    	; 0x2098 <f_read+0x252>
    1fb8:	e8 81       	ld	r30, Y
    1fba:	f9 81       	ldd	r31, Y+1	; 0x01
    1fbc:	84 81       	ldd	r24, Z+4	; 0x04
    1fbe:	88 23       	and	r24, r24
    1fc0:	e1 f0       	breq	.+56     	; 0x1ffa <f_read+0x1b4>
    1fc2:	82 a5       	ldd	r24, Z+42	; 0x2a
    1fc4:	93 a5       	ldd	r25, Z+43	; 0x2b
    1fc6:	a4 a5       	ldd	r26, Z+44	; 0x2c
    1fc8:	b5 a5       	ldd	r27, Z+45	; 0x2d
    1fca:	84 19       	sub	r24, r4
    1fcc:	95 09       	sbc	r25, r5
    1fce:	a6 09       	sbc	r26, r6
    1fd0:	b7 09       	sbc	r27, r7
    1fd2:	a7 01       	movw	r20, r14
    1fd4:	60 e0       	ldi	r22, 0x00	; 0
    1fd6:	70 e0       	ldi	r23, 0x00	; 0
    1fd8:	84 17       	cp	r24, r20
    1fda:	95 07       	cpc	r25, r21
    1fdc:	a6 07       	cpc	r26, r22
    1fde:	b7 07       	cpc	r27, r23
    1fe0:	60 f4       	brcc	.+24     	; 0x1ffa <f_read+0x1b4>
    1fe2:	bf 01       	movw	r22, r30
    1fe4:	62 5d       	subi	r22, 0xD2	; 210
    1fe6:	7f 4f       	sbci	r23, 0xFF	; 255
    1fe8:	98 2f       	mov	r25, r24
    1fea:	88 27       	eor	r24, r24
    1fec:	99 0f       	add	r25, r25
    1fee:	40 e0       	ldi	r20, 0x00	; 0
    1ff0:	52 e0       	ldi	r21, 0x02	; 2
    1ff2:	88 0d       	add	r24, r8
    1ff4:	99 1d       	adc	r25, r9
    1ff6:	0e 94 07 02 	call	0x40e	; 0x40e <mem_cpy>
    1ffa:	fe 2c       	mov	r15, r14
    1ffc:	ee 24       	eor	r14, r14
    1ffe:	ff 0c       	add	r15, r15
    2000:	2d c0       	rjmp	.+90     	; 0x205c <f_read+0x216>
    2002:	4e 8a       	std	Y+22, r4	; 0x16
    2004:	5f 8a       	std	Y+23, r5	; 0x17
    2006:	68 8e       	std	Y+24, r6	; 0x18
    2008:	79 8e       	std	Y+25, r7	; 0x19
    200a:	8e 81       	ldd	r24, Y+6	; 0x06
    200c:	9f 81       	ldd	r25, Y+7	; 0x07
    200e:	91 70       	andi	r25, 0x01	; 1
    2010:	20 e0       	ldi	r18, 0x00	; 0
    2012:	32 e0       	ldi	r19, 0x02	; 2
    2014:	79 01       	movw	r14, r18
    2016:	e8 1a       	sub	r14, r24
    2018:	f9 0a       	sbc	r15, r25
    201a:	ce 14       	cp	r12, r14
    201c:	df 04       	cpc	r13, r15
    201e:	08 f4       	brcc	.+2      	; 0x2022 <f_read+0x1dc>
    2020:	76 01       	movw	r14, r12
    2022:	4e 89       	ldd	r20, Y+22	; 0x16
    2024:	5f 89       	ldd	r21, Y+23	; 0x17
    2026:	68 8d       	ldd	r22, Y+24	; 0x18
    2028:	79 8d       	ldd	r23, Y+25	; 0x19
    202a:	88 81       	ld	r24, Y
    202c:	99 81       	ldd	r25, Y+1	; 0x01
    202e:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <move_window>
    2032:	88 23       	and	r24, r24
    2034:	19 f0       	breq	.+6      	; 0x203c <f_read+0x1f6>
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	8d 83       	std	Y+5, r24	; 0x05
    203a:	2e c0       	rjmp	.+92     	; 0x2098 <f_read+0x252>
    203c:	8e 81       	ldd	r24, Y+6	; 0x06
    203e:	9f 81       	ldd	r25, Y+7	; 0x07
    2040:	a8 85       	ldd	r26, Y+8	; 0x08
    2042:	b9 85       	ldd	r27, Y+9	; 0x09
    2044:	91 70       	andi	r25, 0x01	; 1
    2046:	aa 27       	eor	r26, r26
    2048:	bb 27       	eor	r27, r27
    204a:	8e 96       	adiw	r24, 0x2e	; 46
    204c:	68 81       	ld	r22, Y
    204e:	79 81       	ldd	r23, Y+1	; 0x01
    2050:	68 0f       	add	r22, r24
    2052:	79 1f       	adc	r23, r25
    2054:	a7 01       	movw	r20, r14
    2056:	c4 01       	movw	r24, r8
    2058:	0e 94 07 02 	call	0x40e	; 0x40e <mem_cpy>
    205c:	8e 0c       	add	r8, r14
    205e:	9f 1c       	adc	r9, r15
    2060:	8e 81       	ldd	r24, Y+6	; 0x06
    2062:	9f 81       	ldd	r25, Y+7	; 0x07
    2064:	a8 85       	ldd	r26, Y+8	; 0x08
    2066:	b9 85       	ldd	r27, Y+9	; 0x09
    2068:	8e 0d       	add	r24, r14
    206a:	9f 1d       	adc	r25, r15
    206c:	a1 1d       	adc	r26, r1
    206e:	b1 1d       	adc	r27, r1
    2070:	8e 83       	std	Y+6, r24	; 0x06
    2072:	9f 83       	std	Y+7, r25	; 0x07
    2074:	a8 87       	std	Y+8, r26	; 0x08
    2076:	b9 87       	std	Y+9, r27	; 0x09
    2078:	f5 01       	movw	r30, r10
    207a:	80 81       	ld	r24, Z
    207c:	91 81       	ldd	r25, Z+1	; 0x01
    207e:	8e 0d       	add	r24, r14
    2080:	9f 1d       	adc	r25, r15
    2082:	91 83       	std	Z+1, r25	; 0x01
    2084:	80 83       	st	Z, r24
    2086:	ce 18       	sub	r12, r14
    2088:	df 08       	sbc	r13, r15
    208a:	09 f0       	breq	.+2      	; 0x208e <f_read+0x248>
    208c:	18 cf       	rjmp	.-464    	; 0x1ebe <f_read+0x78>
    208e:	80 e0       	ldi	r24, 0x00	; 0
    2090:	03 c0       	rjmp	.+6      	; 0x2098 <f_read+0x252>
    2092:	87 e0       	ldi	r24, 0x07	; 7
    2094:	01 c0       	rjmp	.+2      	; 0x2098 <f_read+0x252>
    2096:	80 e0       	ldi	r24, 0x00	; 0
    2098:	df 91       	pop	r29
    209a:	cf 91       	pop	r28
    209c:	1f 91       	pop	r17
    209e:	0f 91       	pop	r16
    20a0:	ff 90       	pop	r15
    20a2:	ef 90       	pop	r14
    20a4:	df 90       	pop	r13
    20a6:	cf 90       	pop	r12
    20a8:	bf 90       	pop	r11
    20aa:	af 90       	pop	r10
    20ac:	9f 90       	pop	r9
    20ae:	8f 90       	pop	r8
    20b0:	7f 90       	pop	r7
    20b2:	6f 90       	pop	r6
    20b4:	5f 90       	pop	r5
    20b6:	4f 90       	pop	r4
    20b8:	3f 90       	pop	r3
    20ba:	2f 90       	pop	r2
    20bc:	08 95       	ret

000020be <f_write>:
    20be:	2f 92       	push	r2
    20c0:	3f 92       	push	r3
    20c2:	4f 92       	push	r4
    20c4:	5f 92       	push	r5
    20c6:	6f 92       	push	r6
    20c8:	7f 92       	push	r7
    20ca:	8f 92       	push	r8
    20cc:	9f 92       	push	r9
    20ce:	af 92       	push	r10
    20d0:	bf 92       	push	r11
    20d2:	cf 92       	push	r12
    20d4:	df 92       	push	r13
    20d6:	ef 92       	push	r14
    20d8:	ff 92       	push	r15
    20da:	0f 93       	push	r16
    20dc:	1f 93       	push	r17
    20de:	cf 93       	push	r28
    20e0:	df 93       	push	r29
    20e2:	ec 01       	movw	r28, r24
    20e4:	4b 01       	movw	r8, r22
    20e6:	6a 01       	movw	r12, r20
    20e8:	59 01       	movw	r10, r18
    20ea:	f9 01       	movw	r30, r18
    20ec:	11 82       	std	Z+1, r1	; 0x01
    20ee:	10 82       	st	Z, r1
    20f0:	0e 94 51 03 	call	0x6a2	; 0x6a2 <validate>
    20f4:	81 11       	cpse	r24, r1
    20f6:	6d c1       	rjmp	.+730    	; 0x23d2 <f_write+0x314>
    20f8:	8d 81       	ldd	r24, Y+5	; 0x05
    20fa:	81 11       	cpse	r24, r1
    20fc:	6a c1       	rjmp	.+724    	; 0x23d2 <f_write+0x314>
    20fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2100:	81 ff       	sbrs	r24, 1
    2102:	66 c1       	rjmp	.+716    	; 0x23d0 <f_write+0x312>
    2104:	8e 81       	ldd	r24, Y+6	; 0x06
    2106:	9f 81       	ldd	r25, Y+7	; 0x07
    2108:	a8 85       	ldd	r26, Y+8	; 0x08
    210a:	b9 85       	ldd	r27, Y+9	; 0x09
    210c:	ac 01       	movw	r20, r24
    210e:	bd 01       	movw	r22, r26
    2110:	4c 0d       	add	r20, r12
    2112:	5d 1d       	adc	r21, r13
    2114:	61 1d       	adc	r22, r1
    2116:	71 1d       	adc	r23, r1
    2118:	48 17       	cp	r20, r24
    211a:	59 07       	cpc	r21, r25
    211c:	6a 07       	cpc	r22, r26
    211e:	7b 07       	cpc	r23, r27
    2120:	08 f4       	brcc	.+2      	; 0x2124 <f_write+0x66>
    2122:	40 c1       	rjmp	.+640    	; 0x23a4 <f_write+0x2e6>
    2124:	c1 14       	cp	r12, r1
    2126:	d1 04       	cpc	r13, r1
    2128:	09 f4       	brne	.+2      	; 0x212c <f_write+0x6e>
    212a:	3c c1       	rjmp	.+632    	; 0x23a4 <f_write+0x2e6>
    212c:	4e 81       	ldd	r20, Y+6	; 0x06
    212e:	5f 81       	ldd	r21, Y+7	; 0x07
    2130:	68 85       	ldd	r22, Y+8	; 0x08
    2132:	79 85       	ldd	r23, Y+9	; 0x09
    2134:	db 01       	movw	r26, r22
    2136:	ca 01       	movw	r24, r20
    2138:	91 70       	andi	r25, 0x01	; 1
    213a:	aa 27       	eor	r26, r26
    213c:	bb 27       	eor	r27, r27
    213e:	89 2b       	or	r24, r25
    2140:	8a 2b       	or	r24, r26
    2142:	8b 2b       	or	r24, r27
    2144:	09 f0       	breq	.+2      	; 0x2148 <f_write+0x8a>
    2146:	e8 c0       	rjmp	.+464    	; 0x2318 <f_write+0x25a>
    2148:	e8 81       	ld	r30, Y
    214a:	f9 81       	ldd	r31, Y+1	; 0x01
    214c:	12 81       	ldd	r17, Z+2	; 0x02
    214e:	11 50       	subi	r17, 0x01	; 1
    2150:	db 01       	movw	r26, r22
    2152:	ca 01       	movw	r24, r20
    2154:	07 2e       	mov	r0, r23
    2156:	79 e0       	ldi	r23, 0x09	; 9
    2158:	b6 95       	lsr	r27
    215a:	a7 95       	ror	r26
    215c:	97 95       	ror	r25
    215e:	87 95       	ror	r24
    2160:	7a 95       	dec	r23
    2162:	d1 f7       	brne	.-12     	; 0x2158 <f_write+0x9a>
    2164:	70 2d       	mov	r23, r0
    2166:	18 23       	and	r17, r24
    2168:	09 f0       	breq	.+2      	; 0x216c <f_write+0xae>
    216a:	42 c0       	rjmp	.+132    	; 0x21f0 <f_write+0x132>
    216c:	45 2b       	or	r20, r21
    216e:	46 2b       	or	r20, r22
    2170:	47 2b       	or	r20, r23
    2172:	81 f4       	brne	.+32     	; 0x2194 <f_write+0xd6>
    2174:	6e 85       	ldd	r22, Y+14	; 0x0e
    2176:	7f 85       	ldd	r23, Y+15	; 0x0f
    2178:	88 89       	ldd	r24, Y+16	; 0x10
    217a:	99 89       	ldd	r25, Y+17	; 0x11
    217c:	61 15       	cp	r22, r1
    217e:	71 05       	cpc	r23, r1
    2180:	81 05       	cpc	r24, r1
    2182:	91 05       	cpc	r25, r1
    2184:	a1 f4       	brne	.+40     	; 0x21ae <f_write+0xf0>
    2186:	40 e0       	ldi	r20, 0x00	; 0
    2188:	50 e0       	ldi	r21, 0x00	; 0
    218a:	ba 01       	movw	r22, r20
    218c:	cf 01       	movw	r24, r30
    218e:	0e 94 55 09 	call	0x12aa	; 0x12aa <create_chain>
    2192:	07 c0       	rjmp	.+14     	; 0x21a2 <f_write+0xe4>
    2194:	4a 89       	ldd	r20, Y+18	; 0x12
    2196:	5b 89       	ldd	r21, Y+19	; 0x13
    2198:	6c 89       	ldd	r22, Y+20	; 0x14
    219a:	7d 89       	ldd	r23, Y+21	; 0x15
    219c:	cf 01       	movw	r24, r30
    219e:	0e 94 55 09 	call	0x12aa	; 0x12aa <create_chain>
    21a2:	61 15       	cp	r22, r1
    21a4:	71 05       	cpc	r23, r1
    21a6:	81 05       	cpc	r24, r1
    21a8:	91 05       	cpc	r25, r1
    21aa:	09 f4       	brne	.+2      	; 0x21ae <f_write+0xf0>
    21ac:	fb c0       	rjmp	.+502    	; 0x23a4 <f_write+0x2e6>
    21ae:	61 30       	cpi	r22, 0x01	; 1
    21b0:	71 05       	cpc	r23, r1
    21b2:	81 05       	cpc	r24, r1
    21b4:	91 05       	cpc	r25, r1
    21b6:	19 f4       	brne	.+6      	; 0x21be <f_write+0x100>
    21b8:	82 e0       	ldi	r24, 0x02	; 2
    21ba:	8d 83       	std	Y+5, r24	; 0x05
    21bc:	0a c1       	rjmp	.+532    	; 0x23d2 <f_write+0x314>
    21be:	6f 3f       	cpi	r22, 0xFF	; 255
    21c0:	ff ef       	ldi	r31, 0xFF	; 255
    21c2:	7f 07       	cpc	r23, r31
    21c4:	8f 07       	cpc	r24, r31
    21c6:	9f 07       	cpc	r25, r31
    21c8:	19 f4       	brne	.+6      	; 0x21d0 <f_write+0x112>
    21ca:	81 e0       	ldi	r24, 0x01	; 1
    21cc:	8d 83       	std	Y+5, r24	; 0x05
    21ce:	01 c1       	rjmp	.+514    	; 0x23d2 <f_write+0x314>
    21d0:	6a 8b       	std	Y+18, r22	; 0x12
    21d2:	7b 8b       	std	Y+19, r23	; 0x13
    21d4:	8c 8b       	std	Y+20, r24	; 0x14
    21d6:	9d 8b       	std	Y+21, r25	; 0x15
    21d8:	4e 84       	ldd	r4, Y+14	; 0x0e
    21da:	5f 84       	ldd	r5, Y+15	; 0x0f
    21dc:	68 88       	ldd	r6, Y+16	; 0x10
    21de:	79 88       	ldd	r7, Y+17	; 0x11
    21e0:	45 28       	or	r4, r5
    21e2:	46 28       	or	r4, r6
    21e4:	47 28       	or	r4, r7
    21e6:	21 f4       	brne	.+8      	; 0x21f0 <f_write+0x132>
    21e8:	6e 87       	std	Y+14, r22	; 0x0e
    21ea:	7f 87       	std	Y+15, r23	; 0x0f
    21ec:	88 8b       	std	Y+16, r24	; 0x10
    21ee:	99 8b       	std	Y+17, r25	; 0x11
    21f0:	e8 81       	ld	r30, Y
    21f2:	f9 81       	ldd	r31, Y+1	; 0x01
    21f4:	42 a5       	ldd	r20, Z+42	; 0x2a
    21f6:	53 a5       	ldd	r21, Z+43	; 0x2b
    21f8:	64 a5       	ldd	r22, Z+44	; 0x2c
    21fa:	75 a5       	ldd	r23, Z+45	; 0x2d
    21fc:	8e 89       	ldd	r24, Y+22	; 0x16
    21fe:	9f 89       	ldd	r25, Y+23	; 0x17
    2200:	a8 8d       	ldd	r26, Y+24	; 0x18
    2202:	b9 8d       	ldd	r27, Y+25	; 0x19
    2204:	48 17       	cp	r20, r24
    2206:	59 07       	cpc	r21, r25
    2208:	6a 07       	cpc	r22, r26
    220a:	7b 07       	cpc	r23, r27
    220c:	41 f4       	brne	.+16     	; 0x221e <f_write+0x160>
    220e:	cf 01       	movw	r24, r30
    2210:	0e 94 6d 02 	call	0x4da	; 0x4da <sync_window>
    2214:	88 23       	and	r24, r24
    2216:	19 f0       	breq	.+6      	; 0x221e <f_write+0x160>
    2218:	81 e0       	ldi	r24, 0x01	; 1
    221a:	8d 83       	std	Y+5, r24	; 0x05
    221c:	da c0       	rjmp	.+436    	; 0x23d2 <f_write+0x314>
    221e:	28 80       	ld	r2, Y
    2220:	39 80       	ldd	r3, Y+1	; 0x01
    2222:	4a 89       	ldd	r20, Y+18	; 0x12
    2224:	5b 89       	ldd	r21, Y+19	; 0x13
    2226:	6c 89       	ldd	r22, Y+20	; 0x14
    2228:	7d 89       	ldd	r23, Y+21	; 0x15
    222a:	c1 01       	movw	r24, r2
    222c:	0e 94 62 06 	call	0xcc4	; 0xcc4 <clust2sect>
    2230:	61 15       	cp	r22, r1
    2232:	71 05       	cpc	r23, r1
    2234:	81 05       	cpc	r24, r1
    2236:	91 05       	cpc	r25, r1
    2238:	19 f4       	brne	.+6      	; 0x2240 <f_write+0x182>
    223a:	82 e0       	ldi	r24, 0x02	; 2
    223c:	8d 83       	std	Y+5, r24	; 0x05
    223e:	c9 c0       	rjmp	.+402    	; 0x23d2 <f_write+0x314>
    2240:	2b 01       	movw	r4, r22
    2242:	3c 01       	movw	r6, r24
    2244:	41 0e       	add	r4, r17
    2246:	51 1c       	adc	r5, r1
    2248:	61 1c       	adc	r6, r1
    224a:	71 1c       	adc	r7, r1
    224c:	76 01       	movw	r14, r12
    224e:	ef 2c       	mov	r14, r15
    2250:	ff 24       	eor	r15, r15
    2252:	e6 94       	lsr	r14
    2254:	e1 14       	cp	r14, r1
    2256:	f1 04       	cpc	r15, r1
    2258:	09 f4       	brne	.+2      	; 0x225c <f_write+0x19e>
    225a:	3f c0       	rjmp	.+126    	; 0x22da <f_write+0x21c>
    225c:	f1 01       	movw	r30, r2
    225e:	42 81       	ldd	r20, Z+2	; 0x02
    2260:	24 2f       	mov	r18, r20
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	c7 01       	movw	r24, r14
    2266:	81 0f       	add	r24, r17
    2268:	91 1d       	adc	r25, r1
    226a:	28 17       	cp	r18, r24
    226c:	39 07       	cpc	r19, r25
    226e:	18 f4       	brcc	.+6      	; 0x2276 <f_write+0x1b8>
    2270:	79 01       	movw	r14, r18
    2272:	e1 1a       	sub	r14, r17
    2274:	f1 08       	sbc	r15, r1
    2276:	87 01       	movw	r16, r14
    2278:	a3 01       	movw	r20, r6
    227a:	92 01       	movw	r18, r4
    227c:	b4 01       	movw	r22, r8
    227e:	f1 01       	movw	r30, r2
    2280:	81 81       	ldd	r24, Z+1	; 0x01
    2282:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <disk_write>
    2286:	88 23       	and	r24, r24
    2288:	19 f0       	breq	.+6      	; 0x2290 <f_write+0x1d2>
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	8d 83       	std	Y+5, r24	; 0x05
    228e:	a1 c0       	rjmp	.+322    	; 0x23d2 <f_write+0x314>
    2290:	e8 81       	ld	r30, Y
    2292:	f9 81       	ldd	r31, Y+1	; 0x01
    2294:	82 a5       	ldd	r24, Z+42	; 0x2a
    2296:	93 a5       	ldd	r25, Z+43	; 0x2b
    2298:	a4 a5       	ldd	r26, Z+44	; 0x2c
    229a:	b5 a5       	ldd	r27, Z+45	; 0x2d
    229c:	84 19       	sub	r24, r4
    229e:	95 09       	sbc	r25, r5
    22a0:	a6 09       	sbc	r26, r6
    22a2:	b7 09       	sbc	r27, r7
    22a4:	a7 01       	movw	r20, r14
    22a6:	60 e0       	ldi	r22, 0x00	; 0
    22a8:	70 e0       	ldi	r23, 0x00	; 0
    22aa:	84 17       	cp	r24, r20
    22ac:	95 07       	cpc	r25, r21
    22ae:	a6 07       	cpc	r26, r22
    22b0:	b7 07       	cpc	r27, r23
    22b2:	78 f4       	brcc	.+30     	; 0x22d2 <f_write+0x214>
    22b4:	98 2f       	mov	r25, r24
    22b6:	88 27       	eor	r24, r24
    22b8:	99 0f       	add	r25, r25
    22ba:	b4 01       	movw	r22, r8
    22bc:	68 0f       	add	r22, r24
    22be:	79 1f       	adc	r23, r25
    22c0:	40 e0       	ldi	r20, 0x00	; 0
    22c2:	52 e0       	ldi	r21, 0x02	; 2
    22c4:	cf 01       	movw	r24, r30
    22c6:	8e 96       	adiw	r24, 0x2e	; 46
    22c8:	0e 94 07 02 	call	0x40e	; 0x40e <mem_cpy>
    22cc:	e8 81       	ld	r30, Y
    22ce:	f9 81       	ldd	r31, Y+1	; 0x01
    22d0:	14 82       	std	Z+4, r1	; 0x04
    22d2:	fe 2c       	mov	r15, r14
    22d4:	ee 24       	eor	r14, r14
    22d6:	ff 0c       	add	r15, r15
    22d8:	4c c0       	rjmp	.+152    	; 0x2372 <f_write+0x2b4>
    22da:	4e 81       	ldd	r20, Y+6	; 0x06
    22dc:	5f 81       	ldd	r21, Y+7	; 0x07
    22de:	68 85       	ldd	r22, Y+8	; 0x08
    22e0:	79 85       	ldd	r23, Y+9	; 0x09
    22e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    22e4:	9b 85       	ldd	r25, Y+11	; 0x0b
    22e6:	ac 85       	ldd	r26, Y+12	; 0x0c
    22e8:	bd 85       	ldd	r27, Y+13	; 0x0d
    22ea:	48 17       	cp	r20, r24
    22ec:	59 07       	cpc	r21, r25
    22ee:	6a 07       	cpc	r22, r26
    22f0:	7b 07       	cpc	r23, r27
    22f2:	70 f0       	brcs	.+28     	; 0x2310 <f_write+0x252>
    22f4:	c1 01       	movw	r24, r2
    22f6:	0e 94 6d 02 	call	0x4da	; 0x4da <sync_window>
    22fa:	88 23       	and	r24, r24
    22fc:	19 f0       	breq	.+6      	; 0x2304 <f_write+0x246>
    22fe:	81 e0       	ldi	r24, 0x01	; 1
    2300:	8d 83       	std	Y+5, r24	; 0x05
    2302:	67 c0       	rjmp	.+206    	; 0x23d2 <f_write+0x314>
    2304:	e8 81       	ld	r30, Y
    2306:	f9 81       	ldd	r31, Y+1	; 0x01
    2308:	42 a6       	std	Z+42, r4	; 0x2a
    230a:	53 a6       	std	Z+43, r5	; 0x2b
    230c:	64 a6       	std	Z+44, r6	; 0x2c
    230e:	75 a6       	std	Z+45, r7	; 0x2d
    2310:	4e 8a       	std	Y+22, r4	; 0x16
    2312:	5f 8a       	std	Y+23, r5	; 0x17
    2314:	68 8e       	std	Y+24, r6	; 0x18
    2316:	79 8e       	std	Y+25, r7	; 0x19
    2318:	8e 81       	ldd	r24, Y+6	; 0x06
    231a:	9f 81       	ldd	r25, Y+7	; 0x07
    231c:	91 70       	andi	r25, 0x01	; 1
    231e:	20 e0       	ldi	r18, 0x00	; 0
    2320:	32 e0       	ldi	r19, 0x02	; 2
    2322:	79 01       	movw	r14, r18
    2324:	e8 1a       	sub	r14, r24
    2326:	f9 0a       	sbc	r15, r25
    2328:	ce 14       	cp	r12, r14
    232a:	df 04       	cpc	r13, r15
    232c:	08 f4       	brcc	.+2      	; 0x2330 <f_write+0x272>
    232e:	76 01       	movw	r14, r12
    2330:	4e 89       	ldd	r20, Y+22	; 0x16
    2332:	5f 89       	ldd	r21, Y+23	; 0x17
    2334:	68 8d       	ldd	r22, Y+24	; 0x18
    2336:	79 8d       	ldd	r23, Y+25	; 0x19
    2338:	88 81       	ld	r24, Y
    233a:	99 81       	ldd	r25, Y+1	; 0x01
    233c:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <move_window>
    2340:	88 23       	and	r24, r24
    2342:	19 f0       	breq	.+6      	; 0x234a <f_write+0x28c>
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	8d 83       	std	Y+5, r24	; 0x05
    2348:	44 c0       	rjmp	.+136    	; 0x23d2 <f_write+0x314>
    234a:	8e 81       	ldd	r24, Y+6	; 0x06
    234c:	9f 81       	ldd	r25, Y+7	; 0x07
    234e:	a8 85       	ldd	r26, Y+8	; 0x08
    2350:	b9 85       	ldd	r27, Y+9	; 0x09
    2352:	91 70       	andi	r25, 0x01	; 1
    2354:	aa 27       	eor	r26, r26
    2356:	bb 27       	eor	r27, r27
    2358:	8e 96       	adiw	r24, 0x2e	; 46
    235a:	28 81       	ld	r18, Y
    235c:	39 81       	ldd	r19, Y+1	; 0x01
    235e:	a7 01       	movw	r20, r14
    2360:	b4 01       	movw	r22, r8
    2362:	82 0f       	add	r24, r18
    2364:	93 1f       	adc	r25, r19
    2366:	0e 94 07 02 	call	0x40e	; 0x40e <mem_cpy>
    236a:	e8 81       	ld	r30, Y
    236c:	f9 81       	ldd	r31, Y+1	; 0x01
    236e:	21 e0       	ldi	r18, 0x01	; 1
    2370:	24 83       	std	Z+4, r18	; 0x04
    2372:	8e 0c       	add	r8, r14
    2374:	9f 1c       	adc	r9, r15
    2376:	8e 81       	ldd	r24, Y+6	; 0x06
    2378:	9f 81       	ldd	r25, Y+7	; 0x07
    237a:	a8 85       	ldd	r26, Y+8	; 0x08
    237c:	b9 85       	ldd	r27, Y+9	; 0x09
    237e:	8e 0d       	add	r24, r14
    2380:	9f 1d       	adc	r25, r15
    2382:	a1 1d       	adc	r26, r1
    2384:	b1 1d       	adc	r27, r1
    2386:	8e 83       	std	Y+6, r24	; 0x06
    2388:	9f 83       	std	Y+7, r25	; 0x07
    238a:	a8 87       	std	Y+8, r26	; 0x08
    238c:	b9 87       	std	Y+9, r27	; 0x09
    238e:	f5 01       	movw	r30, r10
    2390:	80 81       	ld	r24, Z
    2392:	91 81       	ldd	r25, Z+1	; 0x01
    2394:	8e 0d       	add	r24, r14
    2396:	9f 1d       	adc	r25, r15
    2398:	91 83       	std	Z+1, r25	; 0x01
    239a:	80 83       	st	Z, r24
    239c:	ce 18       	sub	r12, r14
    239e:	df 08       	sbc	r13, r15
    23a0:	09 f0       	breq	.+2      	; 0x23a4 <f_write+0x2e6>
    23a2:	c4 ce       	rjmp	.-632    	; 0x212c <f_write+0x6e>
    23a4:	8e 81       	ldd	r24, Y+6	; 0x06
    23a6:	9f 81       	ldd	r25, Y+7	; 0x07
    23a8:	a8 85       	ldd	r26, Y+8	; 0x08
    23aa:	b9 85       	ldd	r27, Y+9	; 0x09
    23ac:	4a 85       	ldd	r20, Y+10	; 0x0a
    23ae:	5b 85       	ldd	r21, Y+11	; 0x0b
    23b0:	6c 85       	ldd	r22, Y+12	; 0x0c
    23b2:	7d 85       	ldd	r23, Y+13	; 0x0d
    23b4:	48 17       	cp	r20, r24
    23b6:	59 07       	cpc	r21, r25
    23b8:	6a 07       	cpc	r22, r26
    23ba:	7b 07       	cpc	r23, r27
    23bc:	20 f4       	brcc	.+8      	; 0x23c6 <f_write+0x308>
    23be:	8a 87       	std	Y+10, r24	; 0x0a
    23c0:	9b 87       	std	Y+11, r25	; 0x0b
    23c2:	ac 87       	std	Y+12, r26	; 0x0c
    23c4:	bd 87       	std	Y+13, r27	; 0x0d
    23c6:	8c 81       	ldd	r24, Y+4	; 0x04
    23c8:	80 62       	ori	r24, 0x20	; 32
    23ca:	8c 83       	std	Y+4, r24	; 0x04
    23cc:	80 e0       	ldi	r24, 0x00	; 0
    23ce:	01 c0       	rjmp	.+2      	; 0x23d2 <f_write+0x314>
    23d0:	87 e0       	ldi	r24, 0x07	; 7
    23d2:	df 91       	pop	r29
    23d4:	cf 91       	pop	r28
    23d6:	1f 91       	pop	r17
    23d8:	0f 91       	pop	r16
    23da:	ff 90       	pop	r15
    23dc:	ef 90       	pop	r14
    23de:	df 90       	pop	r13
    23e0:	cf 90       	pop	r12
    23e2:	bf 90       	pop	r11
    23e4:	af 90       	pop	r10
    23e6:	9f 90       	pop	r9
    23e8:	8f 90       	pop	r8
    23ea:	7f 90       	pop	r7
    23ec:	6f 90       	pop	r6
    23ee:	5f 90       	pop	r5
    23f0:	4f 90       	pop	r4
    23f2:	3f 90       	pop	r3
    23f4:	2f 90       	pop	r2
    23f6:	08 95       	ret

000023f8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
    23f8:	0f 93       	push	r16
    23fa:	1f 93       	push	r17
    23fc:	cf 93       	push	r28
    23fe:	df 93       	push	r29
    2400:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
    2402:	0e 94 51 03 	call	0x6a2	; 0x6a2 <validate>
    2406:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    2408:	81 11       	cpse	r24, r1
    240a:	98 c0       	rjmp	.+304    	; 0x253c <f_sync+0x144>
		if (fp->flag & FA__WRITTEN) {	/* Is there any change to the file? */
    240c:	8c 81       	ldd	r24, Y+4	; 0x04
    240e:	85 ff       	sbrs	r24, 5
    2410:	95 c0       	rjmp	.+298    	; 0x253c <f_sync+0x144>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    2412:	4a 8d       	ldd	r20, Y+26	; 0x1a
    2414:	5b 8d       	ldd	r21, Y+27	; 0x1b
    2416:	6c 8d       	ldd	r22, Y+28	; 0x1c
    2418:	7d 8d       	ldd	r23, Y+29	; 0x1d
    241a:	88 81       	ld	r24, Y
    241c:	99 81       	ldd	r25, Y+1	; 0x01
    241e:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <move_window>
    2422:	98 2f       	mov	r25, r24
			if (res == FR_OK) {
    2424:	81 11       	cpse	r24, r1
    2426:	8a c0       	rjmp	.+276    	; 0x253c <f_sync+0x144>
				dir = fp->dir_ptr;
    2428:	ee 8d       	ldd	r30, Y+30	; 0x1e
    242a:	ff 8d       	ldd	r31, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    242c:	83 85       	ldd	r24, Z+11	; 0x0b
    242e:	80 62       	ori	r24, 0x20	; 32
    2430:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
    2432:	8a 85       	ldd	r24, Y+10	; 0x0a
    2434:	9b 85       	ldd	r25, Y+11	; 0x0b
    2436:	ac 85       	ldd	r26, Y+12	; 0x0c
    2438:	bd 85       	ldd	r27, Y+13	; 0x0d
    243a:	84 8f       	std	Z+28, r24	; 0x1c
    243c:	95 8f       	std	Z+29, r25	; 0x1d
    243e:	a6 8f       	std	Z+30, r26	; 0x1e
    2440:	b7 8f       	std	Z+31, r27	; 0x1f
				st_clust(dir, fp->sclust);					/* Update start cluster */
    2442:	8e 85       	ldd	r24, Y+14	; 0x0e
    2444:	9f 85       	ldd	r25, Y+15	; 0x0f
    2446:	a8 89       	ldd	r26, Y+16	; 0x10
    2448:	b9 89       	ldd	r27, Y+17	; 0x11
void st_clust (
	BYTE* dir,	/* Pointer to the SFN entry */
	DWORD cl	/* Value to be set */
)
{
	ST_WORD(dir + DIR_FstClusLO, cl);
    244a:	93 8f       	std	Z+27, r25	; 0x1b
    244c:	82 8f       	std	Z+26, r24	; 0x1a
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
    244e:	b5 8b       	std	Z+21, r27	; 0x15
    2450:	a4 8b       	std	Z+20, r26	; 0x14
				dir = fp->dir_ptr;
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
				st_clust(dir, fp->sclust);					/* Update start cluster */
				tm = GET_FATTIME();							/* Update modified time */
				ST_DWORD(dir + DIR_WrtTime, tm);
    2452:	80 e0       	ldi	r24, 0x00	; 0
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	a1 e2       	ldi	r26, 0x21	; 33
    2458:	b8 e4       	ldi	r27, 0x48	; 72
    245a:	86 8b       	std	Z+22, r24	; 0x16
    245c:	97 8b       	std	Z+23, r25	; 0x17
    245e:	a0 8f       	std	Z+24, r26	; 0x18
    2460:	b1 8f       	std	Z+25, r27	; 0x19
				ST_WORD(dir + DIR_LstAccDate, 0);
    2462:	13 8a       	std	Z+19, r1	; 0x13
    2464:	12 8a       	std	Z+18, r1	; 0x12
				fp->flag &= ~FA__WRITTEN;
    2466:	8c 81       	ldd	r24, Y+4	; 0x04
    2468:	8f 7d       	andi	r24, 0xDF	; 223
    246a:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    246c:	e8 81       	ld	r30, Y
    246e:	f9 81       	ldd	r31, Y+1	; 0x01
    2470:	81 e0       	ldi	r24, 0x01	; 1
    2472:	84 83       	std	Z+4, r24	; 0x04
				res = sync_fs(fp->fs);
    2474:	09 90       	ld	r0, Y+
    2476:	d8 81       	ld	r29, Y
    2478:	c0 2d       	mov	r28, r0
)
{
	FRESULT res;


	res = sync_window(fs);
    247a:	ce 01       	movw	r24, r28
    247c:	0e 94 6d 02 	call	0x4da	; 0x4da <sync_window>
    2480:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    2482:	81 11       	cpse	r24, r1
    2484:	5b c0       	rjmp	.+182    	; 0x253c <f_sync+0x144>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
    2486:	88 81       	ld	r24, Y
    2488:	83 30       	cpi	r24, 0x03	; 3
    248a:	09 f0       	breq	.+2      	; 0x248e <f_sync+0x96>
    248c:	4d c0       	rjmp	.+154    	; 0x2528 <f_sync+0x130>
    248e:	8d 81       	ldd	r24, Y+5	; 0x05
    2490:	81 30       	cpi	r24, 0x01	; 1
    2492:	09 f0       	breq	.+2      	; 0x2496 <f_sync+0x9e>
    2494:	49 c0       	rjmp	.+146    	; 0x2528 <f_sync+0x130>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
    2496:	be 01       	movw	r22, r28
    2498:	62 5d       	subi	r22, 0xD2	; 210
    249a:	7f 4f       	sbci	r23, 0xFF	; 255
    249c:	fb 01       	movw	r30, r22
    249e:	ce 01       	movw	r24, r28
    24a0:	82 5d       	subi	r24, 0xD2	; 210
    24a2:	9d 4f       	sbci	r25, 0xFD	; 253
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
    24a4:	11 92       	st	Z+, r1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    24a6:	e8 17       	cp	r30, r24
    24a8:	f9 07       	cpc	r31, r25
    24aa:	e1 f7       	brne	.-8      	; 0x24a4 <f_sync+0xac>
	if (res == FR_OK) {
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
			ST_WORD(fs->win + BS_55AA, 0xAA55);
    24ac:	85 e5       	ldi	r24, 0x55	; 85
    24ae:	9a ea       	ldi	r25, 0xAA	; 170
    24b0:	fe 01       	movw	r30, r28
    24b2:	e4 5d       	subi	r30, 0xD4	; 212
    24b4:	fd 4f       	sbci	r31, 0xFD	; 253
    24b6:	91 83       	std	Z+1, r25	; 0x01
    24b8:	80 83       	st	Z, r24
			ST_DWORD(fs->win + FSI_LeadSig, 0x41615252);
    24ba:	82 e5       	ldi	r24, 0x52	; 82
    24bc:	92 e5       	ldi	r25, 0x52	; 82
    24be:	a1 e6       	ldi	r26, 0x61	; 97
    24c0:	b1 e4       	ldi	r27, 0x41	; 65
    24c2:	8e a7       	std	Y+46, r24	; 0x2e
    24c4:	9f a7       	std	Y+47, r25	; 0x2f
    24c6:	a8 ab       	std	Y+48, r26	; 0x30
    24c8:	b9 ab       	std	Y+49, r27	; 0x31
			ST_DWORD(fs->win + FSI_StrucSig, 0x61417272);
    24ca:	82 e7       	ldi	r24, 0x72	; 114
    24cc:	92 e7       	ldi	r25, 0x72	; 114
    24ce:	a1 e4       	ldi	r26, 0x41	; 65
    24d0:	b1 e6       	ldi	r27, 0x61	; 97
    24d2:	7a 97       	sbiw	r30, 0x1a	; 26
    24d4:	80 83       	st	Z, r24
    24d6:	91 83       	std	Z+1, r25	; 0x01
    24d8:	a2 83       	std	Z+2, r26	; 0x02
    24da:	b3 83       	std	Z+3, r27	; 0x03
			ST_DWORD(fs->win + FSI_Free_Count, fs->free_clust);
    24dc:	8e 85       	ldd	r24, Y+14	; 0x0e
    24de:	9f 85       	ldd	r25, Y+15	; 0x0f
    24e0:	a8 89       	ldd	r26, Y+16	; 0x10
    24e2:	b9 89       	ldd	r27, Y+17	; 0x11
    24e4:	34 96       	adiw	r30, 0x04	; 4
    24e6:	80 83       	st	Z, r24
    24e8:	91 83       	std	Z+1, r25	; 0x01
    24ea:	a2 83       	std	Z+2, r26	; 0x02
    24ec:	b3 83       	std	Z+3, r27	; 0x03
			ST_DWORD(fs->win + FSI_Nxt_Free, fs->last_clust);
    24ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    24f0:	9b 85       	ldd	r25, Y+11	; 0x0b
    24f2:	ac 85       	ldd	r26, Y+12	; 0x0c
    24f4:	bd 85       	ldd	r27, Y+13	; 0x0d
    24f6:	34 96       	adiw	r30, 0x04	; 4
    24f8:	80 83       	st	Z, r24
    24fa:	91 83       	std	Z+1, r25	; 0x01
    24fc:	a2 83       	std	Z+2, r26	; 0x02
    24fe:	b3 83       	std	Z+3, r27	; 0x03
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
    2500:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2502:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2504:	ac 8d       	ldd	r26, Y+28	; 0x1c
    2506:	bd 8d       	ldd	r27, Y+29	; 0x1d
    2508:	9c 01       	movw	r18, r24
    250a:	ad 01       	movw	r20, r26
    250c:	2f 5f       	subi	r18, 0xFF	; 255
    250e:	3f 4f       	sbci	r19, 0xFF	; 255
    2510:	4f 4f       	sbci	r20, 0xFF	; 255
    2512:	5f 4f       	sbci	r21, 0xFF	; 255
    2514:	2a a7       	std	Y+42, r18	; 0x2a
    2516:	3b a7       	std	Y+43, r19	; 0x2b
    2518:	4c a7       	std	Y+44, r20	; 0x2c
    251a:	5d a7       	std	Y+45, r21	; 0x2d
			disk_write(fs->drv, fs->win, fs->winsect, 1);
    251c:	01 e0       	ldi	r16, 0x01	; 1
    251e:	10 e0       	ldi	r17, 0x00	; 0
    2520:	89 81       	ldd	r24, Y+1	; 0x01
    2522:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <disk_write>
			fs->fsi_flag = 0;
    2526:	1d 82       	std	Y+5, r1	; 0x05
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    2528:	40 e0       	ldi	r20, 0x00	; 0
    252a:	50 e0       	ldi	r21, 0x00	; 0
    252c:	60 e0       	ldi	r22, 0x00	; 0
    252e:	89 81       	ldd	r24, Y+1	; 0x01
    2530:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <disk_ioctl>
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
    2534:	91 e0       	ldi	r25, 0x01	; 1
    2536:	81 11       	cpse	r24, r1
    2538:	01 c0       	rjmp	.+2      	; 0x253c <f_sync+0x144>
    253a:	90 e0       	ldi	r25, 0x00	; 0
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    253c:	89 2f       	mov	r24, r25
    253e:	df 91       	pop	r29
    2540:	cf 91       	pop	r28
    2542:	1f 91       	pop	r17
    2544:	0f 91       	pop	r16
    2546:	08 95       	ret

00002548 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    2548:	cf 93       	push	r28
    254a:	df 93       	push	r29
    254c:	ec 01       	movw	r28, r24
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
    254e:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <f_sync>
	if (res == FR_OK)
    2552:	81 11       	cpse	r24, r1
    2554:	07 c0       	rjmp	.+14     	; 0x2564 <f_close+0x1c>
#endif
	{
		res = validate(fp);				/* Lock volume */
    2556:	ce 01       	movw	r24, r28
    2558:	0e 94 51 03 	call	0x6a2	; 0x6a2 <validate>
		if (res == FR_OK) {
    255c:	81 11       	cpse	r24, r1
    255e:	02 c0       	rjmp	.+4      	; 0x2564 <f_close+0x1c>
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
				fp->fs = 0;				/* Invalidate file object */
    2560:	19 82       	std	Y+1, r1	; 0x01
    2562:	18 82       	st	Y, r1
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
    2564:	df 91       	pop	r29
    2566:	cf 91       	pop	r28
    2568:	08 95       	ret

0000256a <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    256a:	4f 92       	push	r4
    256c:	5f 92       	push	r5
    256e:	6f 92       	push	r6
    2570:	7f 92       	push	r7
    2572:	8f 92       	push	r8
    2574:	9f 92       	push	r9
    2576:	af 92       	push	r10
    2578:	bf 92       	push	r11
    257a:	cf 92       	push	r12
    257c:	df 92       	push	r13
    257e:	ef 92       	push	r14
    2580:	ff 92       	push	r15
    2582:	0f 93       	push	r16
    2584:	1f 93       	push	r17
    2586:	cf 93       	push	r28
    2588:	df 93       	push	r29
    258a:	00 d0       	rcall	.+0      	; 0x258c <f_lseek+0x22>
    258c:	00 d0       	rcall	.+0      	; 0x258e <f_lseek+0x24>
    258e:	00 d0       	rcall	.+0      	; 0x2590 <f_lseek+0x26>
    2590:	cd b7       	in	r28, 0x3d	; 61
    2592:	de b7       	in	r29, 0x3e	; 62
    2594:	9e 83       	std	Y+6, r25	; 0x06
    2596:	8d 83       	std	Y+5, r24	; 0x05
    2598:	6a 01       	movw	r12, r20
    259a:	7b 01       	movw	r14, r22
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
    259c:	0e 94 51 03 	call	0x6a2	; 0x6a2 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    25a0:	81 11       	cpse	r24, r1
    25a2:	93 c1       	rjmp	.+806    	; 0x28ca <f_lseek+0x360>
	if (fp->err)						/* Check error */
    25a4:	ad 81       	ldd	r26, Y+5	; 0x05
    25a6:	be 81       	ldd	r27, Y+6	; 0x06
    25a8:	15 96       	adiw	r26, 0x05	; 5
    25aa:	8c 91       	ld	r24, X
    25ac:	15 97       	sbiw	r26, 0x05	; 5
    25ae:	81 11       	cpse	r24, r1
    25b0:	8c c1       	rjmp	.+792    	; 0x28ca <f_lseek+0x360>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    25b2:	1a 96       	adiw	r26, 0x0a	; 10
    25b4:	8d 91       	ld	r24, X+
    25b6:	9d 91       	ld	r25, X+
    25b8:	0d 90       	ld	r0, X+
    25ba:	bc 91       	ld	r27, X
    25bc:	a0 2d       	mov	r26, r0
    25be:	8c 15       	cp	r24, r12
    25c0:	9d 05       	cpc	r25, r13
    25c2:	ae 05       	cpc	r26, r14
    25c4:	bf 05       	cpc	r27, r15
    25c6:	38 f4       	brcc	.+14     	; 0x25d6 <f_lseek+0x6c>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
    25c8:	ed 81       	ldd	r30, Y+5	; 0x05
    25ca:	fe 81       	ldd	r31, Y+6	; 0x06
    25cc:	24 81       	ldd	r18, Z+4	; 0x04
    25ce:	21 fd       	sbrc	r18, 1
    25d0:	02 c0       	rjmp	.+4      	; 0x25d6 <f_lseek+0x6c>
#endif
			) ofs = fp->fsize;
    25d2:	6c 01       	movw	r12, r24
    25d4:	7d 01       	movw	r14, r26

		ifptr = fp->fptr;
    25d6:	ad 81       	ldd	r26, Y+5	; 0x05
    25d8:	be 81       	ldd	r27, Y+6	; 0x06
    25da:	16 96       	adiw	r26, 0x06	; 6
    25dc:	4d 90       	ld	r4, X+
    25de:	5d 90       	ld	r5, X+
    25e0:	6d 90       	ld	r6, X+
    25e2:	7c 90       	ld	r7, X
    25e4:	19 97       	sbiw	r26, 0x09	; 9
		fp->fptr = nsect = 0;
    25e6:	fd 01       	movw	r30, r26
    25e8:	16 82       	std	Z+6, r1	; 0x06
    25ea:	17 82       	std	Z+7, r1	; 0x07
    25ec:	10 86       	std	Z+8, r1	; 0x08
    25ee:	11 86       	std	Z+9, r1	; 0x09
		if (ofs) {
    25f0:	c1 14       	cp	r12, r1
    25f2:	d1 04       	cpc	r13, r1
    25f4:	e1 04       	cpc	r14, r1
    25f6:	f1 04       	cpc	r15, r1
    25f8:	09 f4       	brne	.+2      	; 0x25fc <f_lseek+0x92>
    25fa:	64 c1       	rjmp	.+712    	; 0x28c4 <f_lseek+0x35a>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    25fc:	00 81       	ld	r16, Z
    25fe:	11 81       	ldd	r17, Z+1	; 0x01
    2600:	d8 01       	movw	r26, r16
    2602:	12 96       	adiw	r26, 0x02	; 2
    2604:	8c 90       	ld	r8, X
    2606:	91 2c       	mov	r9, r1
    2608:	a1 2c       	mov	r10, r1
    260a:	b1 2c       	mov	r11, r1
    260c:	07 2e       	mov	r0, r23
    260e:	79 e0       	ldi	r23, 0x09	; 9
    2610:	88 0c       	add	r8, r8
    2612:	99 1c       	adc	r9, r9
    2614:	aa 1c       	adc	r10, r10
    2616:	bb 1c       	adc	r11, r11
    2618:	7a 95       	dec	r23
    261a:	d1 f7       	brne	.-12     	; 0x2610 <f_lseek+0xa6>
    261c:	70 2d       	mov	r23, r0
			if (ifptr > 0 &&
    261e:	41 14       	cp	r4, r1
    2620:	51 04       	cpc	r5, r1
    2622:	61 04       	cpc	r6, r1
    2624:	71 04       	cpc	r7, r1
    2626:	09 f4       	brne	.+2      	; 0x262a <f_lseek+0xc0>
    2628:	40 c0       	rjmp	.+128    	; 0x26aa <f_lseek+0x140>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    262a:	b1 e0       	ldi	r27, 0x01	; 1
    262c:	4b 1a       	sub	r4, r27
    262e:	51 08       	sbc	r5, r1
    2630:	61 08       	sbc	r6, r1
    2632:	71 08       	sbc	r7, r1

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
		if (ofs) {
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
    2634:	c7 01       	movw	r24, r14
    2636:	b6 01       	movw	r22, r12
    2638:	61 50       	subi	r22, 0x01	; 1
    263a:	71 09       	sbc	r23, r1
    263c:	81 09       	sbc	r24, r1
    263e:	91 09       	sbc	r25, r1
    2640:	a5 01       	movw	r20, r10
    2642:	94 01       	movw	r18, r8
    2644:	0e 94 61 20 	call	0x40c2	; 0x40c2 <__udivmodsi4>
    2648:	29 83       	std	Y+1, r18	; 0x01
    264a:	3a 83       	std	Y+2, r19	; 0x02
    264c:	4b 83       	std	Y+3, r20	; 0x03
    264e:	5c 83       	std	Y+4, r21	; 0x04
    2650:	c3 01       	movw	r24, r6
    2652:	b2 01       	movw	r22, r4
    2654:	a5 01       	movw	r20, r10
    2656:	94 01       	movw	r18, r8
    2658:	0e 94 61 20 	call	0x40c2	; 0x40c2 <__udivmodsi4>
    265c:	89 81       	ldd	r24, Y+1	; 0x01
    265e:	9a 81       	ldd	r25, Y+2	; 0x02
    2660:	ab 81       	ldd	r26, Y+3	; 0x03
    2662:	bc 81       	ldd	r27, Y+4	; 0x04
    2664:	82 17       	cp	r24, r18
    2666:	93 07       	cpc	r25, r19
    2668:	a4 07       	cpc	r26, r20
    266a:	b5 07       	cpc	r27, r21
    266c:	f0 f0       	brcs	.+60     	; 0x26aa <f_lseek+0x140>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    266e:	88 27       	eor	r24, r24
    2670:	99 27       	eor	r25, r25
    2672:	dc 01       	movw	r26, r24
    2674:	88 19       	sub	r24, r8
    2676:	99 09       	sbc	r25, r9
    2678:	aa 09       	sbc	r26, r10
    267a:	bb 09       	sbc	r27, r11
    267c:	48 22       	and	r4, r24
    267e:	59 22       	and	r5, r25
    2680:	6a 22       	and	r6, r26
    2682:	7b 22       	and	r7, r27
    2684:	ad 81       	ldd	r26, Y+5	; 0x05
    2686:	be 81       	ldd	r27, Y+6	; 0x06
    2688:	16 96       	adiw	r26, 0x06	; 6
    268a:	4d 92       	st	X+, r4
    268c:	5d 92       	st	X+, r5
    268e:	6d 92       	st	X+, r6
    2690:	7c 92       	st	X, r7
    2692:	19 97       	sbiw	r26, 0x09	; 9
				ofs -= fp->fptr;
    2694:	c4 18       	sub	r12, r4
    2696:	d5 08       	sbc	r13, r5
    2698:	e6 08       	sbc	r14, r6
    269a:	f7 08       	sbc	r15, r7
				clst = fp->clust;
    269c:	52 96       	adiw	r26, 0x12	; 18
    269e:	4d 91       	ld	r20, X+
    26a0:	5d 91       	ld	r21, X+
    26a2:	6d 91       	ld	r22, X+
    26a4:	7c 91       	ld	r23, X
    26a6:	55 97       	sbiw	r26, 0x15	; 21
    26a8:	37 c0       	rjmp	.+110    	; 0x2718 <f_lseek+0x1ae>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
    26aa:	ed 81       	ldd	r30, Y+5	; 0x05
    26ac:	fe 81       	ldd	r31, Y+6	; 0x06
    26ae:	46 85       	ldd	r20, Z+14	; 0x0e
    26b0:	57 85       	ldd	r21, Z+15	; 0x0f
    26b2:	60 89       	ldd	r22, Z+16	; 0x10
    26b4:	71 89       	ldd	r23, Z+17	; 0x11
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    26b6:	41 15       	cp	r20, r1
    26b8:	51 05       	cpc	r21, r1
    26ba:	61 05       	cpc	r22, r1
    26bc:	71 05       	cpc	r23, r1
    26be:	31 f5       	brne	.+76     	; 0x270c <f_lseek+0x1a2>
					clst = create_chain(fp->fs, 0);
    26c0:	40 e0       	ldi	r20, 0x00	; 0
    26c2:	50 e0       	ldi	r21, 0x00	; 0
    26c4:	ba 01       	movw	r22, r20
    26c6:	c8 01       	movw	r24, r16
    26c8:	0e 94 55 09 	call	0x12aa	; 0x12aa <create_chain>
    26cc:	ab 01       	movw	r20, r22
    26ce:	bc 01       	movw	r22, r24
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    26d0:	41 30       	cpi	r20, 0x01	; 1
    26d2:	51 05       	cpc	r21, r1
    26d4:	61 05       	cpc	r22, r1
    26d6:	71 05       	cpc	r23, r1
    26d8:	31 f4       	brne	.+12     	; 0x26e6 <f_lseek+0x17c>
    26da:	82 e0       	ldi	r24, 0x02	; 2
    26dc:	ad 81       	ldd	r26, Y+5	; 0x05
    26de:	be 81       	ldd	r27, Y+6	; 0x06
    26e0:	15 96       	adiw	r26, 0x05	; 5
    26e2:	8c 93       	st	X, r24
    26e4:	f2 c0       	rjmp	.+484    	; 0x28ca <f_lseek+0x360>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    26e6:	4f 3f       	cpi	r20, 0xFF	; 255
    26e8:	bf ef       	ldi	r27, 0xFF	; 255
    26ea:	5b 07       	cpc	r21, r27
    26ec:	6b 07       	cpc	r22, r27
    26ee:	7b 07       	cpc	r23, r27
    26f0:	29 f4       	brne	.+10     	; 0x26fc <f_lseek+0x192>
    26f2:	81 e0       	ldi	r24, 0x01	; 1
    26f4:	ed 81       	ldd	r30, Y+5	; 0x05
    26f6:	fe 81       	ldd	r31, Y+6	; 0x06
    26f8:	85 83       	std	Z+5, r24	; 0x05
    26fa:	e7 c0       	rjmp	.+462    	; 0x28ca <f_lseek+0x360>
					fp->sclust = clst;
    26fc:	ad 81       	ldd	r26, Y+5	; 0x05
    26fe:	be 81       	ldd	r27, Y+6	; 0x06
    2700:	1e 96       	adiw	r26, 0x0e	; 14
    2702:	4d 93       	st	X+, r20
    2704:	5d 93       	st	X+, r21
    2706:	6d 93       	st	X+, r22
    2708:	7c 93       	st	X, r23
    270a:	51 97       	sbiw	r26, 0x11	; 17
				}
#endif
				fp->clust = clst;
    270c:	ed 81       	ldd	r30, Y+5	; 0x05
    270e:	fe 81       	ldd	r31, Y+6	; 0x06
    2710:	42 8b       	std	Z+18, r20	; 0x12
    2712:	53 8b       	std	Z+19, r21	; 0x13
    2714:	64 8b       	std	Z+20, r22	; 0x14
    2716:	75 8b       	std	Z+21, r23	; 0x15
			}
			if (clst != 0) {
    2718:	41 15       	cp	r20, r1
    271a:	51 05       	cpc	r21, r1
    271c:	61 05       	cpc	r22, r1
    271e:	71 05       	cpc	r23, r1
    2720:	09 f4       	brne	.+2      	; 0x2724 <f_lseek+0x1ba>
    2722:	99 c0       	rjmp	.+306    	; 0x2856 <f_lseek+0x2ec>
				while (ofs > bcs) {						/* Cluster following loop */
    2724:	8c 14       	cp	r8, r12
    2726:	9d 04       	cpc	r9, r13
    2728:	ae 04       	cpc	r10, r14
    272a:	bf 04       	cpc	r11, r15
    272c:	08 f0       	brcs	.+2      	; 0x2730 <f_lseek+0x1c6>
    272e:	5f c0       	rjmp	.+190    	; 0x27ee <f_lseek+0x284>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    2730:	ad 81       	ldd	r26, Y+5	; 0x05
    2732:	be 81       	ldd	r27, Y+6	; 0x06
    2734:	14 96       	adiw	r26, 0x04	; 4
    2736:	8c 91       	ld	r24, X
    2738:	14 97       	sbiw	r26, 0x04	; 4
    273a:	81 ff       	sbrs	r24, 1
    273c:	0c c0       	rjmp	.+24     	; 0x2756 <f_lseek+0x1ec>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    273e:	8d 91       	ld	r24, X+
    2740:	9c 91       	ld	r25, X
    2742:	0e 94 55 09 	call	0x12aa	; 0x12aa <create_chain>
    2746:	ab 01       	movw	r20, r22
    2748:	bc 01       	movw	r22, r24
						if (clst == 0) {				/* When disk gets full, clip file size */
    274a:	41 15       	cp	r20, r1
    274c:	51 05       	cpc	r21, r1
    274e:	61 05       	cpc	r22, r1
    2750:	71 05       	cpc	r23, r1
    2752:	49 f4       	brne	.+18     	; 0x2766 <f_lseek+0x1fc>
    2754:	4a c0       	rjmp	.+148    	; 0x27ea <f_lseek+0x280>
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    2756:	ad 81       	ldd	r26, Y+5	; 0x05
    2758:	be 81       	ldd	r27, Y+6	; 0x06
    275a:	8d 91       	ld	r24, X+
    275c:	9c 91       	ld	r25, X
    275e:	0e 94 8a 06 	call	0xd14	; 0xd14 <get_fat>
    2762:	ab 01       	movw	r20, r22
    2764:	bc 01       	movw	r22, r24
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    2766:	4f 3f       	cpi	r20, 0xFF	; 255
    2768:	bf ef       	ldi	r27, 0xFF	; 255
    276a:	5b 07       	cpc	r21, r27
    276c:	6b 07       	cpc	r22, r27
    276e:	7b 07       	cpc	r23, r27
    2770:	29 f4       	brne	.+10     	; 0x277c <f_lseek+0x212>
    2772:	ed 81       	ldd	r30, Y+5	; 0x05
    2774:	fe 81       	ldd	r31, Y+6	; 0x06
    2776:	81 e0       	ldi	r24, 0x01	; 1
    2778:	85 83       	std	Z+5, r24	; 0x05
    277a:	a7 c0       	rjmp	.+334    	; 0x28ca <f_lseek+0x360>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    277c:	42 30       	cpi	r20, 0x02	; 2
    277e:	51 05       	cpc	r21, r1
    2780:	61 05       	cpc	r22, r1
    2782:	71 05       	cpc	r23, r1
    2784:	68 f0       	brcs	.+26     	; 0x27a0 <f_lseek+0x236>
    2786:	ad 81       	ldd	r26, Y+5	; 0x05
    2788:	be 81       	ldd	r27, Y+6	; 0x06
    278a:	ed 91       	ld	r30, X+
    278c:	fc 91       	ld	r31, X
    278e:	82 89       	ldd	r24, Z+18	; 0x12
    2790:	93 89       	ldd	r25, Z+19	; 0x13
    2792:	a4 89       	ldd	r26, Z+20	; 0x14
    2794:	b5 89       	ldd	r27, Z+21	; 0x15
    2796:	48 17       	cp	r20, r24
    2798:	59 07       	cpc	r21, r25
    279a:	6a 07       	cpc	r22, r26
    279c:	7b 07       	cpc	r23, r27
    279e:	28 f0       	brcs	.+10     	; 0x27aa <f_lseek+0x240>
    27a0:	ed 81       	ldd	r30, Y+5	; 0x05
    27a2:	fe 81       	ldd	r31, Y+6	; 0x06
    27a4:	82 e0       	ldi	r24, 0x02	; 2
    27a6:	85 83       	std	Z+5, r24	; 0x05
    27a8:	90 c0       	rjmp	.+288    	; 0x28ca <f_lseek+0x360>
					fp->clust = clst;
    27aa:	ad 81       	ldd	r26, Y+5	; 0x05
    27ac:	be 81       	ldd	r27, Y+6	; 0x06
    27ae:	52 96       	adiw	r26, 0x12	; 18
    27b0:	4d 93       	st	X+, r20
    27b2:	5d 93       	st	X+, r21
    27b4:	6d 93       	st	X+, r22
    27b6:	7c 93       	st	X, r23
    27b8:	55 97       	sbiw	r26, 0x15	; 21
					fp->fptr += bcs;
    27ba:	fd 01       	movw	r30, r26
    27bc:	86 81       	ldd	r24, Z+6	; 0x06
    27be:	97 81       	ldd	r25, Z+7	; 0x07
    27c0:	a0 85       	ldd	r26, Z+8	; 0x08
    27c2:	b1 85       	ldd	r27, Z+9	; 0x09
    27c4:	88 0d       	add	r24, r8
    27c6:	99 1d       	adc	r25, r9
    27c8:	aa 1d       	adc	r26, r10
    27ca:	bb 1d       	adc	r27, r11
    27cc:	86 83       	std	Z+6, r24	; 0x06
    27ce:	97 83       	std	Z+7, r25	; 0x07
    27d0:	a0 87       	std	Z+8, r26	; 0x08
    27d2:	b1 87       	std	Z+9, r27	; 0x09
					ofs -= bcs;
    27d4:	c8 18       	sub	r12, r8
    27d6:	d9 08       	sbc	r13, r9
    27d8:	ea 08       	sbc	r14, r10
    27da:	fb 08       	sbc	r15, r11
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    27dc:	8c 14       	cp	r8, r12
    27de:	9d 04       	cpc	r9, r13
    27e0:	ae 04       	cpc	r10, r14
    27e2:	bf 04       	cpc	r11, r15
    27e4:	08 f4       	brcc	.+2      	; 0x27e8 <f_lseek+0x27e>
    27e6:	a4 cf       	rjmp	.-184    	; 0x2730 <f_lseek+0x1c6>
    27e8:	02 c0       	rjmp	.+4      	; 0x27ee <f_lseek+0x284>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
						if (clst == 0) {				/* When disk gets full, clip file size */
							ofs = bcs; break;
    27ea:	75 01       	movw	r14, r10
    27ec:	64 01       	movw	r12, r8
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->clust = clst;
					fp->fptr += bcs;
					ofs -= bcs;
				}
				fp->fptr += ofs;
    27ee:	ed 81       	ldd	r30, Y+5	; 0x05
    27f0:	fe 81       	ldd	r31, Y+6	; 0x06
    27f2:	86 81       	ldd	r24, Z+6	; 0x06
    27f4:	97 81       	ldd	r25, Z+7	; 0x07
    27f6:	a0 85       	ldd	r26, Z+8	; 0x08
    27f8:	b1 85       	ldd	r27, Z+9	; 0x09
    27fa:	8c 0d       	add	r24, r12
    27fc:	9d 1d       	adc	r25, r13
    27fe:	ae 1d       	adc	r26, r14
    2800:	bf 1d       	adc	r27, r15
    2802:	86 83       	std	Z+6, r24	; 0x06
    2804:	97 83       	std	Z+7, r25	; 0x07
    2806:	a0 87       	std	Z+8, r26	; 0x08
    2808:	b1 87       	std	Z+9, r27	; 0x09
				if (ofs % SS(fp->fs)) {
    280a:	d7 01       	movw	r26, r14
    280c:	c6 01       	movw	r24, r12
    280e:	91 70       	andi	r25, 0x01	; 1
    2810:	aa 27       	eor	r26, r26
    2812:	bb 27       	eor	r27, r27
    2814:	89 2b       	or	r24, r25
    2816:	8a 2b       	or	r24, r26
    2818:	8b 2b       	or	r24, r27
    281a:	09 f1       	breq	.+66     	; 0x285e <f_lseek+0x2f4>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    281c:	80 81       	ld	r24, Z
    281e:	91 81       	ldd	r25, Z+1	; 0x01
    2820:	0e 94 62 06 	call	0xcc4	; 0xcc4 <clust2sect>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    2824:	61 15       	cp	r22, r1
    2826:	71 05       	cpc	r23, r1
    2828:	81 05       	cpc	r24, r1
    282a:	91 05       	cpc	r25, r1
    282c:	31 f4       	brne	.+12     	; 0x283a <f_lseek+0x2d0>
    282e:	82 e0       	ldi	r24, 0x02	; 2
    2830:	ad 81       	ldd	r26, Y+5	; 0x05
    2832:	be 81       	ldd	r27, Y+6	; 0x06
    2834:	15 96       	adiw	r26, 0x05	; 5
    2836:	8c 93       	st	X, r24
    2838:	48 c0       	rjmp	.+144    	; 0x28ca <f_lseek+0x360>
					nsect += ofs / SS(fp->fs);
    283a:	0b 2e       	mov	r0, r27
    283c:	b9 e0       	ldi	r27, 0x09	; 9
    283e:	f6 94       	lsr	r15
    2840:	e7 94       	ror	r14
    2842:	d7 94       	ror	r13
    2844:	c7 94       	ror	r12
    2846:	ba 95       	dec	r27
    2848:	d1 f7       	brne	.-12     	; 0x283e <f_lseek+0x2d4>
    284a:	b0 2d       	mov	r27, r0
    284c:	c6 0e       	add	r12, r22
    284e:	d7 1e       	adc	r13, r23
    2850:	e8 1e       	adc	r14, r24
    2852:	f9 1e       	adc	r15, r25
    2854:	07 c0       	rjmp	.+14     	; 0x2864 <f_lseek+0x2fa>
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
    2856:	c1 2c       	mov	r12, r1
    2858:	d1 2c       	mov	r13, r1
    285a:	76 01       	movw	r14, r12
    285c:	03 c0       	rjmp	.+6      	; 0x2864 <f_lseek+0x2fa>
    285e:	c1 2c       	mov	r12, r1
    2860:	d1 2c       	mov	r13, r1
    2862:	76 01       	movw	r14, r12
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
					nsect += ofs / SS(fp->fs);
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
    2864:	ed 81       	ldd	r30, Y+5	; 0x05
    2866:	fe 81       	ldd	r31, Y+6	; 0x06
    2868:	86 81       	ldd	r24, Z+6	; 0x06
    286a:	97 81       	ldd	r25, Z+7	; 0x07
    286c:	a0 85       	ldd	r26, Z+8	; 0x08
    286e:	b1 85       	ldd	r27, Z+9	; 0x09
    2870:	ac 01       	movw	r20, r24
    2872:	bd 01       	movw	r22, r26
    2874:	51 70       	andi	r21, 0x01	; 1
    2876:	66 27       	eor	r22, r22
    2878:	77 27       	eor	r23, r23
    287a:	45 2b       	or	r20, r21
    287c:	46 2b       	or	r20, r22
    287e:	47 2b       	or	r20, r23
    2880:	69 f0       	breq	.+26     	; 0x289c <f_lseek+0x332>
    2882:	46 89       	ldd	r20, Z+22	; 0x16
    2884:	57 89       	ldd	r21, Z+23	; 0x17
    2886:	60 8d       	ldd	r22, Z+24	; 0x18
    2888:	71 8d       	ldd	r23, Z+25	; 0x19
    288a:	c4 16       	cp	r12, r20
    288c:	d5 06       	cpc	r13, r21
    288e:	e6 06       	cpc	r14, r22
    2890:	f7 06       	cpc	r15, r23
    2892:	21 f0       	breq	.+8      	; 0x289c <f_lseek+0x332>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
    2894:	c6 8a       	std	Z+22, r12	; 0x16
    2896:	d7 8a       	std	Z+23, r13	; 0x17
    2898:	e0 8e       	std	Z+24, r14	; 0x18
    289a:	f1 8e       	std	Z+25, r15	; 0x19
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
    289c:	ed 81       	ldd	r30, Y+5	; 0x05
    289e:	fe 81       	ldd	r31, Y+6	; 0x06
    28a0:	42 85       	ldd	r20, Z+10	; 0x0a
    28a2:	53 85       	ldd	r21, Z+11	; 0x0b
    28a4:	64 85       	ldd	r22, Z+12	; 0x0c
    28a6:	75 85       	ldd	r23, Z+13	; 0x0d
    28a8:	48 17       	cp	r20, r24
    28aa:	59 07       	cpc	r21, r25
    28ac:	6a 07       	cpc	r22, r26
    28ae:	7b 07       	cpc	r23, r27
    28b0:	58 f4       	brcc	.+22     	; 0x28c8 <f_lseek+0x35e>
			fp->fsize = fp->fptr;
    28b2:	82 87       	std	Z+10, r24	; 0x0a
    28b4:	93 87       	std	Z+11, r25	; 0x0b
    28b6:	a4 87       	std	Z+12, r26	; 0x0c
    28b8:	b5 87       	std	Z+13, r27	; 0x0d
			fp->flag |= FA__WRITTEN;
    28ba:	84 81       	ldd	r24, Z+4	; 0x04
    28bc:	80 62       	ori	r24, 0x20	; 32
    28be:	84 83       	std	Z+4, r24	; 0x04
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
    28c0:	80 e0       	ldi	r24, 0x00	; 0
    28c2:	03 c0       	rjmp	.+6      	; 0x28ca <f_lseek+0x360>
    28c4:	80 e0       	ldi	r24, 0x00	; 0
    28c6:	01 c0       	rjmp	.+2      	; 0x28ca <f_lseek+0x360>
    28c8:	80 e0       	ldi	r24, 0x00	; 0
}
    28ca:	26 96       	adiw	r28, 0x06	; 6
    28cc:	0f b6       	in	r0, 0x3f	; 63
    28ce:	f8 94       	cli
    28d0:	de bf       	out	0x3e, r29	; 62
    28d2:	0f be       	out	0x3f, r0	; 63
    28d4:	cd bf       	out	0x3d, r28	; 61
    28d6:	df 91       	pop	r29
    28d8:	cf 91       	pop	r28
    28da:	1f 91       	pop	r17
    28dc:	0f 91       	pop	r16
    28de:	ff 90       	pop	r15
    28e0:	ef 90       	pop	r14
    28e2:	df 90       	pop	r13
    28e4:	cf 90       	pop	r12
    28e6:	bf 90       	pop	r11
    28e8:	af 90       	pop	r10
    28ea:	9f 90       	pop	r9
    28ec:	8f 90       	pop	r8
    28ee:	7f 90       	pop	r7
    28f0:	6f 90       	pop	r6
    28f2:	5f 90       	pop	r5
    28f4:	4f 90       	pop	r4
    28f6:	08 95       	ret

000028f8 <power_off>:
}

static
void power_off (void)
{
	SPCR = 0;				/* Disable SPI function */
    28f8:	1c bc       	out	0x2c, r1	; 44

	// HACK 
	DDRB &= ~(1<<PINB0); // Restore SS to Hi-Z
    28fa:	20 98       	cbi	0x04, 0	; 4

	DDRB  &= ~((1<<PINB1) | (1<<PINB2) | (1<<PINB7));	/* Set SCK/MOSI/CS as hi-z */
    28fc:	84 b1       	in	r24, 0x04	; 4
    28fe:	89 77       	andi	r24, 0x79	; 121
    2900:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~((1<<PINB1) | (1<<PINB2));
    2902:	85 b1       	in	r24, 0x05	; 5
    2904:	89 7f       	andi	r24, 0xF9	; 249
    2906:	85 b9       	out	0x05, r24	; 5
	PORTB |=  (1<<PINB7);								/* Pull-up on CS */
    2908:	2f 9a       	sbi	0x05, 7	; 5
    290a:	08 95       	ret

0000290c <xchg_spi>:
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    290c:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    290e:	0d b4       	in	r0, 0x2d	; 45
    2910:	07 fe       	sbrs	r0, 7
    2912:	fd cf       	rjmp	.-6      	; 0x290e <xchg_spi+0x2>
	return SPDR;
    2914:	8e b5       	in	r24, 0x2e	; 46
}
    2916:	08 95       	ret

00002918 <deselect>:
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
    2918:	2f 9a       	sbi	0x05, 7	; 5
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
    291a:	8f ef       	ldi	r24, 0xFF	; 255
    291c:	0e 94 86 14 	call	0x290c	; 0x290c <xchg_spi>
    2920:	08 95       	ret

00002922 <select>:
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();		/* Set CS# low */
    2922:	2f 98       	cbi	0x05, 7	; 5
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
    2924:	8f ef       	ldi	r24, 0xFF	; 255
    2926:	0e 94 86 14 	call	0x290c	; 0x290c <xchg_spi>
)
{
	BYTE d;


	Timer2 = wt / 10;
    292a:	82 e3       	ldi	r24, 0x32	; 50
    292c:	80 93 67 03 	sts	0x0367, r24	; 0x800367 <Timer2>
	do
		d = xchg_spi(0xFF);
    2930:	8f ef       	ldi	r24, 0xFF	; 255
    2932:	0e 94 86 14 	call	0x290c	; 0x290c <xchg_spi>
	while (d != 0xFF && Timer2);
    2936:	8f 3f       	cpi	r24, 0xFF	; 255
    2938:	49 f0       	breq	.+18     	; 0x294c <select+0x2a>
    293a:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <Timer2>
    293e:	81 11       	cpse	r24, r1
    2940:	f7 cf       	rjmp	.-18     	; 0x2930 <select+0xe>
{
	CS_LOW();		/* Set CS# low */
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
	if (wait_ready(500)) return 1;	/* Wait for card ready */

	deselect();
    2942:	0e 94 8c 14 	call	0x2918	; 0x2918 <deselect>
	return 0;	/* Timeout */
    2946:	80 e0       	ldi	r24, 0x00	; 0
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	08 95       	ret
static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();		/* Set CS# low */
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
	if (wait_ready(500)) return 1;	/* Wait for card ready */
    294c:	81 e0       	ldi	r24, 0x01	; 1
    294e:	90 e0       	ldi	r25, 0x00	; 0

	deselect();
	return 0;	/* Timeout */
}
    2950:	08 95       	ret

00002952 <rcvr_datablock>:
static
int rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
    2952:	0f 93       	push	r16
    2954:	1f 93       	push	r17
    2956:	cf 93       	push	r28
    2958:	df 93       	push	r29
    295a:	08 2f       	mov	r16, r24
    295c:	19 2f       	mov	r17, r25
    295e:	eb 01       	movw	r28, r22
	BYTE token;


	Timer1 = 20;
    2960:	84 e1       	ldi	r24, 0x14	; 20
    2962:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <Timer1>
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
    2966:	8f ef       	ldi	r24, 0xFF	; 255
    2968:	0e 94 86 14 	call	0x290c	; 0x290c <xchg_spi>
	} while ((token == 0xFF) && Timer1);
    296c:	8f 3f       	cpi	r24, 0xFF	; 255
    296e:	39 f4       	brne	.+14     	; 0x297e <rcvr_datablock+0x2c>
    2970:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <Timer1>
    2974:	81 11       	cpse	r24, r1
    2976:	f7 cf       	rjmp	.-18     	; 0x2966 <rcvr_datablock+0x14>
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    2978:	80 e0       	ldi	r24, 0x00	; 0
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	22 c0       	rjmp	.+68     	; 0x29c2 <rcvr_datablock+0x70>
    297e:	8e 3f       	cpi	r24, 0xFE	; 254
    2980:	f1 f4       	brne	.+60     	; 0x29be <rcvr_datablock+0x6c>
    2982:	e0 2f       	mov	r30, r16
    2984:	f1 2f       	mov	r31, r17
	BYTE *p,	/* Data buffer */
	UINT cnt	/* Size of data block (must be multiple of 2) */
)
{
	do {
		SPDR = 0xFF; loop_until_bit_is_set(SPSR,SPIF); *p++ = SPDR;
    2986:	8f ef       	ldi	r24, 0xFF	; 255
    2988:	8e bd       	out	0x2e, r24	; 46
    298a:	0d b4       	in	r0, 0x2d	; 45
    298c:	07 fe       	sbrs	r0, 7
    298e:	fd cf       	rjmp	.-6      	; 0x298a <rcvr_datablock+0x38>
    2990:	9e b5       	in	r25, 0x2e	; 46
    2992:	df 01       	movw	r26, r30
    2994:	90 83       	st	Z, r25
		SPDR = 0xFF; loop_until_bit_is_set(SPSR,SPIF); *p++ = SPDR;
    2996:	8e bd       	out	0x2e, r24	; 46
    2998:	0d b4       	in	r0, 0x2d	; 45
    299a:	07 fe       	sbrs	r0, 7
    299c:	fd cf       	rjmp	.-6      	; 0x2998 <rcvr_datablock+0x46>
    299e:	9e b5       	in	r25, 0x2e	; 46
    29a0:	11 96       	adiw	r26, 0x01	; 1
    29a2:	9c 93       	st	X, r25
	} while (cnt -= 2);
    29a4:	22 97       	sbiw	r28, 0x02	; 2
    29a6:	32 96       	adiw	r30, 0x02	; 2
    29a8:	20 97       	sbiw	r28, 0x00	; 0
    29aa:	71 f7       	brne	.-36     	; 0x2988 <rcvr_datablock+0x36>
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */

	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
    29ac:	8f ef       	ldi	r24, 0xFF	; 255
    29ae:	0e 94 86 14 	call	0x290c	; 0x290c <xchg_spi>
	xchg_spi(0xFF);
    29b2:	8f ef       	ldi	r24, 0xFF	; 255
    29b4:	0e 94 86 14 	call	0x290c	; 0x290c <xchg_spi>

	return 1;						/* Return with success */
    29b8:	81 e0       	ldi	r24, 0x01	; 1
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	02 c0       	rjmp	.+4      	; 0x29c2 <rcvr_datablock+0x70>

	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    29be:	80 e0       	ldi	r24, 0x00	; 0
    29c0:	90 e0       	ldi	r25, 0x00	; 0
	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
	xchg_spi(0xFF);

	return 1;						/* Return with success */
}
    29c2:	df 91       	pop	r29
    29c4:	cf 91       	pop	r28
    29c6:	1f 91       	pop	r17
    29c8:	0f 91       	pop	r16
    29ca:	08 95       	ret

000029cc <send_cmd>:
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
    29cc:	ff 92       	push	r15
    29ce:	0f 93       	push	r16
    29d0:	1f 93       	push	r17
    29d2:	cf 93       	push	r28
    29d4:	df 93       	push	r29
    29d6:	c8 2f       	mov	r28, r24
    29d8:	d4 2f       	mov	r29, r20
    29da:	15 2f       	mov	r17, r21
    29dc:	06 2f       	mov	r16, r22
    29de:	f7 2e       	mov	r15, r23
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    29e0:	88 23       	and	r24, r24
    29e2:	54 f4       	brge	.+20     	; 0x29f8 <send_cmd+0x2c>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    29e4:	40 e0       	ldi	r20, 0x00	; 0
    29e6:	50 e0       	ldi	r21, 0x00	; 0
    29e8:	ba 01       	movw	r22, r20
    29ea:	87 e3       	ldi	r24, 0x37	; 55
    29ec:	0e 94 e6 14 	call	0x29cc	; 0x29cc <send_cmd>
		if (res > 1) return res;
    29f0:	82 30       	cpi	r24, 0x02	; 2
    29f2:	08 f0       	brcs	.+2      	; 0x29f6 <send_cmd+0x2a>
    29f4:	4e c0       	rjmp	.+156    	; 0x2a92 <send_cmd+0xc6>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    29f6:	cf 77       	andi	r28, 0x7F	; 127
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
    29f8:	cc 30       	cpi	r28, 0x0C	; 12
    29fa:	39 f1       	breq	.+78     	; 0x2a4a <send_cmd+0x7e>
		deselect();
    29fc:	0e 94 8c 14 	call	0x2918	; 0x2918 <deselect>
		if (!select()) return 0xFF;
    2a00:	0e 94 91 14 	call	0x2922	; 0x2922 <select>
    2a04:	89 2b       	or	r24, r25
    2a06:	f9 f0       	breq	.+62     	; 0x2a46 <send_cmd+0x7a>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
    2a08:	8c 2f       	mov	r24, r28
    2a0a:	80 64       	ori	r24, 0x40	; 64
    2a0c:	0e 94 86 14 	call	0x290c	; 0x290c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    2a10:	8f 2d       	mov	r24, r15
    2a12:	0e 94 86 14 	call	0x290c	; 0x290c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    2a16:	80 2f       	mov	r24, r16
    2a18:	0e 94 86 14 	call	0x290c	; 0x290c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    2a1c:	81 2f       	mov	r24, r17
    2a1e:	0e 94 86 14 	call	0x290c	; 0x290c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
    2a22:	8d 2f       	mov	r24, r29
    2a24:	0e 94 86 14 	call	0x290c	; 0x290c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
    2a28:	cc 23       	and	r28, r28
    2a2a:	79 f1       	breq	.+94     	; 0x2a8a <send_cmd+0xbe>
    2a2c:	2b c0       	rjmp	.+86     	; 0x2a84 <send_cmd+0xb8>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
    2a2e:	8f ef       	ldi	r24, 0xFF	; 255
    2a30:	0e 94 86 14 	call	0x290c	; 0x290c <xchg_spi>
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
    2a34:	ca e0       	ldi	r28, 0x0A	; 10

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = xchg_spi(0xFF);
    2a36:	8f ef       	ldi	r24, 0xFF	; 255
    2a38:	0e 94 86 14 	call	0x290c	; 0x290c <xchg_spi>
	while ((res & 0x80) && --n);
    2a3c:	88 23       	and	r24, r24
    2a3e:	4c f5       	brge	.+82     	; 0x2a92 <send_cmd+0xc6>
    2a40:	c1 50       	subi	r28, 0x01	; 1
    2a42:	c9 f7       	brne	.-14     	; 0x2a36 <send_cmd+0x6a>
    2a44:	26 c0       	rjmp	.+76     	; 0x2a92 <send_cmd+0xc6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
		deselect();
		if (!select()) return 0xFF;
    2a46:	8f ef       	ldi	r24, 0xFF	; 255
    2a48:	24 c0       	rjmp	.+72     	; 0x2a92 <send_cmd+0xc6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
    2a4a:	8c e4       	ldi	r24, 0x4C	; 76
    2a4c:	0e 94 86 14 	call	0x290c	; 0x290c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    2a50:	8f 2d       	mov	r24, r15
    2a52:	0e 94 86 14 	call	0x290c	; 0x290c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    2a56:	80 2f       	mov	r24, r16
    2a58:	0e 94 86 14 	call	0x290c	; 0x290c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    2a5c:	81 2f       	mov	r24, r17
    2a5e:	0e 94 86 14 	call	0x290c	; 0x290c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
    2a62:	8d 2f       	mov	r24, r29
    2a64:	0e 94 86 14 	call	0x290c	; 0x290c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);
    2a68:	81 e0       	ldi	r24, 0x01	; 1
    2a6a:	0e 94 86 14 	call	0x290c	; 0x290c <xchg_spi>

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
    2a6e:	cc 30       	cpi	r28, 0x0C	; 12
    2a70:	f1 f2       	breq	.-68     	; 0x2a2e <send_cmd+0x62>
    2a72:	e0 cf       	rjmp	.-64     	; 0x2a34 <send_cmd+0x68>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);
    2a74:	87 e8       	ldi	r24, 0x87	; 135
    2a76:	0e 94 86 14 	call	0x290c	; 0x290c <xchg_spi>
    2a7a:	dc cf       	rjmp	.-72     	; 0x2a34 <send_cmd+0x68>
    2a7c:	81 e0       	ldi	r24, 0x01	; 1
    2a7e:	0e 94 86 14 	call	0x290c	; 0x290c <xchg_spi>
    2a82:	d8 cf       	rjmp	.-80     	; 0x2a34 <send_cmd+0x68>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
    2a84:	c8 30       	cpi	r28, 0x08	; 8
    2a86:	b1 f3       	breq	.-20     	; 0x2a74 <send_cmd+0xa8>
    2a88:	f9 cf       	rjmp	.-14     	; 0x2a7c <send_cmd+0xb0>
	xchg_spi(n);
    2a8a:	85 e9       	ldi	r24, 0x95	; 149
    2a8c:	0e 94 86 14 	call	0x290c	; 0x290c <xchg_spi>
    2a90:	d1 cf       	rjmp	.-94     	; 0x2a34 <send_cmd+0x68>
	do
		res = xchg_spi(0xFF);
	while ((res & 0x80) && --n);

	return res;			/* Return with the response value */
}
    2a92:	df 91       	pop	r29
    2a94:	cf 91       	pop	r28
    2a96:	1f 91       	pop	r17
    2a98:	0f 91       	pop	r16
    2a9a:	ff 90       	pop	r15
    2a9c:	08 95       	ret

00002a9e <xmit_datablock>:
static
int xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
    2a9e:	1f 93       	push	r17
    2aa0:	cf 93       	push	r28
    2aa2:	df 93       	push	r29
    2aa4:	ec 01       	movw	r28, r24
    2aa6:	16 2f       	mov	r17, r22
)
{
	BYTE d;


	Timer2 = wt / 10;
    2aa8:	82 e3       	ldi	r24, 0x32	; 50
    2aaa:	80 93 67 03 	sts	0x0367, r24	; 0x800367 <Timer2>
	do
		d = xchg_spi(0xFF);
    2aae:	8f ef       	ldi	r24, 0xFF	; 255
    2ab0:	0e 94 86 14 	call	0x290c	; 0x290c <xchg_spi>
	while (d != 0xFF && Timer2);
    2ab4:	8f 3f       	cpi	r24, 0xFF	; 255
    2ab6:	31 f0       	breq	.+12     	; 0x2ac4 <xmit_datablock+0x26>
    2ab8:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <Timer2>
    2abc:	81 11       	cpse	r24, r1
    2abe:	f7 cf       	rjmp	.-18     	; 0x2aae <xmit_datablock+0x10>
)
{
	BYTE resp;


	if (!wait_ready(500)) return 0;
    2ac0:	90 e0       	ldi	r25, 0x00	; 0
    2ac2:	2b c0       	rjmp	.+86     	; 0x2b1a <xmit_datablock+0x7c>

	xchg_spi(token);					/* Xmit data token */
    2ac4:	81 2f       	mov	r24, r17
    2ac6:	0e 94 86 14 	call	0x290c	; 0x290c <xchg_spi>
	if (token != 0xFD) {	/* Is data token */
    2aca:	1d 3f       	cpi	r17, 0xFD	; 253
    2acc:	21 f1       	breq	.+72     	; 0x2b16 <xmit_datablock+0x78>
    2ace:	fe 01       	movw	r30, r28
    2ad0:	9e 01       	movw	r18, r28
    2ad2:	3e 5f       	subi	r19, 0xFE	; 254
    2ad4:	df 01       	movw	r26, r30
	const BYTE *p,	/* Data block to be sent */
	UINT cnt		/* Size of data block (must be multiple of 2) */
)
{
	do {
		SPDR = *p++; loop_until_bit_is_set(SPSR,SPIF);
    2ad6:	90 81       	ld	r25, Z
    2ad8:	9e bd       	out	0x2e, r25	; 46
    2ada:	0d b4       	in	r0, 0x2d	; 45
    2adc:	07 fe       	sbrs	r0, 7
    2ade:	fd cf       	rjmp	.-6      	; 0x2ada <xmit_datablock+0x3c>
		SPDR = *p++; loop_until_bit_is_set(SPSR,SPIF);
    2ae0:	11 96       	adiw	r26, 0x01	; 1
    2ae2:	9c 91       	ld	r25, X
    2ae4:	9e bd       	out	0x2e, r25	; 46
    2ae6:	0d b4       	in	r0, 0x2d	; 45
    2ae8:	07 fe       	sbrs	r0, 7
    2aea:	fd cf       	rjmp	.-6      	; 0x2ae6 <xmit_datablock+0x48>
    2aec:	32 96       	adiw	r30, 0x02	; 2
	} while (cnt -= 2);
    2aee:	e2 17       	cp	r30, r18
    2af0:	f3 07       	cpc	r31, r19
    2af2:	81 f7       	brne	.-32     	; 0x2ad4 <xmit_datablock+0x36>
	if (!wait_ready(500)) return 0;

	xchg_spi(token);					/* Xmit data token */
	if (token != 0xFD) {	/* Is data token */
		xmit_spi_multi(buff, 512);		/* Xmit the data block to the MMC */
		xchg_spi(0xFF);					/* CRC (Dummy) */
    2af4:	8f ef       	ldi	r24, 0xFF	; 255
    2af6:	0e 94 86 14 	call	0x290c	; 0x290c <xchg_spi>
		xchg_spi(0xFF);
    2afa:	8f ef       	ldi	r24, 0xFF	; 255
    2afc:	0e 94 86 14 	call	0x290c	; 0x290c <xchg_spi>
		resp = xchg_spi(0xFF);			/* Reveive data response */
    2b00:	8f ef       	ldi	r24, 0xFF	; 255
    2b02:	0e 94 86 14 	call	0x290c	; 0x290c <xchg_spi>
)
{
	BYTE resp;


	if (!wait_ready(500)) return 0;
    2b06:	28 2f       	mov	r18, r24
    2b08:	2f 71       	andi	r18, 0x1F	; 31
    2b0a:	81 e0       	ldi	r24, 0x01	; 1
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
    2b0e:	25 30       	cpi	r18, 0x05	; 5
    2b10:	21 f0       	breq	.+8      	; 0x2b1a <xmit_datablock+0x7c>
    2b12:	80 e0       	ldi	r24, 0x00	; 0
    2b14:	02 c0       	rjmp	.+4      	; 0x2b1a <xmit_datablock+0x7c>
		resp = xchg_spi(0xFF);			/* Reveive data response */
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return 0;
	}

	return 1;
    2b16:	81 e0       	ldi	r24, 0x01	; 1
    2b18:	90 e0       	ldi	r25, 0x00	; 0
}
    2b1a:	df 91       	pop	r29
    2b1c:	cf 91       	pop	r28
    2b1e:	1f 91       	pop	r17
    2b20:	08 95       	ret

00002b22 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
    2b22:	cf 92       	push	r12
    2b24:	df 92       	push	r13
    2b26:	ef 92       	push	r14
    2b28:	ff 92       	push	r15
    2b2a:	0f 93       	push	r16
    2b2c:	1f 93       	push	r17
    2b2e:	cf 93       	push	r28
    2b30:	df 93       	push	r29
    2b32:	00 d0       	rcall	.+0      	; 0x2b34 <disk_initialize+0x12>
    2b34:	00 d0       	rcall	.+0      	; 0x2b36 <disk_initialize+0x14>
    2b36:	cd b7       	in	r28, 0x3d	; 61
    2b38:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];

	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
    2b3a:	81 11       	cpse	r24, r1
    2b3c:	ab c0       	rjmp	.+342    	; 0x2c94 <disk_initialize+0x172>
	power_off();						/* Turn off the socket power to reset the card */
    2b3e:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <power_off>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
    2b42:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Stat>
    2b46:	81 ff       	sbrs	r24, 1
    2b48:	03 c0       	rjmp	.+6      	; 0x2b50 <disk_initialize+0x2e>
    2b4a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Stat>
    2b4e:	af c0       	rjmp	.+350    	; 0x2cae <disk_initialize+0x18c>

static
void power_on (void)
{
	// HACK
	DDRB |= (1<<PINB0); // Set SS as output to avoid bus contention....
    2b50:	20 9a       	sbi	0x04, 0	; 4
	
	PORTB |= (1<<PINB1) | (1<<PINB7);				/* Clock idles low */
    2b52:	85 b1       	in	r24, 0x05	; 5
    2b54:	82 68       	ori	r24, 0x82	; 130
    2b56:	85 b9       	out	0x05, r24	; 5
	DDRB  |= (1<<PINB1) | (1<<PINB2) | (1<<PINB7);	/* Configure SCK/MOSI/CS as output */
    2b58:	84 b1       	in	r24, 0x04	; 4
    2b5a:	86 68       	ori	r24, 0x86	; 134
    2b5c:	84 b9       	out	0x04, r24	; 4

	SPCR = 0x52;			/* Enable SPI function in mode 0 */
    2b5e:	82 e5       	ldi	r24, 0x52	; 82
    2b60:	8c bd       	out	0x2c, r24	; 44
	SPSR = 0x01;			/* SPI 2x mode */
    2b62:	91 e0       	ldi	r25, 0x01	; 1
    2b64:	9d bd       	out	0x2d, r25	; 45

	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
	power_off();						/* Turn off the socket power to reset the card */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
	power_on();							/* Turn on the socket power */
	FCLK_SLOW();
    2b66:	8c bd       	out	0x2c, r24	; 44
    2b68:	1a e0       	ldi	r17, 0x0A	; 10
	for (n = 10; n; n--) xchg_spi(0xFF);	/* 80 dummy clocks */
    2b6a:	8f ef       	ldi	r24, 0xFF	; 255
    2b6c:	0e 94 86 14 	call	0x290c	; 0x290c <xchg_spi>
    2b70:	11 50       	subi	r17, 0x01	; 1
    2b72:	d9 f7       	brne	.-10     	; 0x2b6a <disk_initialize+0x48>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    2b74:	40 e0       	ldi	r20, 0x00	; 0
    2b76:	50 e0       	ldi	r21, 0x00	; 0
    2b78:	ba 01       	movw	r22, r20
    2b7a:	80 e0       	ldi	r24, 0x00	; 0
    2b7c:	0e 94 e6 14 	call	0x29cc	; 0x29cc <send_cmd>
    2b80:	81 30       	cpi	r24, 0x01	; 1
    2b82:	09 f0       	breq	.+2      	; 0x2b86 <disk_initialize+0x64>
    2b84:	8f c0       	rjmp	.+286    	; 0x2ca4 <disk_initialize+0x182>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
    2b86:	84 e6       	ldi	r24, 0x64	; 100
    2b88:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <Timer1>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
    2b8c:	4a ea       	ldi	r20, 0xAA	; 170
    2b8e:	51 e0       	ldi	r21, 0x01	; 1
    2b90:	60 e0       	ldi	r22, 0x00	; 0
    2b92:	70 e0       	ldi	r23, 0x00	; 0
    2b94:	88 e0       	ldi	r24, 0x08	; 8
    2b96:	0e 94 e6 14 	call	0x29cc	; 0x29cc <send_cmd>
    2b9a:	81 30       	cpi	r24, 0x01	; 1
    2b9c:	09 f0       	breq	.+2      	; 0x2ba0 <disk_initialize+0x7e>
    2b9e:	41 c0       	rjmp	.+130    	; 0x2c22 <disk_initialize+0x100>
    2ba0:	ce 01       	movw	r24, r28
    2ba2:	01 96       	adiw	r24, 0x01	; 1
    2ba4:	6c 01       	movw	r12, r24
    2ba6:	7e 01       	movw	r14, r28
    2ba8:	95 e0       	ldi	r25, 0x05	; 5
    2baa:	e9 0e       	add	r14, r25
    2bac:	f1 1c       	adc	r15, r1
    2bae:	86 01       	movw	r16, r12
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
    2bb0:	8f ef       	ldi	r24, 0xFF	; 255
    2bb2:	0e 94 86 14 	call	0x290c	; 0x290c <xchg_spi>
    2bb6:	f8 01       	movw	r30, r16
    2bb8:	81 93       	st	Z+, r24
    2bba:	8f 01       	movw	r16, r30
    2bbc:	ee 15       	cp	r30, r14
    2bbe:	ff 05       	cpc	r31, r15
    2bc0:	b9 f7       	brne	.-18     	; 0x2bb0 <disk_initialize+0x8e>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
    2bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc4:	81 30       	cpi	r24, 0x01	; 1
    2bc6:	09 f0       	breq	.+2      	; 0x2bca <disk_initialize+0xa8>
    2bc8:	6d c0       	rjmp	.+218    	; 0x2ca4 <disk_initialize+0x182>
    2bca:	8c 81       	ldd	r24, Y+4	; 0x04
    2bcc:	8a 3a       	cpi	r24, 0xAA	; 170
    2bce:	09 f0       	breq	.+2      	; 0x2bd2 <disk_initialize+0xb0>
    2bd0:	69 c0       	rjmp	.+210    	; 0x2ca4 <disk_initialize+0x182>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    2bd2:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <Timer1>
    2bd6:	88 23       	and	r24, r24
    2bd8:	49 f0       	breq	.+18     	; 0x2bec <disk_initialize+0xca>
    2bda:	40 e0       	ldi	r20, 0x00	; 0
    2bdc:	50 e0       	ldi	r21, 0x00	; 0
    2bde:	60 e0       	ldi	r22, 0x00	; 0
    2be0:	70 e4       	ldi	r23, 0x40	; 64
    2be2:	89 ea       	ldi	r24, 0xA9	; 169
    2be4:	0e 94 e6 14 	call	0x29cc	; 0x29cc <send_cmd>
    2be8:	81 11       	cpse	r24, r1
    2bea:	f3 cf       	rjmp	.-26     	; 0x2bd2 <disk_initialize+0xb0>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    2bec:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <Timer1>
    2bf0:	88 23       	and	r24, r24
    2bf2:	09 f4       	brne	.+2      	; 0x2bf6 <disk_initialize+0xd4>
    2bf4:	57 c0       	rjmp	.+174    	; 0x2ca4 <disk_initialize+0x182>
    2bf6:	40 e0       	ldi	r20, 0x00	; 0
    2bf8:	50 e0       	ldi	r21, 0x00	; 0
    2bfa:	ba 01       	movw	r22, r20
    2bfc:	8a e3       	ldi	r24, 0x3A	; 58
    2bfe:	0e 94 e6 14 	call	0x29cc	; 0x29cc <send_cmd>
    2c02:	81 11       	cpse	r24, r1
    2c04:	4f c0       	rjmp	.+158    	; 0x2ca4 <disk_initialize+0x182>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
    2c06:	8f ef       	ldi	r24, 0xFF	; 255
    2c08:	0e 94 86 14 	call	0x290c	; 0x290c <xchg_spi>
    2c0c:	f6 01       	movw	r30, r12
    2c0e:	81 93       	st	Z+, r24
    2c10:	6f 01       	movw	r12, r30
    2c12:	ee 16       	cp	r14, r30
    2c14:	ff 06       	cpc	r15, r31
    2c16:	b9 f7       	brne	.-18     	; 0x2c06 <disk_initialize+0xe4>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    2c18:	89 81       	ldd	r24, Y+1	; 0x01
    2c1a:	86 fd       	sbrc	r24, 6
    2c1c:	3d c0       	rjmp	.+122    	; 0x2c98 <disk_initialize+0x176>
    2c1e:	84 e0       	ldi	r24, 0x04	; 4
    2c20:	3c c0       	rjmp	.+120    	; 0x2c9a <disk_initialize+0x178>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    2c22:	40 e0       	ldi	r20, 0x00	; 0
    2c24:	50 e0       	ldi	r21, 0x00	; 0
    2c26:	ba 01       	movw	r22, r20
    2c28:	89 ea       	ldi	r24, 0xA9	; 169
    2c2a:	0e 94 e6 14 	call	0x29cc	; 0x29cc <send_cmd>
    2c2e:	82 30       	cpi	r24, 0x02	; 2
    2c30:	18 f0       	brcs	.+6      	; 0x2c38 <disk_initialize+0x116>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    2c32:	01 e0       	ldi	r16, 0x01	; 1
    2c34:	11 e0       	ldi	r17, 0x01	; 1
    2c36:	02 c0       	rjmp	.+4      	; 0x2c3c <disk_initialize+0x11a>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    2c38:	02 e0       	ldi	r16, 0x02	; 2
    2c3a:	19 ea       	ldi	r17, 0xA9	; 169
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
    2c3c:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <Timer1>
    2c40:	88 23       	and	r24, r24
    2c42:	41 f0       	breq	.+16     	; 0x2c54 <disk_initialize+0x132>
    2c44:	40 e0       	ldi	r20, 0x00	; 0
    2c46:	50 e0       	ldi	r21, 0x00	; 0
    2c48:	ba 01       	movw	r22, r20
    2c4a:	81 2f       	mov	r24, r17
    2c4c:	0e 94 e6 14 	call	0x29cc	; 0x29cc <send_cmd>
    2c50:	81 11       	cpse	r24, r1
    2c52:	f4 cf       	rjmp	.-24     	; 0x2c3c <disk_initialize+0x11a>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    2c54:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <Timer1>
    2c58:	88 23       	and	r24, r24
    2c5a:	21 f1       	breq	.+72     	; 0x2ca4 <disk_initialize+0x182>
    2c5c:	40 e0       	ldi	r20, 0x00	; 0
    2c5e:	52 e0       	ldi	r21, 0x02	; 2
    2c60:	60 e0       	ldi	r22, 0x00	; 0
    2c62:	70 e0       	ldi	r23, 0x00	; 0
    2c64:	80 e1       	ldi	r24, 0x10	; 16
    2c66:	0e 94 e6 14 	call	0x29cc	; 0x29cc <send_cmd>
    2c6a:	81 11       	cpse	r24, r1
    2c6c:	1b c0       	rjmp	.+54     	; 0x2ca4 <disk_initialize+0x182>
				ty = 0;
		}
	}
	CardType = ty;
    2c6e:	00 93 66 03 	sts	0x0366, r16	; 0x800366 <CardType>
	deselect();
    2c72:	0e 94 8c 14 	call	0x2918	; 0x2918 <deselect>

	if (ty) {			/* Initialization succeded */
    2c76:	00 23       	and	r16, r16
    2c78:	41 f0       	breq	.+16     	; 0x2c8a <disk_initialize+0x168>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
    2c7a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Stat>
    2c7e:	8e 7f       	andi	r24, 0xFE	; 254
    2c80:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <Stat>
		FCLK_FAST();
    2c84:	80 e5       	ldi	r24, 0x50	; 80
    2c86:	8c bd       	out	0x2c, r24	; 44
    2c88:	02 c0       	rjmp	.+4      	; 0x2c8e <disk_initialize+0x16c>
	} else {			/* Initialization failed */
		power_off();
    2c8a:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <power_off>
	}

	return Stat;
    2c8e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Stat>
    2c92:	0d c0       	rjmp	.+26     	; 0x2cae <disk_initialize+0x18c>
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	BYTE n, cmd, ty, ocr[4];

	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
    2c94:	81 e0       	ldi	r24, 0x01	; 1
    2c96:	0b c0       	rjmp	.+22     	; 0x2cae <disk_initialize+0x18c>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    2c98:	8c e0       	ldi	r24, 0x0C	; 12
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    2c9a:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <CardType>
	deselect();
    2c9e:	0e 94 8c 14 	call	0x2918	; 0x2918 <deselect>
    2ca2:	eb cf       	rjmp	.-42     	; 0x2c7a <disk_initialize+0x158>
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    2ca4:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <CardType>
	deselect();
    2ca8:	0e 94 8c 14 	call	0x2918	; 0x2918 <deselect>
    2cac:	ee cf       	rjmp	.-36     	; 0x2c8a <disk_initialize+0x168>
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
}
    2cae:	0f 90       	pop	r0
    2cb0:	0f 90       	pop	r0
    2cb2:	0f 90       	pop	r0
    2cb4:	0f 90       	pop	r0
    2cb6:	df 91       	pop	r29
    2cb8:	cf 91       	pop	r28
    2cba:	1f 91       	pop	r17
    2cbc:	0f 91       	pop	r16
    2cbe:	ff 90       	pop	r15
    2cc0:	ef 90       	pop	r14
    2cc2:	df 90       	pop	r13
    2cc4:	cf 90       	pop	r12
    2cc6:	08 95       	ret

00002cc8 <disk_status>:

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
    2cc8:	81 11       	cpse	r24, r1
    2cca:	03 c0       	rjmp	.+6      	; 0x2cd2 <disk_status+0xa>
	return Stat;
    2ccc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Stat>
    2cd0:	08 95       	ret

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
    2cd2:	81 e0       	ldi	r24, 0x01	; 1
	return Stat;
}
    2cd4:	08 95       	ret

00002cd6 <disk_read>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    2cd6:	ff 92       	push	r15
    2cd8:	0f 93       	push	r16
    2cda:	1f 93       	push	r17
    2cdc:	cf 93       	push	r28
    2cde:	df 93       	push	r29
    2ce0:	eb 01       	movw	r28, r22
	BYTE cmd;


	if (pdrv || !count) return RES_PARERR;
    2ce2:	81 11       	cpse	r24, r1
    2ce4:	43 c0       	rjmp	.+134    	; 0x2d6c <disk_read+0x96>
    2ce6:	01 15       	cp	r16, r1
    2ce8:	11 05       	cpc	r17, r1
    2cea:	09 f4       	brne	.+2      	; 0x2cee <disk_read+0x18>
    2cec:	41 c0       	rjmp	.+130    	; 0x2d70 <disk_read+0x9a>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    2cee:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Stat>
    2cf2:	80 fd       	sbrc	r24, 0
    2cf4:	3f c0       	rjmp	.+126    	; 0x2d74 <disk_read+0x9e>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    2cf6:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <CardType>
    2cfa:	83 fd       	sbrc	r24, 3
    2cfc:	09 c0       	rjmp	.+18     	; 0x2d10 <disk_read+0x3a>
    2cfe:	01 2e       	mov	r0, r17
    2d00:	19 e0       	ldi	r17, 0x09	; 9
    2d02:	22 0f       	add	r18, r18
    2d04:	33 1f       	adc	r19, r19
    2d06:	44 1f       	adc	r20, r20
    2d08:	55 1f       	adc	r21, r21
    2d0a:	1a 95       	dec	r17
    2d0c:	d1 f7       	brne	.-12     	; 0x2d02 <disk_read+0x2c>
    2d0e:	10 2d       	mov	r17, r0

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    2d10:	02 30       	cpi	r16, 0x02	; 2
    2d12:	11 05       	cpc	r17, r1
    2d14:	28 f4       	brcc	.+10     	; 0x2d20 <disk_read+0x4a>
    2d16:	0f 2e       	mov	r0, r31
    2d18:	f1 e1       	ldi	r31, 0x11	; 17
    2d1a:	ff 2e       	mov	r15, r31
    2d1c:	f0 2d       	mov	r31, r0
    2d1e:	04 c0       	rjmp	.+8      	; 0x2d28 <disk_read+0x52>
    2d20:	0f 2e       	mov	r0, r31
    2d22:	f2 e1       	ldi	r31, 0x12	; 18
    2d24:	ff 2e       	mov	r15, r31
    2d26:	f0 2d       	mov	r31, r0
	if (send_cmd(cmd, sector) == 0) {
    2d28:	ba 01       	movw	r22, r20
    2d2a:	a9 01       	movw	r20, r18
    2d2c:	8f 2d       	mov	r24, r15
    2d2e:	0e 94 e6 14 	call	0x29cc	; 0x29cc <send_cmd>
    2d32:	81 11       	cpse	r24, r1
    2d34:	14 c0       	rjmp	.+40     	; 0x2d5e <disk_read+0x88>
		do {
			if (!rcvr_datablock(buff, 512)) break;
    2d36:	60 e0       	ldi	r22, 0x00	; 0
    2d38:	72 e0       	ldi	r23, 0x02	; 2
    2d3a:	ce 01       	movw	r24, r28
    2d3c:	0e 94 a9 14 	call	0x2952	; 0x2952 <rcvr_datablock>
    2d40:	89 2b       	or	r24, r25
    2d42:	21 f0       	breq	.+8      	; 0x2d4c <disk_read+0x76>
			buff += 512;
    2d44:	de 5f       	subi	r29, 0xFE	; 254
		} while (--count);
    2d46:	01 50       	subi	r16, 0x01	; 1
    2d48:	11 09       	sbc	r17, r1
    2d4a:	a9 f7       	brne	.-22     	; 0x2d36 <disk_read+0x60>
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
    2d4c:	82 e1       	ldi	r24, 0x12	; 18
    2d4e:	f8 12       	cpse	r15, r24
    2d50:	06 c0       	rjmp	.+12     	; 0x2d5e <disk_read+0x88>
    2d52:	40 e0       	ldi	r20, 0x00	; 0
    2d54:	50 e0       	ldi	r21, 0x00	; 0
    2d56:	ba 01       	movw	r22, r20
    2d58:	8c e0       	ldi	r24, 0x0C	; 12
    2d5a:	0e 94 e6 14 	call	0x29cc	; 0x29cc <send_cmd>
	}
	deselect();
    2d5e:	0e 94 8c 14 	call	0x2918	; 0x2918 <deselect>

	return count ? RES_ERROR : RES_OK;
    2d62:	81 e0       	ldi	r24, 0x01	; 1
    2d64:	01 2b       	or	r16, r17
    2d66:	39 f4       	brne	.+14     	; 0x2d76 <disk_read+0xa0>
    2d68:	80 e0       	ldi	r24, 0x00	; 0
    2d6a:	05 c0       	rjmp	.+10     	; 0x2d76 <disk_read+0xa0>
)
{
	BYTE cmd;


	if (pdrv || !count) return RES_PARERR;
    2d6c:	84 e0       	ldi	r24, 0x04	; 4
    2d6e:	03 c0       	rjmp	.+6      	; 0x2d76 <disk_read+0xa0>
    2d70:	84 e0       	ldi	r24, 0x04	; 4
    2d72:	01 c0       	rjmp	.+2      	; 0x2d76 <disk_read+0xa0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    2d74:	83 e0       	ldi	r24, 0x03	; 3
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    2d76:	df 91       	pop	r29
    2d78:	cf 91       	pop	r28
    2d7a:	1f 91       	pop	r17
    2d7c:	0f 91       	pop	r16
    2d7e:	ff 90       	pop	r15
    2d80:	08 95       	ret

00002d82 <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    2d82:	cf 92       	push	r12
    2d84:	df 92       	push	r13
    2d86:	ef 92       	push	r14
    2d88:	ff 92       	push	r15
    2d8a:	0f 93       	push	r16
    2d8c:	1f 93       	push	r17
    2d8e:	cf 93       	push	r28
    2d90:	df 93       	push	r29
    2d92:	eb 01       	movw	r28, r22
    2d94:	69 01       	movw	r12, r18
    2d96:	7a 01       	movw	r14, r20
	if (pdrv || !count) return RES_PARERR;
    2d98:	81 11       	cpse	r24, r1
    2d9a:	58 c0       	rjmp	.+176    	; 0x2e4c <disk_write+0xca>
    2d9c:	01 15       	cp	r16, r1
    2d9e:	11 05       	cpc	r17, r1
    2da0:	09 f4       	brne	.+2      	; 0x2da4 <disk_write+0x22>
    2da2:	56 c0       	rjmp	.+172    	; 0x2e50 <disk_write+0xce>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    2da4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Stat>
    2da8:	80 fd       	sbrc	r24, 0
    2daa:	54 c0       	rjmp	.+168    	; 0x2e54 <disk_write+0xd2>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    2dac:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Stat>
    2db0:	82 fd       	sbrc	r24, 2
    2db2:	52 c0       	rjmp	.+164    	; 0x2e58 <disk_write+0xd6>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    2db4:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <CardType>
    2db8:	83 fd       	sbrc	r24, 3
    2dba:	09 c0       	rjmp	.+18     	; 0x2dce <disk_write+0x4c>
    2dbc:	0b 2e       	mov	r0, r27
    2dbe:	b9 e0       	ldi	r27, 0x09	; 9
    2dc0:	cc 0c       	add	r12, r12
    2dc2:	dd 1c       	adc	r13, r13
    2dc4:	ee 1c       	adc	r14, r14
    2dc6:	ff 1c       	adc	r15, r15
    2dc8:	ba 95       	dec	r27
    2dca:	d1 f7       	brne	.-12     	; 0x2dc0 <disk_write+0x3e>
    2dcc:	b0 2d       	mov	r27, r0

	if (count == 1) {	/* Single block write */
    2dce:	01 30       	cpi	r16, 0x01	; 1
    2dd0:	11 05       	cpc	r17, r1
    2dd2:	99 f4       	brne	.+38     	; 0x2dfa <disk_write+0x78>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    2dd4:	b7 01       	movw	r22, r14
    2dd6:	a6 01       	movw	r20, r12
    2dd8:	88 e1       	ldi	r24, 0x18	; 24
    2dda:	0e 94 e6 14 	call	0x29cc	; 0x29cc <send_cmd>
    2dde:	81 11       	cpse	r24, r1
    2de0:	2e c0       	rjmp	.+92     	; 0x2e3e <disk_write+0xbc>
			&& xmit_datablock(buff, 0xFE))
    2de2:	6e ef       	ldi	r22, 0xFE	; 254
    2de4:	ce 01       	movw	r24, r28
    2de6:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <xmit_datablock>
    2dea:	31 e0       	ldi	r19, 0x01	; 1
    2dec:	20 e0       	ldi	r18, 0x00	; 0
    2dee:	89 2b       	or	r24, r25
    2df0:	09 f0       	breq	.+2      	; 0x2df4 <disk_write+0x72>
    2df2:	30 e0       	ldi	r19, 0x00	; 0
    2df4:	03 2f       	mov	r16, r19
    2df6:	12 2f       	mov	r17, r18
    2df8:	22 c0       	rjmp	.+68     	; 0x2e3e <disk_write+0xbc>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    2dfa:	86 70       	andi	r24, 0x06	; 6
    2dfc:	31 f0       	breq	.+12     	; 0x2e0a <disk_write+0x88>
    2dfe:	a8 01       	movw	r20, r16
    2e00:	60 e0       	ldi	r22, 0x00	; 0
    2e02:	70 e0       	ldi	r23, 0x00	; 0
    2e04:	87 e9       	ldi	r24, 0x97	; 151
    2e06:	0e 94 e6 14 	call	0x29cc	; 0x29cc <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    2e0a:	b7 01       	movw	r22, r14
    2e0c:	a6 01       	movw	r20, r12
    2e0e:	89 e1       	ldi	r24, 0x19	; 25
    2e10:	0e 94 e6 14 	call	0x29cc	; 0x29cc <send_cmd>
    2e14:	81 11       	cpse	r24, r1
    2e16:	13 c0       	rjmp	.+38     	; 0x2e3e <disk_write+0xbc>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    2e18:	6c ef       	ldi	r22, 0xFC	; 252
    2e1a:	ce 01       	movw	r24, r28
    2e1c:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <xmit_datablock>
    2e20:	89 2b       	or	r24, r25
    2e22:	21 f0       	breq	.+8      	; 0x2e2c <disk_write+0xaa>
				buff += 512;
    2e24:	de 5f       	subi	r29, 0xFE	; 254
			} while (--count);
    2e26:	01 50       	subi	r16, 0x01	; 1
    2e28:	11 09       	sbc	r17, r1
    2e2a:	b1 f7       	brne	.-20     	; 0x2e18 <disk_write+0x96>
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    2e2c:	6d ef       	ldi	r22, 0xFD	; 253
    2e2e:	80 e0       	ldi	r24, 0x00	; 0
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <xmit_datablock>
    2e36:	89 2b       	or	r24, r25
    2e38:	11 f4       	brne	.+4      	; 0x2e3e <disk_write+0xbc>
				count = 1;
    2e3a:	01 e0       	ldi	r16, 0x01	; 1
    2e3c:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	deselect();
    2e3e:	0e 94 8c 14 	call	0x2918	; 0x2918 <deselect>

	return count ? RES_ERROR : RES_OK;
    2e42:	81 e0       	ldi	r24, 0x01	; 1
    2e44:	01 2b       	or	r16, r17
    2e46:	49 f4       	brne	.+18     	; 0x2e5a <disk_write+0xd8>
    2e48:	80 e0       	ldi	r24, 0x00	; 0
    2e4a:	07 c0       	rjmp	.+14     	; 0x2e5a <disk_write+0xd8>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
	if (pdrv || !count) return RES_PARERR;
    2e4c:	84 e0       	ldi	r24, 0x04	; 4
    2e4e:	05 c0       	rjmp	.+10     	; 0x2e5a <disk_write+0xd8>
    2e50:	84 e0       	ldi	r24, 0x04	; 4
    2e52:	03 c0       	rjmp	.+6      	; 0x2e5a <disk_write+0xd8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    2e54:	83 e0       	ldi	r24, 0x03	; 3
    2e56:	01 c0       	rjmp	.+2      	; 0x2e5a <disk_write+0xd8>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    2e58:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    2e5a:	df 91       	pop	r29
    2e5c:	cf 91       	pop	r28
    2e5e:	1f 91       	pop	r17
    2e60:	0f 91       	pop	r16
    2e62:	ff 90       	pop	r15
    2e64:	ef 90       	pop	r14
    2e66:	df 90       	pop	r13
    2e68:	cf 90       	pop	r12
    2e6a:	08 95       	ret

00002e6c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    2e6c:	ef 92       	push	r14
    2e6e:	ff 92       	push	r15
    2e70:	0f 93       	push	r16
    2e72:	1f 93       	push	r17
    2e74:	cf 93       	push	r28
    2e76:	df 93       	push	r29
    2e78:	cd b7       	in	r28, 0x3d	; 61
    2e7a:	de b7       	in	r29, 0x3e	; 62
    2e7c:	60 97       	sbiw	r28, 0x10	; 16
    2e7e:	0f b6       	in	r0, 0x3f	; 63
    2e80:	f8 94       	cli
    2e82:	de bf       	out	0x3e, r29	; 62
    2e84:	0f be       	out	0x3f, r0	; 63
    2e86:	cd bf       	out	0x3d, r28	; 61
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (pdrv) return RES_PARERR;
    2e88:	81 11       	cpse	r24, r1
    2e8a:	94 c1       	rjmp	.+808    	; 0x31b4 <disk_ioctl+0x348>

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    2e8c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Stat>
    2e90:	80 fd       	sbrc	r24, 0
    2e92:	92 c1       	rjmp	.+804    	; 0x31b8 <disk_ioctl+0x34c>
    2e94:	8a 01       	movw	r16, r20

	switch (cmd) {
    2e96:	86 2f       	mov	r24, r22
    2e98:	90 e0       	ldi	r25, 0x00	; 0
    2e9a:	87 33       	cpi	r24, 0x37	; 55
    2e9c:	91 05       	cpc	r25, r1
    2e9e:	08 f0       	brcs	.+2      	; 0x2ea2 <disk_ioctl+0x36>
    2ea0:	70 c1       	rjmp	.+736    	; 0x3182 <disk_ioctl+0x316>
    2ea2:	fc 01       	movw	r30, r24
    2ea4:	ea 5a       	subi	r30, 0xAA	; 170
    2ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea8:	0c 94 83 20 	jmp	0x4106	; 0x4106 <__tablejump2__>
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
    2eac:	0e 94 91 14 	call	0x2922	; 0x2922 <select>
    2eb0:	11 e0       	ldi	r17, 0x01	; 1
    2eb2:	89 2b       	or	r24, r25
    2eb4:	09 f4       	brne	.+2      	; 0x2eb8 <disk_ioctl+0x4c>
    2eb6:	7a c1       	rjmp	.+756    	; 0x31ac <disk_ioctl+0x340>
    2eb8:	10 e0       	ldi	r17, 0x00	; 0
    2eba:	78 c1       	rjmp	.+752    	; 0x31ac <disk_ioctl+0x340>
		break;

	case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    2ebc:	40 e0       	ldi	r20, 0x00	; 0
    2ebe:	50 e0       	ldi	r21, 0x00	; 0
    2ec0:	ba 01       	movw	r22, r20
    2ec2:	89 e0       	ldi	r24, 0x09	; 9
    2ec4:	0e 94 e6 14 	call	0x29cc	; 0x29cc <send_cmd>
    2ec8:	81 11       	cpse	r24, r1
    2eca:	5d c1       	rjmp	.+698    	; 0x3186 <disk_ioctl+0x31a>
    2ecc:	60 e1       	ldi	r22, 0x10	; 16
    2ece:	70 e0       	ldi	r23, 0x00	; 0
    2ed0:	ce 01       	movw	r24, r28
    2ed2:	01 96       	adiw	r24, 0x01	; 1
    2ed4:	0e 94 a9 14 	call	0x2952	; 0x2952 <rcvr_datablock>
    2ed8:	89 2b       	or	r24, r25
    2eda:	09 f4       	brne	.+2      	; 0x2ede <disk_ioctl+0x72>
    2edc:	56 c1       	rjmp	.+684    	; 0x318a <disk_ioctl+0x31e>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    2ede:	89 81       	ldd	r24, Y+1	; 0x01
    2ee0:	82 95       	swap	r24
    2ee2:	86 95       	lsr	r24
    2ee4:	86 95       	lsr	r24
    2ee6:	83 70       	andi	r24, 0x03	; 3
    2ee8:	81 30       	cpi	r24, 0x01	; 1
    2eea:	31 f5       	brne	.+76     	; 0x2f38 <disk_ioctl+0xcc>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
    2eec:	29 85       	ldd	r18, Y+9	; 0x09
    2eee:	30 e0       	ldi	r19, 0x00	; 0
    2ef0:	32 2f       	mov	r19, r18
    2ef2:	22 27       	eor	r18, r18
    2ef4:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ef6:	28 0f       	add	r18, r24
    2ef8:	31 1d       	adc	r19, r1
    2efa:	88 85       	ldd	r24, Y+8	; 0x08
    2efc:	8f 73       	andi	r24, 0x3F	; 63
    2efe:	90 e0       	ldi	r25, 0x00	; 0
    2f00:	a0 e0       	ldi	r26, 0x00	; 0
    2f02:	b0 e0       	ldi	r27, 0x00	; 0
    2f04:	dc 01       	movw	r26, r24
    2f06:	99 27       	eor	r25, r25
    2f08:	88 27       	eor	r24, r24
    2f0a:	01 96       	adiw	r24, 0x01	; 1
    2f0c:	a1 1d       	adc	r26, r1
    2f0e:	b1 1d       	adc	r27, r1
    2f10:	82 0f       	add	r24, r18
    2f12:	93 1f       	adc	r25, r19
    2f14:	a1 1d       	adc	r26, r1
    2f16:	b1 1d       	adc	r27, r1
    2f18:	07 2e       	mov	r0, r23
    2f1a:	7a e0       	ldi	r23, 0x0A	; 10
    2f1c:	88 0f       	add	r24, r24
    2f1e:	99 1f       	adc	r25, r25
    2f20:	aa 1f       	adc	r26, r26
    2f22:	bb 1f       	adc	r27, r27
    2f24:	7a 95       	dec	r23
    2f26:	d1 f7       	brne	.-12     	; 0x2f1c <disk_ioctl+0xb0>
    2f28:	70 2d       	mov	r23, r0
    2f2a:	f8 01       	movw	r30, r16
    2f2c:	80 83       	st	Z, r24
    2f2e:	91 83       	std	Z+1, r25	; 0x01
    2f30:	a2 83       	std	Z+2, r26	; 0x02
    2f32:	b3 83       	std	Z+3, r27	; 0x03
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
			}
			res = RES_OK;
    2f34:	10 e0       	ldi	r17, 0x00	; 0
    2f36:	3a c1       	rjmp	.+628    	; 0x31ac <disk_ioctl+0x340>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
    2f38:	89 85       	ldd	r24, Y+9	; 0x09
    2f3a:	82 95       	swap	r24
    2f3c:	86 95       	lsr	r24
    2f3e:	86 95       	lsr	r24
    2f40:	83 70       	andi	r24, 0x03	; 3
    2f42:	28 85       	ldd	r18, Y+8	; 0x08
    2f44:	90 e0       	ldi	r25, 0x00	; 0
    2f46:	f4 e0       	ldi	r31, 0x04	; 4
    2f48:	2f 9f       	mul	r18, r31
    2f4a:	80 0d       	add	r24, r0
    2f4c:	91 1d       	adc	r25, r1
    2f4e:	11 24       	eor	r1, r1
    2f50:	9c 01       	movw	r18, r24
    2f52:	2f 5f       	subi	r18, 0xFF	; 255
    2f54:	3f 4f       	sbci	r19, 0xFF	; 255
    2f56:	8f 81       	ldd	r24, Y+7	; 0x07
    2f58:	83 70       	andi	r24, 0x03	; 3
    2f5a:	90 e0       	ldi	r25, 0x00	; 0
    2f5c:	98 2f       	mov	r25, r24
    2f5e:	88 27       	eor	r24, r24
    2f60:	99 0f       	add	r25, r25
    2f62:	99 0f       	add	r25, r25
    2f64:	82 0f       	add	r24, r18
    2f66:	93 1f       	adc	r25, r19
    2f68:	a0 e0       	ldi	r26, 0x00	; 0
    2f6a:	b0 e0       	ldi	r27, 0x00	; 0
    2f6c:	3e 81       	ldd	r19, Y+6	; 0x06
    2f6e:	3f 70       	andi	r19, 0x0F	; 15
    2f70:	2b 85       	ldd	r18, Y+11	; 0x0b
    2f72:	22 1f       	adc	r18, r18
    2f74:	22 27       	eor	r18, r18
    2f76:	22 1f       	adc	r18, r18
    2f78:	32 0f       	add	r19, r18
    2f7a:	2a 85       	ldd	r18, Y+10	; 0x0a
    2f7c:	23 70       	andi	r18, 0x03	; 3
    2f7e:	22 0f       	add	r18, r18
    2f80:	23 0f       	add	r18, r19
    2f82:	27 50       	subi	r18, 0x07	; 7
    2f84:	04 c0       	rjmp	.+8      	; 0x2f8e <disk_ioctl+0x122>
    2f86:	88 0f       	add	r24, r24
    2f88:	99 1f       	adc	r25, r25
    2f8a:	aa 1f       	adc	r26, r26
    2f8c:	bb 1f       	adc	r27, r27
    2f8e:	2a 95       	dec	r18
    2f90:	d2 f7       	brpl	.-12     	; 0x2f86 <disk_ioctl+0x11a>
    2f92:	f8 01       	movw	r30, r16
    2f94:	80 83       	st	Z, r24
    2f96:	91 83       	std	Z+1, r25	; 0x01
    2f98:	a2 83       	std	Z+2, r26	; 0x02
    2f9a:	b3 83       	std	Z+3, r27	; 0x03
			}
			res = RES_OK;
    2f9c:	10 e0       	ldi	r17, 0x00	; 0
    2f9e:	06 c1       	rjmp	.+524    	; 0x31ac <disk_ioctl+0x340>
		}
		break;

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDv2? */
    2fa0:	f0 90 66 03 	lds	r15, 0x0366	; 0x800366 <CardType>
    2fa4:	f2 fe       	sbrs	r15, 2
    2fa6:	33 c0       	rjmp	.+102    	; 0x300e <disk_ioctl+0x1a2>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    2fa8:	40 e0       	ldi	r20, 0x00	; 0
    2faa:	50 e0       	ldi	r21, 0x00	; 0
    2fac:	ba 01       	movw	r22, r20
    2fae:	8d e8       	ldi	r24, 0x8D	; 141
    2fb0:	0e 94 e6 14 	call	0x29cc	; 0x29cc <send_cmd>
    2fb4:	81 11       	cpse	r24, r1
    2fb6:	eb c0       	rjmp	.+470    	; 0x318e <disk_ioctl+0x322>
				xchg_spi(0xFF);
    2fb8:	8f ef       	ldi	r24, 0xFF	; 255
    2fba:	0e 94 86 14 	call	0x290c	; 0x290c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    2fbe:	60 e1       	ldi	r22, 0x10	; 16
    2fc0:	70 e0       	ldi	r23, 0x00	; 0
    2fc2:	ce 01       	movw	r24, r28
    2fc4:	01 96       	adiw	r24, 0x01	; 1
    2fc6:	0e 94 a9 14 	call	0x2952	; 0x2952 <rcvr_datablock>
    2fca:	89 2b       	or	r24, r25
    2fcc:	09 f4       	brne	.+2      	; 0x2fd0 <disk_ioctl+0x164>
    2fce:	e1 c0       	rjmp	.+450    	; 0x3192 <disk_ioctl+0x326>
    2fd0:	0f 2e       	mov	r0, r31
    2fd2:	f0 e3       	ldi	r31, 0x30	; 48
    2fd4:	ff 2e       	mov	r15, r31
    2fd6:	f0 2d       	mov	r31, r0
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
    2fd8:	8f ef       	ldi	r24, 0xFF	; 255
    2fda:	0e 94 86 14 	call	0x290c	; 0x290c <xchg_spi>
    2fde:	fa 94       	dec	r15
    2fe0:	f1 10       	cpse	r15, r1
    2fe2:	fa cf       	rjmp	.-12     	; 0x2fd8 <disk_ioctl+0x16c>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
    2fe4:	2b 85       	ldd	r18, Y+11	; 0x0b
    2fe6:	22 95       	swap	r18
    2fe8:	2f 70       	andi	r18, 0x0F	; 15
    2fea:	80 e1       	ldi	r24, 0x10	; 16
    2fec:	90 e0       	ldi	r25, 0x00	; 0
    2fee:	a0 e0       	ldi	r26, 0x00	; 0
    2ff0:	b0 e0       	ldi	r27, 0x00	; 0
    2ff2:	04 c0       	rjmp	.+8      	; 0x2ffc <disk_ioctl+0x190>
    2ff4:	88 0f       	add	r24, r24
    2ff6:	99 1f       	adc	r25, r25
    2ff8:	aa 1f       	adc	r26, r26
    2ffa:	bb 1f       	adc	r27, r27
    2ffc:	2a 95       	dec	r18
    2ffe:	d2 f7       	brpl	.-12     	; 0x2ff4 <disk_ioctl+0x188>
    3000:	f8 01       	movw	r30, r16
    3002:	80 83       	st	Z, r24
    3004:	91 83       	std	Z+1, r25	; 0x01
    3006:	a2 83       	std	Z+2, r26	; 0x02
    3008:	b3 83       	std	Z+3, r27	; 0x03
					res = RES_OK;
    300a:	10 e0       	ldi	r17, 0x00	; 0
    300c:	cf c0       	rjmp	.+414    	; 0x31ac <disk_ioctl+0x340>
				}
			}
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    300e:	40 e0       	ldi	r20, 0x00	; 0
    3010:	50 e0       	ldi	r21, 0x00	; 0
    3012:	ba 01       	movw	r22, r20
    3014:	89 e0       	ldi	r24, 0x09	; 9
    3016:	0e 94 e6 14 	call	0x29cc	; 0x29cc <send_cmd>
    301a:	81 11       	cpse	r24, r1
    301c:	bc c0       	rjmp	.+376    	; 0x3196 <disk_ioctl+0x32a>
    301e:	60 e1       	ldi	r22, 0x10	; 16
    3020:	70 e0       	ldi	r23, 0x00	; 0
    3022:	ce 01       	movw	r24, r28
    3024:	01 96       	adiw	r24, 0x01	; 1
    3026:	0e 94 a9 14 	call	0x2952	; 0x2952 <rcvr_datablock>
    302a:	89 2b       	or	r24, r25
    302c:	09 f4       	brne	.+2      	; 0x3030 <disk_ioctl+0x1c4>
    302e:	b5 c0       	rjmp	.+362    	; 0x319a <disk_ioctl+0x32e>
				if (CardType & CT_SD1) {	/* SDv1 */
    3030:	f1 fe       	sbrs	r15, 1
    3032:	20 c0       	rjmp	.+64     	; 0x3074 <disk_ioctl+0x208>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    3034:	2b 85       	ldd	r18, Y+11	; 0x0b
    3036:	2f 73       	andi	r18, 0x3F	; 63
    3038:	8c 85       	ldd	r24, Y+12	; 0x0c
    303a:	88 1f       	adc	r24, r24
    303c:	88 27       	eor	r24, r24
    303e:	88 1f       	adc	r24, r24
    3040:	90 e0       	ldi	r25, 0x00	; 0
    3042:	01 96       	adiw	r24, 0x01	; 1
    3044:	82 0f       	add	r24, r18
    3046:	91 1d       	adc	r25, r1
    3048:	82 0f       	add	r24, r18
    304a:	91 1d       	adc	r25, r1
    304c:	2e 85       	ldd	r18, Y+14	; 0x0e
    304e:	22 95       	swap	r18
    3050:	26 95       	lsr	r18
    3052:	26 95       	lsr	r18
    3054:	23 70       	andi	r18, 0x03	; 3
    3056:	21 50       	subi	r18, 0x01	; 1
    3058:	02 c0       	rjmp	.+4      	; 0x305e <disk_ioctl+0x1f2>
    305a:	88 0f       	add	r24, r24
    305c:	99 1f       	adc	r25, r25
    305e:	2a 95       	dec	r18
    3060:	e2 f7       	brpl	.-8      	; 0x305a <disk_ioctl+0x1ee>
    3062:	a0 e0       	ldi	r26, 0x00	; 0
    3064:	b0 e0       	ldi	r27, 0x00	; 0
    3066:	f8 01       	movw	r30, r16
    3068:	80 83       	st	Z, r24
    306a:	91 83       	std	Z+1, r25	; 0x01
    306c:	a2 83       	std	Z+2, r26	; 0x02
    306e:	b3 83       	std	Z+3, r27	; 0x03
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
    3070:	10 e0       	ldi	r17, 0x00	; 0
    3072:	9c c0       	rjmp	.+312    	; 0x31ac <disk_ioctl+0x340>
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
				if (CardType & CT_SD1) {	/* SDv1 */
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    3074:	8c 85       	ldd	r24, Y+12	; 0x0c
    3076:	28 2f       	mov	r18, r24
    3078:	23 70       	andi	r18, 0x03	; 3
    307a:	82 95       	swap	r24
    307c:	86 95       	lsr	r24
    307e:	87 70       	andi	r24, 0x07	; 7
    3080:	90 e0       	ldi	r25, 0x00	; 0
    3082:	f8 e0       	ldi	r31, 0x08	; 8
    3084:	2f 9f       	mul	r18, r31
    3086:	80 0d       	add	r24, r0
    3088:	91 1d       	adc	r25, r1
    308a:	11 24       	eor	r1, r1
    308c:	01 96       	adiw	r24, 0x01	; 1
    308e:	2b 85       	ldd	r18, Y+11	; 0x0b
    3090:	2c 77       	andi	r18, 0x7C	; 124
    3092:	30 e0       	ldi	r19, 0x00	; 0
    3094:	35 95       	asr	r19
    3096:	27 95       	ror	r18
    3098:	35 95       	asr	r19
    309a:	27 95       	ror	r18
    309c:	2f 5f       	subi	r18, 0xFF	; 255
    309e:	3f 4f       	sbci	r19, 0xFF	; 255
    30a0:	82 9f       	mul	r24, r18
    30a2:	a0 01       	movw	r20, r0
    30a4:	83 9f       	mul	r24, r19
    30a6:	50 0d       	add	r21, r0
    30a8:	92 9f       	mul	r25, r18
    30aa:	50 0d       	add	r21, r0
    30ac:	11 24       	eor	r1, r1
    30ae:	ca 01       	movw	r24, r20
    30b0:	a0 e0       	ldi	r26, 0x00	; 0
    30b2:	b0 e0       	ldi	r27, 0x00	; 0
    30b4:	f8 01       	movw	r30, r16
    30b6:	80 83       	st	Z, r24
    30b8:	91 83       	std	Z+1, r25	; 0x01
    30ba:	a2 83       	std	Z+2, r26	; 0x02
    30bc:	b3 83       	std	Z+3, r27	; 0x03
				}
				res = RES_OK;
    30be:	10 e0       	ldi	r17, 0x00	; 0
    30c0:	75 c0       	rjmp	.+234    	; 0x31ac <disk_ioctl+0x340>
		break;

	/* Following commands are never used by FatFs module */

	case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
		*ptr = CardType;
    30c2:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <CardType>
    30c6:	fa 01       	movw	r30, r20
    30c8:	80 83       	st	Z, r24
		res = RES_OK;
    30ca:	10 e0       	ldi	r17, 0x00	; 0
		break;
    30cc:	6f c0       	rjmp	.+222    	; 0x31ac <disk_ioctl+0x340>

	case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
		if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
    30ce:	40 e0       	ldi	r20, 0x00	; 0
    30d0:	50 e0       	ldi	r21, 0x00	; 0
    30d2:	ba 01       	movw	r22, r20
    30d4:	89 e0       	ldi	r24, 0x09	; 9
    30d6:	0e 94 e6 14 	call	0x29cc	; 0x29cc <send_cmd>
    30da:	81 11       	cpse	r24, r1
    30dc:	60 c0       	rjmp	.+192    	; 0x319e <disk_ioctl+0x332>
			&& rcvr_datablock(ptr, 16))
    30de:	60 e1       	ldi	r22, 0x10	; 16
    30e0:	70 e0       	ldi	r23, 0x00	; 0
    30e2:	c8 01       	movw	r24, r16
    30e4:	0e 94 a9 14 	call	0x2952	; 0x2952 <rcvr_datablock>

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	switch (cmd) {
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
    30e8:	11 e0       	ldi	r17, 0x01	; 1
    30ea:	89 2b       	or	r24, r25
    30ec:	09 f4       	brne	.+2      	; 0x30f0 <disk_ioctl+0x284>
    30ee:	5e c0       	rjmp	.+188    	; 0x31ac <disk_ioctl+0x340>
    30f0:	10 e0       	ldi	r17, 0x00	; 0
    30f2:	5c c0       	rjmp	.+184    	; 0x31ac <disk_ioctl+0x340>
			&& rcvr_datablock(ptr, 16))
			res = RES_OK;
		break;

	case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
		if (send_cmd(CMD10, 0) == 0		/* READ_CID */
    30f4:	40 e0       	ldi	r20, 0x00	; 0
    30f6:	50 e0       	ldi	r21, 0x00	; 0
    30f8:	ba 01       	movw	r22, r20
    30fa:	8a e0       	ldi	r24, 0x0A	; 10
    30fc:	0e 94 e6 14 	call	0x29cc	; 0x29cc <send_cmd>
    3100:	81 11       	cpse	r24, r1
    3102:	4f c0       	rjmp	.+158    	; 0x31a2 <disk_ioctl+0x336>
			&& rcvr_datablock(ptr, 16))
    3104:	60 e1       	ldi	r22, 0x10	; 16
    3106:	70 e0       	ldi	r23, 0x00	; 0
    3108:	c8 01       	movw	r24, r16
    310a:	0e 94 a9 14 	call	0x2952	; 0x2952 <rcvr_datablock>

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	switch (cmd) {
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
    310e:	11 e0       	ldi	r17, 0x01	; 1
    3110:	89 2b       	or	r24, r25
    3112:	09 f4       	brne	.+2      	; 0x3116 <disk_ioctl+0x2aa>
    3114:	4b c0       	rjmp	.+150    	; 0x31ac <disk_ioctl+0x340>
    3116:	10 e0       	ldi	r17, 0x00	; 0
    3118:	49 c0       	rjmp	.+146    	; 0x31ac <disk_ioctl+0x340>
			&& rcvr_datablock(ptr, 16))
			res = RES_OK;
		break;

	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    311a:	40 e0       	ldi	r20, 0x00	; 0
    311c:	50 e0       	ldi	r21, 0x00	; 0
    311e:	ba 01       	movw	r22, r20
    3120:	8a e3       	ldi	r24, 0x3A	; 58
    3122:	0e 94 e6 14 	call	0x29cc	; 0x29cc <send_cmd>
    3126:	81 11       	cpse	r24, r1
    3128:	3e c0       	rjmp	.+124    	; 0x31a6 <disk_ioctl+0x33a>
    312a:	78 01       	movw	r14, r16
    312c:	0c 5f       	subi	r16, 0xFC	; 252
    312e:	1f 4f       	sbci	r17, 0xFF	; 255
			for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
    3130:	8f ef       	ldi	r24, 0xFF	; 255
    3132:	0e 94 86 14 	call	0x290c	; 0x290c <xchg_spi>
    3136:	f7 01       	movw	r30, r14
    3138:	81 93       	st	Z+, r24
    313a:	7f 01       	movw	r14, r30
    313c:	0e 17       	cp	r16, r30
    313e:	1f 07       	cpc	r17, r31
    3140:	b9 f7       	brne	.-18     	; 0x3130 <disk_ioctl+0x2c4>
			res = RES_OK;
    3142:	10 e0       	ldi	r17, 0x00	; 0
    3144:	33 c0       	rjmp	.+102    	; 0x31ac <disk_ioctl+0x340>
		}
		break;

	case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
		if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    3146:	40 e0       	ldi	r20, 0x00	; 0
    3148:	50 e0       	ldi	r21, 0x00	; 0
    314a:	ba 01       	movw	r22, r20
    314c:	8d e8       	ldi	r24, 0x8D	; 141
    314e:	0e 94 e6 14 	call	0x29cc	; 0x29cc <send_cmd>
    3152:	81 11       	cpse	r24, r1
    3154:	2a c0       	rjmp	.+84     	; 0x31aa <disk_ioctl+0x33e>
			xchg_spi(0xFF);
    3156:	8f ef       	ldi	r24, 0xFF	; 255
    3158:	0e 94 86 14 	call	0x290c	; 0x290c <xchg_spi>
			if (rcvr_datablock(ptr, 64))
    315c:	60 e4       	ldi	r22, 0x40	; 64
    315e:	70 e0       	ldi	r23, 0x00	; 0
    3160:	c8 01       	movw	r24, r16
    3162:	0e 94 a9 14 	call	0x2952	; 0x2952 <rcvr_datablock>

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	switch (cmd) {
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
    3166:	11 e0       	ldi	r17, 0x01	; 1
    3168:	89 2b       	or	r24, r25
    316a:	01 f1       	breq	.+64     	; 0x31ac <disk_ioctl+0x340>
    316c:	10 e0       	ldi	r17, 0x00	; 0
    316e:	1e c0       	rjmp	.+60     	; 0x31ac <disk_ioctl+0x340>
				res = RES_OK;
		}
		break;

	case CTRL_POWER_OFF :	/* Power off */
		power_off();
    3170:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <power_off>
		Stat |= STA_NOINIT;
    3174:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Stat>
    3178:	81 60       	ori	r24, 0x01	; 1
    317a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <Stat>
		res = RES_OK;
    317e:	10 e0       	ldi	r17, 0x00	; 0
		break;
    3180:	15 c0       	rjmp	.+42     	; 0x31ac <disk_ioctl+0x340>

	default:
		res = RES_PARERR;
    3182:	14 e0       	ldi	r17, 0x04	; 4
    3184:	13 c0       	rjmp	.+38     	; 0x31ac <disk_ioctl+0x340>
	DWORD csize;


	if (pdrv) return RES_PARERR;

	res = RES_ERROR;
    3186:	11 e0       	ldi	r17, 0x01	; 1
    3188:	11 c0       	rjmp	.+34     	; 0x31ac <disk_ioctl+0x340>
    318a:	11 e0       	ldi	r17, 0x01	; 1
    318c:	0f c0       	rjmp	.+30     	; 0x31ac <disk_ioctl+0x340>
    318e:	11 e0       	ldi	r17, 0x01	; 1
    3190:	0d c0       	rjmp	.+26     	; 0x31ac <disk_ioctl+0x340>
    3192:	11 e0       	ldi	r17, 0x01	; 1
    3194:	0b c0       	rjmp	.+22     	; 0x31ac <disk_ioctl+0x340>
    3196:	11 e0       	ldi	r17, 0x01	; 1
    3198:	09 c0       	rjmp	.+18     	; 0x31ac <disk_ioctl+0x340>
    319a:	11 e0       	ldi	r17, 0x01	; 1
    319c:	07 c0       	rjmp	.+14     	; 0x31ac <disk_ioctl+0x340>
    319e:	11 e0       	ldi	r17, 0x01	; 1
    31a0:	05 c0       	rjmp	.+10     	; 0x31ac <disk_ioctl+0x340>
    31a2:	11 e0       	ldi	r17, 0x01	; 1
    31a4:	03 c0       	rjmp	.+6      	; 0x31ac <disk_ioctl+0x340>
    31a6:	11 e0       	ldi	r17, 0x01	; 1
    31a8:	01 c0       	rjmp	.+2      	; 0x31ac <disk_ioctl+0x340>
    31aa:	11 e0       	ldi	r17, 0x01	; 1

	default:
		res = RES_PARERR;
	}

	deselect();
    31ac:	0e 94 8c 14 	call	0x2918	; 0x2918 <deselect>

	return res;
    31b0:	81 2f       	mov	r24, r17
    31b2:	03 c0       	rjmp	.+6      	; 0x31ba <disk_ioctl+0x34e>
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (pdrv) return RES_PARERR;
    31b4:	84 e0       	ldi	r24, 0x04	; 4
    31b6:	01 c0       	rjmp	.+2      	; 0x31ba <disk_ioctl+0x34e>

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    31b8:	83 e0       	ldi	r24, 0x03	; 3
	}

	deselect();

	return res;
}
    31ba:	60 96       	adiw	r28, 0x10	; 16
    31bc:	0f b6       	in	r0, 0x3f	; 63
    31be:	f8 94       	cli
    31c0:	de bf       	out	0x3e, r29	; 62
    31c2:	0f be       	out	0x3f, r0	; 63
    31c4:	cd bf       	out	0x3d, r28	; 61
    31c6:	df 91       	pop	r29
    31c8:	cf 91       	pop	r28
    31ca:	1f 91       	pop	r17
    31cc:	0f 91       	pop	r16
    31ce:	ff 90       	pop	r15
    31d0:	ef 90       	pop	r14
    31d2:	08 95       	ret

000031d4 <disk_timerproc>:

void disk_timerproc (void)
{
	BYTE n, s;

	n = Timer1;				/* 100Hz decrement timer */
    31d4:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <Timer1>
	if (n) Timer1 = --n;
    31d8:	88 23       	and	r24, r24
    31da:	19 f0       	breq	.+6      	; 0x31e2 <disk_timerproc+0xe>
    31dc:	81 50       	subi	r24, 0x01	; 1
    31de:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <Timer1>
	n = Timer2;
    31e2:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <Timer2>
	if (n) Timer2 = --n;
    31e6:	88 23       	and	r24, r24
    31e8:	19 f0       	breq	.+6      	; 0x31f0 <disk_timerproc+0x1c>
    31ea:	81 50       	subi	r24, 0x01	; 1
    31ec:	80 93 67 03 	sts	0x0367, r24	; 0x800367 <Timer2>

	s = Stat;
    31f0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Stat>
		s |= STA_PROTECT;
	else					/* Write enabled */
		s &= ~STA_PROTECT;

	if (MMC_CD)				/* Card inserted */
		s &= ~STA_NODISK;
    31f4:	89 7f       	andi	r24, 0xF9	; 249
	else					/* Socket empty */
		s |= (STA_NODISK | STA_NOINIT);

	Stat = s;				/* Update MMC status */
    31f6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <Stat>
    31fa:	08 95       	ret

000031fc <usb_init>:
	UEDATX = 0;
	UEDATX = signals;
	UEINTX = 0x3A;
	SREG = intr_state;
	return 0;
}
    31fc:	81 e0       	ldi	r24, 0x01	; 1
    31fe:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
    3202:	80 ea       	ldi	r24, 0xA0	; 160
    3204:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    3208:	82 e1       	ldi	r24, 0x12	; 18
    320a:	89 bd       	out	0x29, r24	; 41
    320c:	09 b4       	in	r0, 0x29	; 41
    320e:	00 fe       	sbrs	r0, 0
    3210:	fd cf       	rjmp	.-6      	; 0x320c <usb_init+0x10>
    3212:	80 e9       	ldi	r24, 0x90	; 144
    3214:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    3218:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    321c:	10 92 6c 03 	sts	0x036C, r1	; 0x80036c <usb_configuration>
    3220:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <cdc_line_rtsdtr>
    3224:	8c e0       	ldi	r24, 0x0C	; 12
    3226:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    322a:	78 94       	sei
    322c:	08 95       	ret

0000322e <usb_serial_getchar>:
    322e:	2f b7       	in	r18, 0x3f	; 63
    3230:	f8 94       	cli
    3232:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <usb_configuration>
    3236:	81 11       	cpse	r24, r1
    3238:	04 c0       	rjmp	.+8      	; 0x3242 <usb_serial_getchar+0x14>
    323a:	2f bf       	out	0x3f, r18	; 63
    323c:	8f ef       	ldi	r24, 0xFF	; 255
    323e:	9f ef       	ldi	r25, 0xFF	; 255
    3240:	08 95       	ret
    3242:	83 e0       	ldi	r24, 0x03	; 3
    3244:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    3248:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    324c:	85 fd       	sbrc	r24, 5
    324e:	12 c0       	rjmp	.+36     	; 0x3274 <usb_serial_getchar+0x46>
    3250:	82 fd       	sbrc	r24, 2
    3252:	04 c0       	rjmp	.+8      	; 0x325c <usb_serial_getchar+0x2e>
    3254:	0b c0       	rjmp	.+22     	; 0x326c <usb_serial_getchar+0x3e>
    3256:	82 fd       	sbrc	r24, 2
    3258:	04 c0       	rjmp	.+8      	; 0x3262 <usb_serial_getchar+0x34>
    325a:	08 c0       	rjmp	.+16     	; 0x326c <usb_serial_getchar+0x3e>
    325c:	e8 ee       	ldi	r30, 0xE8	; 232
    325e:	f0 e0       	ldi	r31, 0x00	; 0
    3260:	9b e6       	ldi	r25, 0x6B	; 107
    3262:	90 83       	st	Z, r25
    3264:	80 81       	ld	r24, Z
    3266:	85 ff       	sbrs	r24, 5
    3268:	f6 cf       	rjmp	.-20     	; 0x3256 <usb_serial_getchar+0x28>
    326a:	04 c0       	rjmp	.+8      	; 0x3274 <usb_serial_getchar+0x46>
    326c:	2f bf       	out	0x3f, r18	; 63
    326e:	8f ef       	ldi	r24, 0xFF	; 255
    3270:	9f ef       	ldi	r25, 0xFF	; 255
    3272:	08 95       	ret
    3274:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    3278:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    327c:	95 fd       	sbrc	r25, 5
    327e:	03 c0       	rjmp	.+6      	; 0x3286 <usb_serial_getchar+0x58>
    3280:	9b e6       	ldi	r25, 0x6B	; 107
    3282:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3286:	2f bf       	out	0x3f, r18	; 63
    3288:	90 e0       	ldi	r25, 0x00	; 0
    328a:	08 95       	ret

0000328c <usb_serial_available>:
    328c:	9f b7       	in	r25, 0x3f	; 63
    328e:	f8 94       	cli
    3290:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <usb_configuration>
    3294:	88 23       	and	r24, r24
    3296:	89 f0       	breq	.+34     	; 0x32ba <usb_serial_available+0x2e>
    3298:	83 e0       	ldi	r24, 0x03	; 3
    329a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    329e:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    32a2:	81 11       	cpse	r24, r1
    32a4:	0b c0       	rjmp	.+22     	; 0x32bc <usb_serial_available+0x30>
    32a6:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    32aa:	22 ff       	sbrs	r18, 2
    32ac:	07 c0       	rjmp	.+14     	; 0x32bc <usb_serial_available+0x30>
    32ae:	25 fd       	sbrc	r18, 5
    32b0:	05 c0       	rjmp	.+10     	; 0x32bc <usb_serial_available+0x30>
    32b2:	2b e6       	ldi	r18, 0x6B	; 107
    32b4:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    32b8:	01 c0       	rjmp	.+2      	; 0x32bc <usb_serial_available+0x30>
    32ba:	80 e0       	ldi	r24, 0x00	; 0
    32bc:	9f bf       	out	0x3f, r25	; 63
    32be:	08 95       	ret

000032c0 <usb_serial_putchar>:
    32c0:	cf 93       	push	r28
    32c2:	df 93       	push	r29
    32c4:	90 91 6c 03 	lds	r25, 0x036C	; 0x80036c <usb_configuration>
    32c8:	99 23       	and	r25, r25
    32ca:	09 f4       	brne	.+2      	; 0x32ce <usb_serial_putchar+0xe>
    32cc:	4c c0       	rjmp	.+152    	; 0x3366 <usb_serial_putchar+0xa6>
    32ce:	9f b7       	in	r25, 0x3f	; 63
    32d0:	f8 94       	cli
    32d2:	24 e0       	ldi	r18, 0x04	; 4
    32d4:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    32d8:	20 91 6a 03 	lds	r18, 0x036A	; 0x80036a <transmit_previous_timeout>
    32dc:	22 23       	and	r18, r18
    32de:	49 f0       	breq	.+18     	; 0x32f2 <usb_serial_putchar+0x32>
    32e0:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    32e4:	25 fd       	sbrc	r18, 5
    32e6:	03 c0       	rjmp	.+6      	; 0x32ee <usb_serial_putchar+0x2e>
    32e8:	9f bf       	out	0x3f, r25	; 63
    32ea:	8f ef       	ldi	r24, 0xFF	; 255
    32ec:	41 c0       	rjmp	.+130    	; 0x3370 <usb_serial_putchar+0xb0>
    32ee:	10 92 6a 03 	sts	0x036A, r1	; 0x80036a <transmit_previous_timeout>
    32f2:	30 91 e4 00 	lds	r19, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    32f6:	37 5e       	subi	r19, 0xE7	; 231
    32f8:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    32fc:	25 fd       	sbrc	r18, 5
    32fe:	24 c0       	rjmp	.+72     	; 0x3348 <usb_serial_putchar+0x88>
    3300:	9f bf       	out	0x3f, r25	; 63
    3302:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    3306:	39 17       	cp	r19, r25
    3308:	81 f0       	breq	.+32     	; 0x332a <usb_serial_putchar+0x6a>
    330a:	90 91 6c 03 	lds	r25, 0x036C	; 0x80036c <usb_configuration>
    330e:	99 23       	and	r25, r25
    3310:	61 f1       	breq	.+88     	; 0x336a <usb_serial_putchar+0xaa>
    3312:	a9 ee       	ldi	r26, 0xE9	; 233
    3314:	b0 e0       	ldi	r27, 0x00	; 0
    3316:	44 e0       	ldi	r20, 0x04	; 4
    3318:	e8 ee       	ldi	r30, 0xE8	; 232
    331a:	f0 e0       	ldi	r31, 0x00	; 0
    331c:	c4 ee       	ldi	r28, 0xE4	; 228
    331e:	d0 e0       	ldi	r29, 0x00	; 0
    3320:	0d c0       	rjmp	.+26     	; 0x333c <usb_serial_putchar+0x7c>
    3322:	9f bf       	out	0x3f, r25	; 63
    3324:	98 81       	ld	r25, Y
    3326:	39 13       	cpse	r19, r25
    3328:	05 c0       	rjmp	.+10     	; 0x3334 <usb_serial_putchar+0x74>
    332a:	81 e0       	ldi	r24, 0x01	; 1
    332c:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <transmit_previous_timeout>
    3330:	8f ef       	ldi	r24, 0xFF	; 255
    3332:	1e c0       	rjmp	.+60     	; 0x3370 <usb_serial_putchar+0xb0>
    3334:	90 91 6c 03 	lds	r25, 0x036C	; 0x80036c <usb_configuration>
    3338:	99 23       	and	r25, r25
    333a:	c9 f0       	breq	.+50     	; 0x336e <usb_serial_putchar+0xae>
    333c:	9f b7       	in	r25, 0x3f	; 63
    333e:	f8 94       	cli
    3340:	4c 93       	st	X, r20
    3342:	20 81       	ld	r18, Z
    3344:	25 ff       	sbrs	r18, 5
    3346:	ed cf       	rjmp	.-38     	; 0x3322 <usb_serial_putchar+0x62>
    3348:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    334c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3350:	85 fd       	sbrc	r24, 5
    3352:	03 c0       	rjmp	.+6      	; 0x335a <usb_serial_putchar+0x9a>
    3354:	8a e3       	ldi	r24, 0x3A	; 58
    3356:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    335a:	85 e0       	ldi	r24, 0x05	; 5
    335c:	80 93 6b 03 	sts	0x036B, r24	; 0x80036b <transmit_flush_timer>
    3360:	9f bf       	out	0x3f, r25	; 63
    3362:	80 e0       	ldi	r24, 0x00	; 0
    3364:	05 c0       	rjmp	.+10     	; 0x3370 <usb_serial_putchar+0xb0>
    3366:	8f ef       	ldi	r24, 0xFF	; 255
    3368:	03 c0       	rjmp	.+6      	; 0x3370 <usb_serial_putchar+0xb0>
    336a:	8f ef       	ldi	r24, 0xFF	; 255
    336c:	01 c0       	rjmp	.+2      	; 0x3370 <usb_serial_putchar+0xb0>
    336e:	8f ef       	ldi	r24, 0xFF	; 255
    3370:	df 91       	pop	r29
    3372:	cf 91       	pop	r28
    3374:	08 95       	ret

00003376 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    3376:	1f 92       	push	r1
    3378:	0f 92       	push	r0
    337a:	0f b6       	in	r0, 0x3f	; 63
    337c:	0f 92       	push	r0
    337e:	11 24       	eor	r1, r1
    3380:	8f 93       	push	r24
    3382:	9f 93       	push	r25
    3384:	ef 93       	push	r30
    3386:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
    3388:	e1 ee       	ldi	r30, 0xE1	; 225
    338a:	f0 e0       	ldi	r31, 0x00	; 0
    338c:	80 81       	ld	r24, Z
        UDINT = 0;
    338e:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
    3390:	83 ff       	sbrs	r24, 3
    3392:	11 c0       	rjmp	.+34     	; 0x33b6 <__vector_10+0x40>
		UENUM = 0;
    3394:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		UECONX = 1;
    3398:	91 e0       	ldi	r25, 0x01	; 1
    339a:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		UECFG0X = EP_TYPE_CONTROL;
    339e:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    33a2:	92 e1       	ldi	r25, 0x12	; 18
    33a4:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		UEIENX = (1<<RXSTPE);
    33a8:	98 e0       	ldi	r25, 0x08	; 8
    33aa:	90 93 f0 00 	sts	0x00F0, r25	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		usb_configuration = 0;
    33ae:	10 92 6c 03 	sts	0x036C, r1	; 0x80036c <usb_configuration>
		cdc_line_rtsdtr = 0;
    33b2:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <cdc_line_rtsdtr>
        }
	if (intbits & (1<<SOFI)) {
    33b6:	82 ff       	sbrs	r24, 2
    33b8:	13 c0       	rjmp	.+38     	; 0x33e0 <__vector_10+0x6a>
		if (usb_configuration) {
    33ba:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <usb_configuration>
    33be:	88 23       	and	r24, r24
    33c0:	79 f0       	breq	.+30     	; 0x33e0 <__vector_10+0x6a>
			t = transmit_flush_timer;
    33c2:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <transmit_flush_timer>
			if (t) {
    33c6:	88 23       	and	r24, r24
    33c8:	59 f0       	breq	.+22     	; 0x33e0 <__vector_10+0x6a>
				transmit_flush_timer = --t;
    33ca:	81 50       	subi	r24, 0x01	; 1
    33cc:	80 93 6b 03 	sts	0x036B, r24	; 0x80036b <transmit_flush_timer>
				if (!t) {
    33d0:	81 11       	cpse	r24, r1
    33d2:	06 c0       	rjmp	.+12     	; 0x33e0 <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
    33d4:	84 e0       	ldi	r24, 0x04	; 4
    33d6:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
					UEINTX = 0x3A;
    33da:	8a e3       	ldi	r24, 0x3A	; 58
    33dc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				}
			}
		}
	}
}
    33e0:	ff 91       	pop	r31
    33e2:	ef 91       	pop	r30
    33e4:	9f 91       	pop	r25
    33e6:	8f 91       	pop	r24
    33e8:	0f 90       	pop	r0
    33ea:	0f be       	out	0x3f, r0	; 63
    33ec:	0f 90       	pop	r0
    33ee:	1f 90       	pop	r1
    33f0:	18 95       	reti

000033f2 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    33f2:	1f 92       	push	r1
    33f4:	0f 92       	push	r0
    33f6:	0f b6       	in	r0, 0x3f	; 63
    33f8:	0f 92       	push	r0
    33fa:	11 24       	eor	r1, r1
    33fc:	0f 93       	push	r16
    33fe:	1f 93       	push	r17
    3400:	2f 93       	push	r18
    3402:	3f 93       	push	r19
    3404:	4f 93       	push	r20
    3406:	5f 93       	push	r21
    3408:	6f 93       	push	r22
    340a:	7f 93       	push	r23
    340c:	8f 93       	push	r24
    340e:	9f 93       	push	r25
    3410:	af 93       	push	r26
    3412:	bf 93       	push	r27
    3414:	cf 93       	push	r28
    3416:	df 93       	push	r29
    3418:	ef 93       	push	r30
    341a:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    341c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
        intbits = UEINTX;
    3420:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        if (intbits & (1<<RXSTPI)) {
    3424:	83 ff       	sbrs	r24, 3
    3426:	4f c1       	rjmp	.+670    	; 0x36c6 <__vector_11+0x2d4>
                bmRequestType = UEDATX;
    3428:	e1 ef       	ldi	r30, 0xF1	; 241
    342a:	f0 e0       	ldi	r31, 0x00	; 0
    342c:	a0 81       	ld	r26, Z
                bRequest = UEDATX;
    342e:	80 81       	ld	r24, Z
                wValue = UEDATX;
    3430:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
    3432:	90 81       	ld	r25, Z
    3434:	30 e0       	ldi	r19, 0x00	; 0
    3436:	39 2b       	or	r19, r25
                wIndex = UEDATX;
    3438:	40 81       	ld	r20, Z
                wIndex |= (UEDATX << 8);
    343a:	90 81       	ld	r25, Z
    343c:	50 e0       	ldi	r21, 0x00	; 0
    343e:	ba 01       	movw	r22, r20
    3440:	79 2b       	or	r23, r25
                wLength = UEDATX;
    3442:	c0 81       	ld	r28, Z
                wLength |= (UEDATX << 8);
    3444:	d0 81       	ld	r29, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    3446:	92 ef       	ldi	r25, 0xF2	; 242
    3448:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                if (bRequest == GET_DESCRIPTOR) {
    344c:	86 30       	cpi	r24, 0x06	; 6
    344e:	09 f0       	breq	.+2      	; 0x3452 <__vector_11+0x60>
    3450:	59 c0       	rjmp	.+178    	; 0x3504 <__vector_11+0x112>
    3452:	04 c0       	rjmp	.+8      	; 0x345c <__vector_11+0x6a>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
    3454:	81 e2       	ldi	r24, 0x21	; 33
    3456:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
					return;
    345a:	3c c1       	rjmp	.+632    	; 0x36d4 <__vector_11+0x2e2>
    345c:	4a e1       	ldi	r20, 0x1A	; 26
    345e:	51 e0       	ldi	r21, 0x01	; 1
    3460:	04 e4       	ldi	r16, 0x44	; 68
    3462:	11 e0       	ldi	r17, 0x01	; 1
    3464:	ca 01       	movw	r24, r20
				}
				desc_val = pgm_read_word(list);
    3466:	fa 01       	movw	r30, r20
    3468:	a5 91       	lpm	r26, Z+
    346a:	b4 91       	lpm	r27, Z
				if (desc_val != wValue) {
    346c:	2a 17       	cp	r18, r26
    346e:	3b 07       	cpc	r19, r27
    3470:	09 f5       	brne	.+66     	; 0x34b4 <__vector_11+0xc2>
					list += sizeof(struct descriptor_list_struct);
					continue;
				}
				list += 2;
				desc_val = pgm_read_word(list);
    3472:	fa 01       	movw	r30, r20
    3474:	32 96       	adiw	r30, 0x02	; 2
    3476:	a5 91       	lpm	r26, Z+
    3478:	b4 91       	lpm	r27, Z
				if (desc_val != wIndex) {
    347a:	6a 17       	cp	r22, r26
    347c:	7b 07       	cpc	r23, r27
    347e:	d1 f4       	brne	.+52     	; 0x34b4 <__vector_11+0xc2>
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				list += 2;
    3480:	fa 01       	movw	r30, r20
    3482:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
    3484:	45 91       	lpm	r20, Z+
    3486:	54 91       	lpm	r21, Z
				list += 2;
    3488:	fc 01       	movw	r30, r24
    348a:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
    348c:	24 91       	lpm	r18, Z
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    348e:	8c 2f       	mov	r24, r28
    3490:	90 e0       	ldi	r25, 0x00	; 0
    3492:	9d 2b       	or	r25, r29
    3494:	8f 3f       	cpi	r24, 0xFF	; 255
    3496:	91 05       	cpc	r25, r1
    3498:	19 f0       	breq	.+6      	; 0x34a0 <__vector_11+0xae>
    349a:	10 f0       	brcs	.+4      	; 0x34a0 <__vector_11+0xae>
    349c:	8f ef       	ldi	r24, 0xFF	; 255
    349e:	90 e0       	ldi	r25, 0x00	; 0
    34a0:	82 17       	cp	r24, r18
    34a2:	08 f4       	brcc	.+2      	; 0x34a6 <__vector_11+0xb4>
    34a4:	28 2f       	mov	r18, r24
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    34a6:	a8 ee       	ldi	r26, 0xE8	; 232
    34a8:	b0 e0       	ldi	r27, 0x00	; 0
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    34aa:	70 e1       	ldi	r23, 0x10	; 16
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    34ac:	6e ef       	ldi	r22, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
    34ae:	c1 ef       	ldi	r28, 0xF1	; 241
    34b0:	d0 e0       	ldi	r29, 0x00	; 0
    34b2:	06 c0       	rjmp	.+12     	; 0x34c0 <__vector_11+0xce>
    34b4:	49 5f       	subi	r20, 0xF9	; 249
    34b6:	5f 4f       	sbci	r21, 0xFF	; 255
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    34b8:	40 17       	cp	r20, r16
    34ba:	51 07       	cpc	r21, r17
    34bc:	99 f6       	brne	.-90     	; 0x3464 <__vector_11+0x72>
    34be:	ca cf       	rjmp	.-108    	; 0x3454 <__vector_11+0x62>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    34c0:	8c 91       	ld	r24, X
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    34c2:	98 2f       	mov	r25, r24
    34c4:	95 70       	andi	r25, 0x05	; 5
    34c6:	e1 f3       	breq	.-8      	; 0x34c0 <__vector_11+0xce>
				if (i & (1<<RXOUTI)) return;	// abort
    34c8:	82 fd       	sbrc	r24, 2
    34ca:	04 c1       	rjmp	.+520    	; 0x36d4 <__vector_11+0x2e2>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    34cc:	32 2f       	mov	r19, r18
    34ce:	21 31       	cpi	r18, 0x11	; 17
    34d0:	08 f0       	brcs	.+2      	; 0x34d4 <__vector_11+0xe2>
    34d2:	37 2f       	mov	r19, r23
				for (i = n; i; i--) {
    34d4:	33 23       	and	r19, r19
    34d6:	09 f4       	brne	.+2      	; 0x34da <__vector_11+0xe8>
    34d8:	fa c0       	rjmp	.+500    	; 0x36ce <__vector_11+0x2dc>
    34da:	fa 01       	movw	r30, r20
    34dc:	83 2f       	mov	r24, r19
					UEDATX = pgm_read_byte(desc_addr++);
    34de:	94 91       	lpm	r25, Z
    34e0:	98 83       	st	Y, r25
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    34e2:	81 50       	subi	r24, 0x01	; 1
    34e4:	31 96       	adiw	r30, 0x01	; 1
    34e6:	81 11       	cpse	r24, r1
    34e8:	fa cf       	rjmp	.-12     	; 0x34de <__vector_11+0xec>
    34ea:	8f ef       	ldi	r24, 0xFF	; 255
    34ec:	83 0f       	add	r24, r19
    34ee:	90 e0       	ldi	r25, 0x00	; 0
    34f0:	01 96       	adiw	r24, 0x01	; 1
    34f2:	48 0f       	add	r20, r24
    34f4:	59 1f       	adc	r21, r25
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    34f6:	23 1b       	sub	r18, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    34f8:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    34fa:	21 11       	cpse	r18, r1
    34fc:	e1 cf       	rjmp	.-62     	; 0x34c0 <__vector_11+0xce>
    34fe:	30 31       	cpi	r19, 0x10	; 16
    3500:	f9 f2       	breq	.-66     	; 0x34c0 <__vector_11+0xce>
    3502:	e8 c0       	rjmp	.+464    	; 0x36d4 <__vector_11+0x2e2>
			return;
                }
		if (bRequest == SET_ADDRESS) {
    3504:	85 30       	cpi	r24, 0x05	; 5
    3506:	61 f4       	brne	.+24     	; 0x3520 <__vector_11+0x12e>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    3508:	8e ef       	ldi	r24, 0xFE	; 254
    350a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    350e:	e8 ee       	ldi	r30, 0xE8	; 232
    3510:	f0 e0       	ldi	r31, 0x00	; 0
    3512:	80 81       	ld	r24, Z
    3514:	80 ff       	sbrs	r24, 0
    3516:	fd cf       	rjmp	.-6      	; 0x3512 <__vector_11+0x120>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    3518:	20 68       	ori	r18, 0x80	; 128
    351a:	20 93 e3 00 	sts	0x00E3, r18	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
			return;
    351e:	da c0       	rjmp	.+436    	; 0x36d4 <__vector_11+0x2e2>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    3520:	89 30       	cpi	r24, 0x09	; 9
    3522:	09 f0       	breq	.+2      	; 0x3526 <__vector_11+0x134>
    3524:	35 c0       	rjmp	.+106    	; 0x3590 <__vector_11+0x19e>
    3526:	a1 11       	cpse	r26, r1
    3528:	ce c0       	rjmp	.+412    	; 0x36c6 <__vector_11+0x2d4>
			usb_configuration = wValue;
    352a:	20 93 6c 03 	sts	0x036C, r18	; 0x80036c <usb_configuration>
			cdc_line_rtsdtr = 0;
    352e:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <cdc_line_rtsdtr>
			transmit_flush_timer = 0;
    3532:	10 92 6b 03 	sts	0x036B, r1	; 0x80036b <transmit_flush_timer>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    3536:	8e ef       	ldi	r24, 0xFE	; 254
    3538:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    353c:	81 e0       	ldi	r24, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    353e:	29 ed       	ldi	r18, 0xD9	; 217
    3540:	31 e0       	ldi	r19, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
    3542:	c9 ee       	ldi	r28, 0xE9	; 233
    3544:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
    3546:	ab ee       	ldi	r26, 0xEB	; 235
    3548:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
    354a:	0c ee       	ldi	r16, 0xEC	; 236
    354c:	10 e0       	ldi	r17, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
    354e:	6d ee       	ldi	r22, 0xED	; 237
    3550:	70 e0       	ldi	r23, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
    3552:	88 83       	st	Y, r24
				en = pgm_read_byte(cfg++);
    3554:	a9 01       	movw	r20, r18
    3556:	4f 5f       	subi	r20, 0xFF	; 255
    3558:	5f 4f       	sbci	r21, 0xFF	; 255
    355a:	f9 01       	movw	r30, r18
    355c:	94 91       	lpm	r25, Z
				UECONX = en;
    355e:	9c 93       	st	X, r25
				if (en) {
    3560:	99 23       	and	r25, r25
    3562:	61 f0       	breq	.+24     	; 0x357c <__vector_11+0x18a>
					UECFG0X = pgm_read_byte(cfg++);
    3564:	fa 01       	movw	r30, r20
    3566:	44 91       	lpm	r20, Z
    3568:	f8 01       	movw	r30, r16
    356a:	40 83       	st	Z, r20
					UECFG1X = pgm_read_byte(cfg++);
    356c:	f9 01       	movw	r30, r18
    356e:	32 96       	adiw	r30, 0x02	; 2
    3570:	94 91       	lpm	r25, Z
    3572:	2d 5f       	subi	r18, 0xFD	; 253
    3574:	3f 4f       	sbci	r19, 0xFF	; 255
    3576:	fb 01       	movw	r30, r22
    3578:	90 83       	st	Z, r25
    357a:	01 c0       	rjmp	.+2      	; 0x357e <__vector_11+0x18c>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
    357c:	9a 01       	movw	r18, r20
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    357e:	8f 5f       	subi	r24, 0xFF	; 255
    3580:	85 30       	cpi	r24, 0x05	; 5
    3582:	39 f7       	brne	.-50     	; 0x3552 <__vector_11+0x160>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    3584:	ea ee       	ldi	r30, 0xEA	; 234
    3586:	f0 e0       	ldi	r31, 0x00	; 0
    3588:	8e e1       	ldi	r24, 0x1E	; 30
    358a:	80 83       	st	Z, r24
        		UERST = 0;
    358c:	10 82       	st	Z, r1
			return;
    358e:	a2 c0       	rjmp	.+324    	; 0x36d4 <__vector_11+0x2e2>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    3590:	88 30       	cpi	r24, 0x08	; 8
    3592:	81 f4       	brne	.+32     	; 0x35b4 <__vector_11+0x1c2>
    3594:	a0 38       	cpi	r26, 0x80	; 128
    3596:	09 f0       	breq	.+2      	; 0x359a <__vector_11+0x1a8>
    3598:	96 c0       	rjmp	.+300    	; 0x36c6 <__vector_11+0x2d4>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    359a:	e8 ee       	ldi	r30, 0xE8	; 232
    359c:	f0 e0       	ldi	r31, 0x00	; 0
    359e:	80 81       	ld	r24, Z
    35a0:	80 ff       	sbrs	r24, 0
    35a2:	fd cf       	rjmp	.-6      	; 0x359e <__vector_11+0x1ac>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    35a4:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <usb_configuration>
    35a8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    35ac:	8e ef       	ldi	r24, 0xFE	; 254
    35ae:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    35b2:	90 c0       	rjmp	.+288    	; 0x36d4 <__vector_11+0x2e2>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    35b4:	81 32       	cpi	r24, 0x21	; 33
    35b6:	b9 f4       	brne	.+46     	; 0x35e6 <__vector_11+0x1f4>
    35b8:	a1 3a       	cpi	r26, 0xA1	; 161
    35ba:	09 f0       	breq	.+2      	; 0x35be <__vector_11+0x1cc>
    35bc:	84 c0       	rjmp	.+264    	; 0x36c6 <__vector_11+0x2d4>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    35be:	e8 ee       	ldi	r30, 0xE8	; 232
    35c0:	f0 e0       	ldi	r31, 0x00	; 0
    35c2:	80 81       	ld	r24, Z
    35c4:	80 ff       	sbrs	r24, 0
    35c6:	fd cf       	rjmp	.-6      	; 0x35c2 <__vector_11+0x1d0>
    35c8:	e7 e0       	ldi	r30, 0x07	; 7
    35ca:	f1 e0       	ldi	r31, 0x01	; 1
    35cc:	2e e0       	ldi	r18, 0x0E	; 14
    35ce:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    35d0:	a1 ef       	ldi	r26, 0xF1	; 241
    35d2:	b0 e0       	ldi	r27, 0x00	; 0
    35d4:	81 91       	ld	r24, Z+
    35d6:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    35d8:	2e 17       	cp	r18, r30
    35da:	3f 07       	cpc	r19, r31
    35dc:	d9 f7       	brne	.-10     	; 0x35d4 <__vector_11+0x1e2>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    35de:	8e ef       	ldi	r24, 0xFE	; 254
    35e0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    35e4:	77 c0       	rjmp	.+238    	; 0x36d4 <__vector_11+0x2e2>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    35e6:	80 32       	cpi	r24, 0x20	; 32
    35e8:	d1 f4       	brne	.+52     	; 0x361e <__vector_11+0x22c>
    35ea:	a1 32       	cpi	r26, 0x21	; 33
    35ec:	09 f0       	breq	.+2      	; 0x35f0 <__vector_11+0x1fe>
    35ee:	6b c0       	rjmp	.+214    	; 0x36c6 <__vector_11+0x2d4>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    35f0:	e8 ee       	ldi	r30, 0xE8	; 232
    35f2:	f0 e0       	ldi	r31, 0x00	; 0
    35f4:	80 81       	ld	r24, Z
    35f6:	82 ff       	sbrs	r24, 2
    35f8:	fd cf       	rjmp	.-6      	; 0x35f4 <__vector_11+0x202>
    35fa:	e7 e0       	ldi	r30, 0x07	; 7
    35fc:	f1 e0       	ldi	r31, 0x01	; 1
    35fe:	2e e0       	ldi	r18, 0x0E	; 14
    3600:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    3602:	a1 ef       	ldi	r26, 0xF1	; 241
    3604:	b0 e0       	ldi	r27, 0x00	; 0
    3606:	8c 91       	ld	r24, X
    3608:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    360a:	2e 17       	cp	r18, r30
    360c:	3f 07       	cpc	r19, r31
    360e:	d9 f7       	brne	.-10     	; 0x3606 <__vector_11+0x214>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    3610:	e8 ee       	ldi	r30, 0xE8	; 232
    3612:	f0 e0       	ldi	r31, 0x00	; 0
    3614:	8b ef       	ldi	r24, 0xFB	; 251
    3616:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    3618:	8e ef       	ldi	r24, 0xFE	; 254
    361a:	80 83       	st	Z, r24
    361c:	5b c0       	rjmp	.+182    	; 0x36d4 <__vector_11+0x2e2>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    361e:	82 32       	cpi	r24, 0x22	; 34
    3620:	71 f4       	brne	.+28     	; 0x363e <__vector_11+0x24c>
    3622:	a1 32       	cpi	r26, 0x21	; 33
    3624:	09 f0       	breq	.+2      	; 0x3628 <__vector_11+0x236>
    3626:	4f c0       	rjmp	.+158    	; 0x36c6 <__vector_11+0x2d4>
			cdc_line_rtsdtr = wValue;
    3628:	20 93 69 03 	sts	0x0369, r18	; 0x800369 <cdc_line_rtsdtr>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    362c:	e8 ee       	ldi	r30, 0xE8	; 232
    362e:	f0 e0       	ldi	r31, 0x00	; 0
    3630:	80 81       	ld	r24, Z
    3632:	80 ff       	sbrs	r24, 0
    3634:	fd cf       	rjmp	.-6      	; 0x3630 <__vector_11+0x23e>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    3636:	8e ef       	ldi	r24, 0xFE	; 254
    3638:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    363c:	4b c0       	rjmp	.+150    	; 0x36d4 <__vector_11+0x2e2>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    363e:	81 11       	cpse	r24, r1
    3640:	1a c0       	rjmp	.+52     	; 0x3676 <__vector_11+0x284>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    3642:	e8 ee       	ldi	r30, 0xE8	; 232
    3644:	f0 e0       	ldi	r31, 0x00	; 0
    3646:	80 81       	ld	r24, Z
    3648:	80 ff       	sbrs	r24, 0
    364a:	fd cf       	rjmp	.-6      	; 0x3646 <__vector_11+0x254>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    364c:	a2 38       	cpi	r26, 0x82	; 130
    364e:	51 f4       	brne	.+20     	; 0x3664 <__vector_11+0x272>
				UENUM = wIndex;
    3650:	e9 ee       	ldi	r30, 0xE9	; 233
    3652:	f0 e0       	ldi	r31, 0x00	; 0
    3654:	60 83       	st	Z, r22
				if (UECONX & (1<<STALLRQ)) i = 1;
    3656:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
    365a:	85 fb       	bst	r24, 5
    365c:	88 27       	eor	r24, r24
    365e:	80 f9       	bld	r24, 0
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
    3660:	10 82       	st	Z, r1
    3662:	01 c0       	rjmp	.+2      	; 0x3666 <__vector_11+0x274>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
    3664:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
    3666:	e1 ef       	ldi	r30, 0xF1	; 241
    3668:	f0 e0       	ldi	r31, 0x00	; 0
    366a:	80 83       	st	Z, r24
			UEDATX = 0;
    366c:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    366e:	8e ef       	ldi	r24, 0xFE	; 254
    3670:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3674:	2f c0       	rjmp	.+94     	; 0x36d4 <__vector_11+0x2e2>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    3676:	98 2f       	mov	r25, r24
    3678:	9d 7f       	andi	r25, 0xFD	; 253
    367a:	91 30       	cpi	r25, 0x01	; 1
    367c:	21 f5       	brne	.+72     	; 0x36c6 <__vector_11+0x2d4>
		  && bmRequestType == 0x02 && wValue == 0) {
    367e:	a2 30       	cpi	r26, 0x02	; 2
    3680:	11 f5       	brne	.+68     	; 0x36c6 <__vector_11+0x2d4>
    3682:	23 2b       	or	r18, r19
    3684:	01 f5       	brne	.+64     	; 0x36c6 <__vector_11+0x2d4>
			i = wIndex & 0x7F;
    3686:	46 2f       	mov	r20, r22
    3688:	4f 77       	andi	r20, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
    368a:	9f ef       	ldi	r25, 0xFF	; 255
    368c:	94 0f       	add	r25, r20
    368e:	94 30       	cpi	r25, 0x04	; 4
    3690:	d0 f4       	brcc	.+52     	; 0x36c6 <__vector_11+0x2d4>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    3692:	9e ef       	ldi	r25, 0xFE	; 254
    3694:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    3698:	40 93 e9 00 	sts	0x00E9, r20	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				if (bRequest == SET_FEATURE) {
    369c:	83 30       	cpi	r24, 0x03	; 3
    369e:	21 f4       	brne	.+8      	; 0x36a8 <__vector_11+0x2b6>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
    36a0:	81 e2       	ldi	r24, 0x21	; 33
    36a2:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    36a6:	16 c0       	rjmp	.+44     	; 0x36d4 <__vector_11+0x2e2>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    36a8:	89 e1       	ldi	r24, 0x19	; 25
    36aa:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
					UERST = (1 << i);
    36ae:	81 e0       	ldi	r24, 0x01	; 1
    36b0:	90 e0       	ldi	r25, 0x00	; 0
    36b2:	02 c0       	rjmp	.+4      	; 0x36b8 <__vector_11+0x2c6>
    36b4:	88 0f       	add	r24, r24
    36b6:	99 1f       	adc	r25, r25
    36b8:	4a 95       	dec	r20
    36ba:	e2 f7       	brpl	.-8      	; 0x36b4 <__vector_11+0x2c2>
    36bc:	ea ee       	ldi	r30, 0xEA	; 234
    36be:	f0 e0       	ldi	r31, 0x00	; 0
    36c0:	80 83       	st	Z, r24
					UERST = 0;
    36c2:	10 82       	st	Z, r1
    36c4:	07 c0       	rjmp	.+14     	; 0x36d4 <__vector_11+0x2e2>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    36c6:	81 e2       	ldi	r24, 0x21	; 33
    36c8:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    36cc:	03 c0       	rjmp	.+6      	; 0x36d4 <__vector_11+0x2e2>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    36ce:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    36d0:	21 11       	cpse	r18, r1
    36d2:	f6 ce       	rjmp	.-532    	; 0x34c0 <__vector_11+0xce>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    36d4:	ff 91       	pop	r31
    36d6:	ef 91       	pop	r30
    36d8:	df 91       	pop	r29
    36da:	cf 91       	pop	r28
    36dc:	bf 91       	pop	r27
    36de:	af 91       	pop	r26
    36e0:	9f 91       	pop	r25
    36e2:	8f 91       	pop	r24
    36e4:	7f 91       	pop	r23
    36e6:	6f 91       	pop	r22
    36e8:	5f 91       	pop	r21
    36ea:	4f 91       	pop	r20
    36ec:	3f 91       	pop	r19
    36ee:	2f 91       	pop	r18
    36f0:	1f 91       	pop	r17
    36f2:	0f 91       	pop	r16
    36f4:	0f 90       	pop	r0
    36f6:	0f be       	out	0x3f, r0	; 63
    36f8:	0f 90       	pop	r0
    36fa:	1f 90       	pop	r1
    36fc:	18 95       	reti

000036fe <pageEmpty>:
/* INITIALISATION FUNCTIONS                                             */
/************************************************************************/

// Initialise PLL (required by USB serial interface, PWM)
void pll_init() {
	PLLFRQ = 0x6A; // PLL = 96 MHz, USB = 48 MHz, TIM4 = 64 MHz
    36fe:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <pageCount>
    3702:	90 91 72 03 	lds	r25, 0x0372	; 0x800372 <pageCount+0x1>
    3706:	01 97       	sbiw	r24, 0x01	; 1
    3708:	90 93 72 03 	sts	0x0372, r25	; 0x800372 <pageCount+0x1>
    370c:	80 93 71 03 	sts	0x0371, r24	; 0x800371 <pageCount>
    3710:	89 2b       	or	r24, r25
    3712:	21 f4       	brne	.+8      	; 0x371c <pageEmpty+0x1e>
    3714:	81 e0       	ldi	r24, 0x01	; 1
    3716:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <stop>
    371a:	08 95       	ret
    371c:	81 e0       	ldi	r24, 0x01	; 1
    371e:	90 e0       	ldi	r25, 0x00	; 0
    3720:	90 93 70 03 	sts	0x0370, r25	; 0x800370 <newPage+0x1>
    3724:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <newPage>
    3728:	08 95       	ret

0000372a <pageFull>:
    372a:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <pageCount>
    372e:	90 91 72 03 	lds	r25, 0x0372	; 0x800372 <pageCount+0x1>
    3732:	01 97       	sbiw	r24, 0x01	; 1
    3734:	90 93 72 03 	sts	0x0372, r25	; 0x800372 <pageCount+0x1>
    3738:	80 93 71 03 	sts	0x0371, r24	; 0x800371 <pageCount>
    373c:	89 2b       	or	r24, r25
    373e:	31 f4       	brne	.+12     	; 0x374c <pageFull+0x22>
    3740:	0e 94 1c 01 	call	0x238	; 0x238 <adc_stop>
    3744:	81 e0       	ldi	r24, 0x01	; 1
    3746:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <stop>
    374a:	08 95       	ret
    374c:	81 e0       	ldi	r24, 0x01	; 1
    374e:	90 e0       	ldi	r25, 0x00	; 0
    3750:	90 93 70 03 	sts	0x0370, r25	; 0x800370 <newPage+0x1>
    3754:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <newPage>
    3758:	08 95       	ret

0000375a <clock_init>:
}

// Configure system clock for 16 MHz
void clock_init() {
	CLKPR = 0x80;	// Prektcaler change enable
    375a:	e1 e6       	ldi	r30, 0x61	; 97
    375c:	f0 e0       	ldi	r31, 0x00	; 0
    375e:	80 e8       	ldi	r24, 0x80	; 128
    3760:	80 83       	st	Z, r24
	CLKPR = 0x00;	// Prescaler /1, 16 MHz
    3762:	10 82       	st	Z, r1
    3764:	08 95       	ret

00003766 <init>:



// Initialise DVR subsystems and enable interrupts
void init() {
	cli();			// Disable interrupts
    3766:	f8 94       	cli
	clock_init();	// Configure clocks
    3768:	0e 94 ad 1b 	call	0x375a	; 0x375a <clock_init>
/* INITIALISATION FUNCTIONS                                             */
/************************************************************************/

// Initialise PLL (required by USB serial interface, PWM)
void pll_init() {
	PLLFRQ = 0x6A; // PLL = 96 MHz, USB = 48 MHz, TIM4 = 64 MHz
    376c:	8a e6       	ldi	r24, 0x6A	; 106
    376e:	82 bf       	out	0x32, r24	; 50
// Initialise DVR subsystems and enable interrupts
void init() {
	cli();			// Disable interrupts
	clock_init();	// Configure clocks
	pll_init();     // Configure PLL (used by Timer4 and USB serial)
	serial_init();	// Initialise USB serial interface (debug)
    3770:	0e 94 4c 1d 	call	0x3a98	; 0x3a98 <serial_init>
	timer_init();	// Initialise timer (used by FatFs library)
    3774:	0e 94 57 1d 	call	0x3aae	; 0x3aae <timer_init>
	buffer_init(pageFull, pageEmpty);  // Initialise circular buffer (must specify callback functions)
    3778:	6f e7       	ldi	r22, 0x7F	; 127
    377a:	7b e1       	ldi	r23, 0x1B	; 27
    377c:	85 e9       	ldi	r24, 0x95	; 149
    377e:	9b e1       	ldi	r25, 0x1B	; 27
    3780:	0e 94 45 01 	call	0x28a	; 0x28a <buffer_init>
	adc_init();		// Initialise ADC
    3784:	0e 94 11 01 	call	0x222	; 0x222 <adc_init>
	//userio_init();  // Initialise LEDs
	sei();			// Enable interrupts
    3788:	78 94       	sei
	
DDRF &= 0b10001111;    // Pushbuttons 1 to 3 - PORTF 6-4 as inputs
    378a:	80 b3       	in	r24, 0x10	; 16
    378c:	8f 78       	andi	r24, 0x8F	; 143
    378e:	80 bb       	out	0x10, r24	; 16
DDRD |= 0b11110000;		// Set PORTD 7-4 as outputs (LEDs)
    3790:	8a b1       	in	r24, 0x0a	; 10
    3792:	80 6f       	ori	r24, 0xF0	; 240
    3794:	8a b9       	out	0x0a, r24	; 10
	
	// Must be called after interrupts are enabled
	wave_init();	// Initialise WAVE file interface
    3796:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <wave_init>
    379a:	08 95       	ret

0000379c <dvr_record>:
/* RECORD/PLAYBACK ROUTINES                                             */
/************************************************************************/

// Initiates a record cycle
void dvr_record() {
	buffer_reset();		// Reset buffer state
    379c:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <buffer_reset>
	countpage = 0;
    37a0:	10 92 74 03 	sts	0x0374, r1	; 0x800374 <countpage+0x1>
    37a4:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <countpage>
	pageCount = 305;	// Maximum record time of 10 sec
    37a8:	81 e3       	ldi	r24, 0x31	; 49
    37aa:	91 e0       	ldi	r25, 0x01	; 1
    37ac:	90 93 72 03 	sts	0x0372, r25	; 0x800372 <pageCount+0x1>
    37b0:	80 93 71 03 	sts	0x0371, r24	; 0x800371 <pageCount>
	newPage = 0;		// Clear new page flag
    37b4:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <newPage+0x1>
    37b8:	10 92 6f 03 	sts	0x036F, r1	; 0x80036f <newPage>
	
	wave_create();		// Create new wave file on the SD card
    37bc:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <wave_create>
	adc_start();		// Begin sampling
    37c0:	0e 94 18 01 	call	0x230	; 0x230 <adc_start>

	// TODO: Add code to handle LEDs
	PORTD &= 0b10001111; // all LEDs off state
    37c4:	8b b1       	in	r24, 0x0b	; 11
    37c6:	8f 78       	andi	r24, 0x8F	; 143
    37c8:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1<<PIND5);
    37ca:	5d 9a       	sbi	0x0b, 5	; 11
    37cc:	08 95       	ret

000037ce <PWM_init>:

// TODO: Implement code to initiate playback and to stop recording/playback.

void PWM_init() {
	
	cli();
    37ce:	f8 94       	cli

	// Configure system clock for 16 MHz
	CLKPR = 0x80;	// Prescaler change enable
    37d0:	e1 e6       	ldi	r30, 0x61	; 97
    37d2:	f0 e0       	ldi	r31, 0x00	; 0
    37d4:	80 e8       	ldi	r24, 0x80	; 128
    37d6:	80 83       	st	Z, r24
	CLKPR = 0x00;	// Prescaler /1, 16 MHz
    37d8:	10 82       	st	Z, r1
	
	DDRF &= 0b10001111;    // Pushbuttons 1 to 3 - PORTF 6-4 as inputs
    37da:	80 b3       	in	r24, 0x10	; 16
    37dc:	8f 78       	andi	r24, 0x8F	; 143
    37de:	80 bb       	out	0x10, r24	; 16
	DDRD |= 0b11110000;		// Set PORTD 7-4 as outputs (LEDs)
    37e0:	8a b1       	in	r24, 0x0a	; 10
    37e2:	80 6f       	ori	r24, 0xF0	; 240
    37e4:	8a b9       	out	0x0a, r24	; 10
	DDRB |= 0b01000000;	   // JOUT - PORTB 6 as an output
    37e6:	26 9a       	sbi	0x04, 6	; 4

OCR1A = 511;       //TOP, 15.625kHz
    37e8:	8f ef       	ldi	r24, 0xFF	; 255
    37ea:	91 e0       	ldi	r25, 0x01	; 1
    37ec:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    37f0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
OCR1B = 512*0.5;        //50% duty cycle
    37f4:	80 e0       	ldi	r24, 0x00	; 0
    37f6:	91 e0       	ldi	r25, 0x01	; 1
    37f8:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    37fc:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
TIMSK1 |= 0b00000001; //Enable overflow interrupt
    3800:	ef e6       	ldi	r30, 0x6F	; 111
    3802:	f0 e0       	ldi	r31, 0x00	; 0
    3804:	80 81       	ld	r24, Z
    3806:	81 60       	ori	r24, 0x01	; 1
    3808:	80 83       	st	Z, r24
TCCR1A = 0b00100011; //Fast PWM (TOP = OCR1A) set OC1B on TOP, reset on CMP
    380a:	83 e2       	ldi	r24, 0x23	; 35
    380c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
TCCR1B = 0b00011001; //Fast PWM (TOP = OCR1A), /1 prescaler
    3810:	89 e1       	ldi	r24, 0x19	; 25
    3812:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
TCNT1 = 0x00;  // reset timer
    3816:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    381a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>

serial_init();	// Initialise USB serial interface (debug)
    381e:	0e 94 4c 1d 	call	0x3a98	; 0x3a98 <serial_init>

sei();
    3822:	78 94       	sei
    3824:	08 95       	ret

00003826 <PWM_stop>:
}

void PWM_stop(){
		TCCR1A = 0;
    3826:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
		TIMSK1 = 0;
    382a:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
		OCR1B = 0;
    382e:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    3832:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
		TCNT1 = 0;
    3836:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    383a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    383e:	08 95       	ret

00003840 <__vector_20>:
}

ISR(TIMER1_OVF_vect) {
    3840:	1f 92       	push	r1
    3842:	0f 92       	push	r0
    3844:	0f b6       	in	r0, 0x3f	; 63
    3846:	0f 92       	push	r0
    3848:	11 24       	eor	r1, r1
    384a:	2f 93       	push	r18
    384c:	3f 93       	push	r19
    384e:	4f 93       	push	r20
    3850:	5f 93       	push	r21
    3852:	6f 93       	push	r22
    3854:	7f 93       	push	r23
    3856:	8f 93       	push	r24
    3858:	9f 93       	push	r25
    385a:	af 93       	push	r26
    385c:	bf 93       	push	r27
    385e:	ef 93       	push	r30
    3860:	ff 93       	push	r31
	overflow_counter++;
    3862:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <overflow_counter>
    3866:	8f 5f       	subi	r24, 0xFF	; 255
    3868:	80 93 6d 03 	sts	0x036D, r24	; 0x80036d <overflow_counter>
	
	if (overflow_counter == overflow_reset) {
    386c:	90 91 6d 03 	lds	r25, 0x036D	; 0x80036d <overflow_counter>
    3870:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <overflow_reset>
    3874:	98 13       	cpse	r25, r24
    3876:	09 c0       	rjmp	.+18     	; 0x388a <__vector_20+0x4a>
	uint8_t output = buffer_dequeue();		//dequeue here
    3878:	0e 94 99 01 	call	0x332	; 0x332 <buffer_dequeue>
	OCR1B = output ;
    387c:	90 e0       	ldi	r25, 0x00	; 0
    387e:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    3882:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	overflow_counter =0;
    3886:	10 92 6d 03 	sts	0x036D, r1	; 0x80036d <overflow_counter>
	
	}
	

}//ISR
    388a:	ff 91       	pop	r31
    388c:	ef 91       	pop	r30
    388e:	bf 91       	pop	r27
    3890:	af 91       	pop	r26
    3892:	9f 91       	pop	r25
    3894:	8f 91       	pop	r24
    3896:	7f 91       	pop	r23
    3898:	6f 91       	pop	r22
    389a:	5f 91       	pop	r21
    389c:	4f 91       	pop	r20
    389e:	3f 91       	pop	r19
    38a0:	2f 91       	pop	r18
    38a2:	0f 90       	pop	r0
    38a4:	0f be       	out	0x3f, r0	; 63
    38a6:	0f 90       	pop	r0
    38a8:	1f 90       	pop	r1
    38aa:	18 95       	reti

000038ac <playback>:

void playback() {
	buffer_reset();
    38ac:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <buffer_reset>
	pageCount = countpage;
    38b0:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <countpage>
    38b4:	90 91 74 03 	lds	r25, 0x0374	; 0x800374 <countpage+0x1>
    38b8:	90 93 72 03 	sts	0x0372, r25	; 0x800372 <pageCount+0x1>
    38bc:	80 93 71 03 	sts	0x0371, r24	; 0x800371 <pageCount>
	
	overflow_reset = 2;
    38c0:	82 e0       	ldi	r24, 0x02	; 2
    38c2:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <overflow_reset>
	overflow_counter = 0;
    38c6:	10 92 6d 03 	sts	0x036D, r1	; 0x80036d <overflow_counter>
	PORTD |= 0b00010000;
    38ca:	5c 9a       	sbi	0x0b, 4	; 11
	wave_open();
    38cc:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <wave_open>
	wave_read(buffer_writePage(), 1024);
    38d0:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <buffer_writePage>
    38d4:	60 e0       	ldi	r22, 0x00	; 0
    38d6:	74 e0       	ldi	r23, 0x04	; 4
    38d8:	0e 94 26 20 	call	0x404c	; 0x404c <wave_read>
	newPage = 0;
    38dc:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <newPage+0x1>
    38e0:	10 92 6f 03 	sts	0x036F, r1	; 0x80036f <newPage>
	PWM_init();
    38e4:	0e 94 e7 1b 	call	0x37ce	; 0x37ce <PWM_init>
    38e8:	08 95       	ret

000038ea <main>:
	uint8_t pb = 0x00;
	uint8_t pb_prev = 0x00;
	uint8_t pb_rise = 0x00;
	
	// Initialisation
	init();
    38ea:	0e 94 b3 1b 	call	0x3766	; 0x3766 <init>
	
	PORTD |= (1<<PIND6);
    38ee:	5e 9a       	sbi	0x0b, 6	; 11
	printf("Your SD card is not plugged in properly. Try again!\n");
    38f0:	80 e3       	ldi	r24, 0x30	; 48
    38f2:	91 e0       	ldi	r25, 0x01	; 1
    38f4:	0e 94 b9 20 	call	0x4172	; 0x4172 <puts>
/************************************************************************/
int main(void) {
	
	uint8_t state = DVR_STOPPED;
	uint8_t pb = 0x00;
	uint8_t pb_prev = 0x00;
    38f8:	d0 e0       	ldi	r29, 0x00	; 0
/************************************************************************/
/* MAIN LOOP (CODE ENTRY)                                               */
/************************************************************************/
int main(void) {
	
	uint8_t state = DVR_STOPPED;
    38fa:	80 e0       	ldi	r24, 0x00	; 0
				// TODO: Implement stop functionality
				//S3 pressed
				PORTD &= 0b10001111; // all LEDs off state
				PORTD |= (1<<PIND6);  //LED3 on
				
				pageCount = 1;	// Finish recording last page
    38fc:	cc 24       	eor	r12, r12
    38fe:	c3 94       	inc	r12
    3900:	d1 2c       	mov	r13, r1
					printf("DONE!\n");	 // Print status to console
					//S3 pressed
					PORTD &= 0b10001111; // all LEDs off state
					PORTD |= (1<<PIND6);  //LED3 on
					state = DVR_STOPPED;
					overflow_reset = 2;
    3902:	68 94       	set
    3904:	aa 24       	eor	r10, r10
    3906:	a1 f8       	bld	r10, 1
			case DVR_STOPPED:
			// TODO: Implement button/LED handling for record/playback/stop
			//S1 pressed
			if (pb_rise & (1<<PINF4))
			{
				printf("Begin Playback...");	// Output status to console
    3908:	0f 2e       	mov	r0, r31
    390a:	f4 e6       	ldi	r31, 0x64	; 100
    390c:	ef 2e       	mov	r14, r31
    390e:	f1 e0       	ldi	r31, 0x01	; 1
    3910:	ff 2e       	mov	r15, r31
    3912:	f0 2d       	mov	r31, r0
		// Output status to console
				dvr_record();			// Initiate recording
				state = DVR_RECORDING;
				PORTD &= 0b10001111; // all LEDs off state
				PORTD |= (1<<PIND5);  // LED2 on
				printf("Recording...");
    3914:	06 e7       	ldi	r16, 0x76	; 118
    3916:	11 e0       	ldi	r17, 0x01	; 1
	// Loop forever (state machine)
	// Loop forever (state machine)
	for(;;) {
		
		//Debouncing code
		pb = pb_debounced;
    3918:	b0 90 77 03 	lds	r11, 0x0377	; 0x800377 <pb_debounced>
		pb_rise = (pb & (pb ^ pb_prev)); //Rising edge
    391c:	d0 95       	com	r29
    391e:	cd 2f       	mov	r28, r29
    3920:	cb 21       	and	r28, r11
		pb_prev = pb;
		
		
		// Switch depending on state
		switch (state) {
    3922:	81 30       	cpi	r24, 0x01	; 1
    3924:	39 f1       	breq	.+78     	; 0x3974 <main+0x8a>
    3926:	20 f0       	brcs	.+8      	; 0x3930 <main+0x46>
    3928:	82 30       	cpi	r24, 0x02	; 2
    392a:	09 f0       	breq	.+2      	; 0x392e <main+0x44>
    392c:	8e c0       	rjmp	.+284    	; 0x3a4a <main+0x160>
    392e:	65 c0       	rjmp	.+202    	; 0x39fa <main+0x110>
	// Loop forever (state machine)
	// Loop forever (state machine)
	for(;;) {
		
		//Debouncing code
		pb = pb_debounced;
    3930:	db 2d       	mov	r29, r11
		// Switch depending on state
		switch (state) {
			case DVR_STOPPED:
			// TODO: Implement button/LED handling for record/playback/stop
			//S1 pressed
			if (pb_rise & (1<<PINF4))
    3932:	c4 ff       	sbrs	r28, 4
    3934:	0e c0       	rjmp	.+28     	; 0x3952 <main+0x68>
			{
				printf("Begin Playback...");	// Output status to console
    3936:	ff 92       	push	r15
    3938:	ef 92       	push	r14
    393a:	0e 94 a3 20 	call	0x4146	; 0x4146 <printf>
				playback();
    393e:	0e 94 56 1c 	call	0x38ac	; 0x38ac <playback>
				state = DVR_PLAYING;
				PORTD &= 0b10001111; // all LEDs off state
    3942:	8b b1       	in	r24, 0x0b	; 11
    3944:	8f 78       	andi	r24, 0x8F	; 143
    3946:	8b b9       	out	0x0b, r24	; 11
				PORTD |= (1<<PIND4); // LED1 on
    3948:	5c 9a       	sbi	0x0b, 4	; 11
    394a:	0f 90       	pop	r0
    394c:	0f 90       	pop	r0
			//S1 pressed
			if (pb_rise & (1<<PINF4))
			{
				printf("Begin Playback...");	// Output status to console
				playback();
				state = DVR_PLAYING;
    394e:	8a 2d       	mov	r24, r10
    3950:	01 c0       	rjmp	.+2      	; 0x3954 <main+0x6a>
    3952:	80 e0       	ldi	r24, 0x00	; 0
				PORTD &= 0b10001111; // all LEDs off state
				PORTD |= (1<<PIND4); // LED1 on
			} 
			 if (pb_rise & (1<<PINF5))
    3954:	c5 ff       	sbrs	r28, 5
    3956:	e0 cf       	rjmp	.-64     	; 0x3918 <main+0x2e>
			{
				// TODO: Implement code to initiate recording
				//S2 pressed
		// Output status to console
				dvr_record();			// Initiate recording
    3958:	0e 94 ce 1b 	call	0x379c	; 0x379c <dvr_record>
				state = DVR_RECORDING;
				PORTD &= 0b10001111; // all LEDs off state
    395c:	8b b1       	in	r24, 0x0b	; 11
    395e:	8f 78       	andi	r24, 0x8F	; 143
    3960:	8b b9       	out	0x0b, r24	; 11
				PORTD |= (1<<PIND5);  // LED2 on
    3962:	5d 9a       	sbi	0x0b, 5	; 11
				printf("Recording...");
    3964:	1f 93       	push	r17
    3966:	0f 93       	push	r16
    3968:	0e 94 a3 20 	call	0x4146	; 0x4146 <printf>
    396c:	0f 90       	pop	r0
    396e:	0f 90       	pop	r0
    3970:	bd 2e       	mov	r11, r29
    3972:	74 c0       	rjmp	.+232    	; 0x3a5c <main+0x172>
			}
			break;
			case DVR_RECORDING:
			if (pb_rise & (1<<PINF6))
    3974:	dc 2f       	mov	r29, r28
    3976:	d0 74       	andi	r29, 0x40	; 64
    3978:	c6 ff       	sbrs	r28, 6
    397a:	08 c0       	rjmp	.+16     	; 0x398c <main+0xa2>
			{
				// TODO: Implement stop functionality
				//S3 pressed
				PORTD &= 0b10001111; // all LEDs off state
    397c:	8b b1       	in	r24, 0x0b	; 11
    397e:	8f 78       	andi	r24, 0x8F	; 143
    3980:	8b b9       	out	0x0b, r24	; 11
				PORTD |= (1<<PIND6);  //LED3 on
    3982:	5e 9a       	sbi	0x0b, 6	; 11
				
				pageCount = 1;	// Finish recording last page
    3984:	d0 92 72 03 	sts	0x0372, r13	; 0x800372 <pageCount+0x1>
    3988:	c0 92 71 03 	sts	0x0371, r12	; 0x800371 <pageCount>
			}
			// Write samples to SD card when buffer page is full
			if (newPage) {
    398c:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <newPage>
    3990:	90 91 70 03 	lds	r25, 0x0370	; 0x800370 <newPage+0x1>
    3994:	89 2b       	or	r24, r25
    3996:	a1 f0       	breq	.+40     	; 0x39c0 <main+0xd6>
				countpage++;
    3998:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <countpage>
    399c:	90 91 74 03 	lds	r25, 0x0374	; 0x800374 <countpage+0x1>
    39a0:	01 96       	adiw	r24, 0x01	; 1
    39a2:	90 93 74 03 	sts	0x0374, r25	; 0x800374 <countpage+0x1>
    39a6:	80 93 73 03 	sts	0x0373, r24	; 0x800373 <countpage>
				newPage = 0;	// Acknowledge new page flag
    39aa:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <newPage+0x1>
    39ae:	10 92 6f 03 	sts	0x036F, r1	; 0x80036f <newPage>
				wave_write(buffer_readPage(), 512);
    39b2:	0e 94 c9 01 	call	0x392	; 0x392 <buffer_readPage>
    39b6:	60 e0       	ldi	r22, 0x00	; 0
    39b8:	72 e0       	ldi	r23, 0x02	; 2
    39ba:	0e 94 d5 1f 	call	0x3faa	; 0x3faa <wave_write>
    39be:	4e c0       	rjmp	.+156    	; 0x3a5c <main+0x172>
				} 
			else if (stop) {
    39c0:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <stop>
    39c4:	88 23       	and	r24, r24
    39c6:	09 f4       	brne	.+2      	; 0x39ca <main+0xe0>
    39c8:	49 c0       	rjmp	.+146    	; 0x3a5c <main+0x172>
				// Stop is flagged when the last page has been recorded
				stop = 0;							// Acknowledge stop flag
    39ca:	10 92 6e 03 	sts	0x036E, r1	; 0x80036e <stop>
				wave_write(buffer_readPage(), 512);	// Write final page
    39ce:	0e 94 c9 01 	call	0x392	; 0x392 <buffer_readPage>
    39d2:	60 e0       	ldi	r22, 0x00	; 0
    39d4:	72 e0       	ldi	r23, 0x02	; 2
    39d6:	0e 94 d5 1f 	call	0x3faa	; 0x3faa <wave_write>
				wave_close();						// Finalise WAVE file
    39da:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <wave_close>
				adc_stop();
    39de:	0e 94 1c 01 	call	0x238	; 0x238 <adc_stop>
				printf("DONE!\n");					// Print status to console
    39e2:	83 e8       	ldi	r24, 0x83	; 131
    39e4:	91 e0       	ldi	r25, 0x01	; 1
    39e6:	0e 94 b9 20 	call	0x4172	; 0x4172 <puts>
				while (pb_rise & (1<<PINF6)){
    39ea:	dd 23       	and	r29, r29
    39ec:	09 f4       	brne	.+2      	; 0x39f0 <main+0x106>
    39ee:	44 c0       	rjmp	.+136    	; 0x3a78 <main+0x18e>
					printf("Please release record button ........ \n");
    39f0:	89 e8       	ldi	r24, 0x89	; 137
    39f2:	91 e0       	ldi	r25, 0x01	; 1
    39f4:	0e 94 b9 20 	call	0x4172	; 0x4172 <puts>
    39f8:	fb cf       	rjmp	.-10     	; 0x39f0 <main+0x106>
			
			
			
			break;
			case DVR_PLAYING:
			if (newPage)
    39fa:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <newPage>
    39fe:	90 91 70 03 	lds	r25, 0x0370	; 0x800370 <newPage+0x1>
    3a02:	89 2b       	or	r24, r25
    3a04:	59 f0       	breq	.+22     	; 0x3a1c <main+0x132>
			{
				newPage = 0;	// Acknowledge new page flag
    3a06:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <newPage+0x1>
    3a0a:	10 92 6f 03 	sts	0x036F, r1	; 0x80036f <newPage>
				wave_read(buffer_writePage(), 512);
    3a0e:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <buffer_writePage>
    3a12:	60 e0       	ldi	r22, 0x00	; 0
    3a14:	72 e0       	ldi	r23, 0x02	; 2
    3a16:	0e 94 26 20 	call	0x404c	; 0x404c <wave_read>
    3a1a:	27 c0       	rjmp	.+78     	; 0x3a6a <main+0x180>

			}	 else if (stop || (pb_rise & (1<<PINF6))){
    3a1c:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <stop>
    3a20:	81 11       	cpse	r24, r1
    3a22:	02 c0       	rjmp	.+4      	; 0x3a28 <main+0x13e>
    3a24:	c6 ff       	sbrs	r28, 6
    3a26:	21 c0       	rjmp	.+66     	; 0x3a6a <main+0x180>
				// TODO: Implement playback functionality
					stop = 0;       // Acknowledge stop flag
    3a28:	10 92 6e 03 	sts	0x036E, r1	; 0x80036e <stop>
					wave_close();   // Finalise WAVE file
    3a2c:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <wave_close>
					PWM_stop();
    3a30:	0e 94 13 1c 	call	0x3826	; 0x3826 <PWM_stop>
					printf("DONE!\n");	 // Print status to console
    3a34:	83 e8       	ldi	r24, 0x83	; 131
    3a36:	91 e0       	ldi	r25, 0x01	; 1
    3a38:	0e 94 b9 20 	call	0x4172	; 0x4172 <puts>
					//S3 pressed
					PORTD &= 0b10001111; // all LEDs off state
    3a3c:	8b b1       	in	r24, 0x0b	; 11
    3a3e:	8f 78       	andi	r24, 0x8F	; 143
    3a40:	8b b9       	out	0x0b, r24	; 11
					PORTD |= (1<<PIND6);  //LED3 on
    3a42:	5e 9a       	sbi	0x0b, 6	; 11
					state = DVR_STOPPED;
					overflow_reset = 2;
    3a44:	a0 92 0e 01 	sts	0x010E, r10	; 0x80010e <overflow_reset>
    3a48:	17 c0       	rjmp	.+46     	; 0x3a78 <main+0x18e>
			// TODO: Implement playback functionality
			break;
			default:
			
			// Invalid state, return to valid idle state (stopped)
			printf("ERROR: State machine in main entered invalid state!\n");
    3a4a:	80 eb       	ldi	r24, 0xB0	; 176
    3a4c:	91 e0       	ldi	r25, 0x01	; 1
    3a4e:	0e 94 b9 20 	call	0x4172	; 0x4172 <puts>
			state = DVR_STOPPED;
			PORTD |= (1<<PIND6);   // Turn LED 3 ON
    3a52:	5e 9a       	sbi	0x0b, 6	; 11
			PORTD &= 0b10001111; // all LEDs off state
    3a54:	8b b1       	in	r24, 0x0b	; 11
    3a56:	8f 78       	andi	r24, 0x8F	; 143
    3a58:	8b b9       	out	0x0b, r24	; 11
			break;
    3a5a:	0e c0       	rjmp	.+28     	; 0x3a78 <main+0x18e>
	// Loop forever (state machine)
	// Loop forever (state machine)
	for(;;) {
		
		//Debouncing code
		pb = pb_debounced;
    3a5c:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <pb_debounced>
		pb_rise = (pb & (pb ^ pb_prev)); //Rising edge
    3a60:	cb 2d       	mov	r28, r11
    3a62:	c0 95       	com	r28
    3a64:	c8 23       	and	r28, r24
	// Loop forever (state machine)
	// Loop forever (state machine)
	for(;;) {
		
		//Debouncing code
		pb = pb_debounced;
    3a66:	b8 2e       	mov	r11, r24
    3a68:	85 cf       	rjmp	.-246    	; 0x3974 <main+0x8a>
    3a6a:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <pb_debounced>
		pb_rise = (pb & (pb ^ pb_prev)); //Rising edge
    3a6e:	cb 2d       	mov	r28, r11
    3a70:	c0 95       	com	r28
    3a72:	c8 23       	and	r28, r24
	// Loop forever (state machine)
	// Loop forever (state machine)
	for(;;) {
		
		//Debouncing code
		pb = pb_debounced;
    3a74:	b8 2e       	mov	r11, r24
    3a76:	c1 cf       	rjmp	.-126    	; 0x39fa <main+0x110>
    3a78:	d0 91 77 03 	lds	r29, 0x0377	; 0x800377 <pb_debounced>
		pb_rise = (pb & (pb ^ pb_prev)); //Rising edge
    3a7c:	cb 2d       	mov	r28, r11
    3a7e:	c0 95       	com	r28
    3a80:	cd 23       	and	r28, r29
    3a82:	57 cf       	rjmp	.-338    	; 0x3932 <main+0x48>

00003a84 <serial_getchar>:
	return usb_serial_putchar(c);
}

static uint8_t serial_getchar(FILE *stream) {
	//wait for character (blocking)
	while(!usb_serial_available());
    3a84:	0e 94 46 19 	call	0x328c	; 0x328c <usb_serial_available>
    3a88:	88 23       	and	r24, r24
    3a8a:	e1 f3       	breq	.-8      	; 0x3a84 <serial_getchar>
	//read a character from the USB serial interface 
	return usb_serial_getchar();
    3a8c:	0e 94 17 19 	call	0x322e	; 0x322e <usb_serial_getchar>
}
    3a90:	08 95       	ret

00003a92 <serial_putchar>:
/************************************************************************/
/* PRIVATE/UTILLITY FUNCTIONS                                           */
/************************************************************************/
static uint8_t serial_putchar(char c, FILE *stream) {
	//outputs a character via the USB serial interface
	return usb_serial_putchar(c);
    3a92:	0e 94 60 19 	call	0x32c0	; 0x32c0 <usb_serial_putchar>
}
    3a96:	08 95       	ret

00003a98 <serial_init>:
 * Initialises the serial module for use. This function must be called
 * prior to using any IO functions. This function initialises the USB
 * interface and creates the input and output serial streams.
 */
void serial_init() {
	usb_init();			  // Initialise USB serial
    3a98:	0e 94 fe 18 	call	0x31fc	; 0x31fc <usb_init>
	stdin = &stdinout;
    3a9c:	ef ef       	ldi	r30, 0xFF	; 255
    3a9e:	f9 e0       	ldi	r31, 0x09	; 9
    3aa0:	8f e0       	ldi	r24, 0x0F	; 15
    3aa2:	91 e0       	ldi	r25, 0x01	; 1
    3aa4:	91 83       	std	Z+1, r25	; 0x01
    3aa6:	80 83       	st	Z, r24
	stdout = &stdinout;
    3aa8:	93 83       	std	Z+3, r25	; 0x03
    3aaa:	82 83       	std	Z+2, r24	; 0x02
    3aac:	08 95       	ret

00003aae <timer_init>:
 * 
 * Initialises and starts Timer0 with a 64 us period (15.625 kHz).
 * Assumes a 16 MHz system clock. Interrupts at counter top.
 */
void timer_init() {
	OCR0A = 128;	// 15.625 kHz (64 us period)
    3aae:	80 e8       	ldi	r24, 0x80	; 128
    3ab0:	87 bd       	out	0x27, r24	; 39
	TCCR0A = 0x02;	// CTC mode
    3ab2:	82 e0       	ldi	r24, 0x02	; 2
    3ab4:	84 bd       	out	0x24, r24	; 36
	TIMSK0 = 0x02;  // Interrupt on CMPA (top)
    3ab6:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	
	TCCR0B = 0x02;  // Start timer, /8 prescaler
    3aba:	85 bd       	out	0x25, r24	; 37

	DDRD |= (1<<PIND7);		// Set PORTD7 (LED4) as output
    3abc:	57 9a       	sbi	0x0a, 7	; 10
    3abe:	08 95       	ret

00003ac0 <__vector_21>:
 * Interrupt service routine for Timer0 CompareA vector.
 * Corresponds to top of timer for CTC mode.
 *
 * Used to generate regular, timed events.
 */
ISR(TIMER0_COMPA_vect) {
    3ac0:	1f 92       	push	r1
    3ac2:	0f 92       	push	r0
    3ac4:	0f b6       	in	r0, 0x3f	; 63
    3ac6:	0f 92       	push	r0
    3ac8:	11 24       	eor	r1, r1
    3aca:	2f 93       	push	r18
    3acc:	3f 93       	push	r19
    3ace:	4f 93       	push	r20
    3ad0:	5f 93       	push	r21
    3ad2:	6f 93       	push	r22
    3ad4:	7f 93       	push	r23
    3ad6:	8f 93       	push	r24
    3ad8:	9f 93       	push	r25
    3ada:	af 93       	push	r26
    3adc:	bf 93       	push	r27
    3ade:	ef 93       	push	r30
    3ae0:	ff 93       	push	r31
	uint8_t pb;
	uint8_t delta;
	
	
	// Timer to service FatFs module (~10 ms interval)
	if (!(--timer_fatfs)) {
    3ae2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <timer_fatfs>
    3ae6:	81 50       	subi	r24, 0x01	; 1
    3ae8:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timer_fatfs>
    3aec:	81 11       	cpse	r24, r1
    3aee:	05 c0       	rjmp	.+10     	; 0x3afa <__vector_21+0x3a>
		timer_fatfs = TIMER_INTERVAL_FATFS;
    3af0:	8c e9       	ldi	r24, 0x9C	; 156
    3af2:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timer_fatfs>
		disk_timerproc();
    3af6:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <disk_timerproc>
	}
	
	// Timer to flash debug LED (1 Hz, 50% duty cycle flash)
	if (!(--timer_led)) {
    3afa:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <timer_led>
    3afe:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <timer_led+0x1>
    3b02:	01 97       	sbiw	r24, 0x01	; 1
    3b04:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timer_led+0x1>
    3b08:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timer_led>
    3b0c:	89 2b       	or	r24, r25
    3b0e:	49 f4       	brne	.+18     	; 0x3b22 <__vector_21+0x62>
		timer_led = TIMER_INTERVAL_LED;
    3b10:	85 e8       	ldi	r24, 0x85	; 133
    3b12:	9e e1       	ldi	r25, 0x1E	; 30
    3b14:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timer_led+0x1>
    3b18:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timer_led>
		PORTD ^= (1<<PIND7);
    3b1c:	8b b1       	in	r24, 0x0b	; 11
    3b1e:	80 58       	subi	r24, 0x80	; 128
    3b20:	8b b9       	out	0x0b, r24	; 11
	}
	
	if (!(--timer_debounce)) {
    3b22:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <timer_debounce>
    3b26:	81 50       	subi	r24, 0x01	; 1
    3b28:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <timer_debounce>
    3b2c:	81 11       	cpse	r24, r1
    3b2e:	17 c0       	rjmp	.+46     	; 0x3b5e <__vector_21+0x9e>
		timer_debounce = TIMER_INTERVAL_DEBOUNCE;
    3b30:	8f e0       	ldi	r24, 0x0F	; 15
    3b32:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <timer_debounce>
		
		pb = ~PINF;
    3b36:	8f b1       	in	r24, 0x0f	; 15
		delta = pb ^ pb_debounced;
    3b38:	90 91 77 03 	lds	r25, 0x0377	; 0x800377 <pb_debounced>
    3b3c:	80 95       	com	r24
    3b3e:	89 27       	eor	r24, r25
		pb_debounced ^= (reg2 & delta);
    3b40:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <reg2>
    3b44:	20 91 77 03 	lds	r18, 0x0377	; 0x800377 <pb_debounced>
    3b48:	98 23       	and	r25, r24
    3b4a:	92 27       	eor	r25, r18
    3b4c:	90 93 77 03 	sts	0x0377, r25	; 0x800377 <pb_debounced>
		reg2 = (reg1 & delta);
    3b50:	90 91 76 03 	lds	r25, 0x0376	; 0x800376 <reg1>
    3b54:	98 23       	and	r25, r24
    3b56:	90 93 75 03 	sts	0x0375, r25	; 0x800375 <reg2>
		reg1 = delta;
    3b5a:	80 93 76 03 	sts	0x0376, r24	; 0x800376 <reg1>
		
	}
	
    3b5e:	ff 91       	pop	r31
    3b60:	ef 91       	pop	r30
    3b62:	bf 91       	pop	r27
    3b64:	af 91       	pop	r26
    3b66:	9f 91       	pop	r25
    3b68:	8f 91       	pop	r24
    3b6a:	7f 91       	pop	r23
    3b6c:	6f 91       	pop	r22
    3b6e:	5f 91       	pop	r21
    3b70:	4f 91       	pop	r20
    3b72:	3f 91       	pop	r19
    3b74:	2f 91       	pop	r18
    3b76:	0f 90       	pop	r0
    3b78:	0f be       	out	0x3f, r0	; 63
    3b7a:	0f 90       	pop	r0
    3b7c:	1f 90       	pop	r1
    3b7e:	18 95       	reti

00003b80 <set_char_array>:
 * 
 * Parameters:
 *   array - Destination array.
 *   string - Source string.
 */
void set_char_array(char* array, char* string) {
    3b80:	fb 01       	movw	r30, r22
    3b82:	dc 01       	movw	r26, r24
    3b84:	9b 01       	movw	r18, r22
    3b86:	2c 5f       	subi	r18, 0xFC	; 252
    3b88:	3f 4f       	sbci	r19, 0xFF	; 255
	for (int i = 0; i < 4; i++) {
		array[i] = string[i];
    3b8a:	81 91       	ld	r24, Z+
    3b8c:	8d 93       	st	X+, r24
 * Parameters:
 *   array - Destination array.
 *   string - Source string.
 */
void set_char_array(char* array, char* string) {
	for (int i = 0; i < 4; i++) {
    3b8e:	e2 17       	cp	r30, r18
    3b90:	f3 07       	cpc	r31, r19
    3b92:	d9 f7       	brne	.-10     	; 0x3b8a <set_char_array+0xa>
		array[i] = string[i];
	}
}
    3b94:	08 95       	ret

00003b96 <initialise_header>:
 * Parameters:
 *   samplerate - Sample rate of the WAVE file.
 *   bps - Bits per sample.
 *   channels - Number of audio channels (1 = mono, 2 = stereo, ...).
 */
void initialise_header(uint32_t samplerate, uint8_t bps, uint8_t channels) {
    3b96:	8f 92       	push	r8
    3b98:	9f 92       	push	r9
    3b9a:	af 92       	push	r10
    3b9c:	bf 92       	push	r11
    3b9e:	ff 92       	push	r15
    3ba0:	0f 93       	push	r16
    3ba2:	1f 93       	push	r17
    3ba4:	cf 93       	push	r28
    3ba6:	df 93       	push	r29
    3ba8:	4b 01       	movw	r8, r22
    3baa:	5c 01       	movw	r10, r24
    3bac:	14 2f       	mov	r17, r20
    3bae:	f2 2e       	mov	r15, r18
	set_char_array(waveHeader.fields.ChunkID, "RIFF");
    3bb0:	64 ee       	ldi	r22, 0xE4	; 228
    3bb2:	71 e0       	ldi	r23, 0x01	; 1
    3bb4:	83 ed       	ldi	r24, 0xD3	; 211
    3bb6:	99 e0       	ldi	r25, 0x09	; 9
    3bb8:	0e 94 c0 1d 	call	0x3b80	; 0x3b80 <set_char_array>
	waveHeader.fields.ChunkSize = 0;	// placeholder, update when number of samples is known (36 + dataSize)
    3bbc:	c3 ed       	ldi	r28, 0xD3	; 211
    3bbe:	d9 e0       	ldi	r29, 0x09	; 9
    3bc0:	1c 82       	std	Y+4, r1	; 0x04
    3bc2:	1d 82       	std	Y+5, r1	; 0x05
    3bc4:	1e 82       	std	Y+6, r1	; 0x06
    3bc6:	1f 82       	std	Y+7, r1	; 0x07
	set_char_array(waveHeader.fields.Format, "WAVE");
    3bc8:	69 ee       	ldi	r22, 0xE9	; 233
    3bca:	71 e0       	ldi	r23, 0x01	; 1
    3bcc:	8b ed       	ldi	r24, 0xDB	; 219
    3bce:	99 e0       	ldi	r25, 0x09	; 9
    3bd0:	0e 94 c0 1d 	call	0x3b80	; 0x3b80 <set_char_array>
	
	set_char_array(waveHeader.fields.fmtID, "fmt ");	
    3bd4:	6e ee       	ldi	r22, 0xEE	; 238
    3bd6:	71 e0       	ldi	r23, 0x01	; 1
    3bd8:	8f ed       	ldi	r24, 0xDF	; 223
    3bda:	99 e0       	ldi	r25, 0x09	; 9
    3bdc:	0e 94 c0 1d 	call	0x3b80	; 0x3b80 <set_char_array>
	waveHeader.fields.fmtSize = 16;		// for PCM
    3be0:	80 e1       	ldi	r24, 0x10	; 16
    3be2:	90 e0       	ldi	r25, 0x00	; 0
    3be4:	a0 e0       	ldi	r26, 0x00	; 0
    3be6:	b0 e0       	ldi	r27, 0x00	; 0
    3be8:	88 8b       	std	Y+16, r24	; 0x10
    3bea:	99 8b       	std	Y+17, r25	; 0x11
    3bec:	aa 8b       	std	Y+18, r26	; 0x12
    3bee:	bb 8b       	std	Y+19, r27	; 0x13
	waveHeader.fields.AudioFormat = 1;	// PCM
    3bf0:	81 e0       	ldi	r24, 0x01	; 1
    3bf2:	90 e0       	ldi	r25, 0x00	; 0
    3bf4:	9d 8b       	std	Y+21, r25	; 0x15
    3bf6:	8c 8b       	std	Y+20, r24	; 0x14
	waveHeader.fields.NumChannels = channels;
    3bf8:	ef 2d       	mov	r30, r15
    3bfa:	f0 e0       	ldi	r31, 0x00	; 0
    3bfc:	ff 8b       	std	Y+23, r31	; 0x17
    3bfe:	ee 8b       	std	Y+22, r30	; 0x16
	waveHeader.fields.SampleRate = samplerate;
    3c00:	88 8e       	std	Y+24, r8	; 0x18
    3c02:	99 8e       	std	Y+25, r9	; 0x19
    3c04:	aa 8e       	std	Y+26, r10	; 0x1a
    3c06:	bb 8e       	std	Y+27, r11	; 0x1b
	waveHeader.fields.ByteRate = samplerate*channels*(bps>>3);
    3c08:	01 2f       	mov	r16, r17
    3c0a:	06 95       	lsr	r16
    3c0c:	06 95       	lsr	r16
    3c0e:	06 95       	lsr	r16
    3c10:	a0 2f       	mov	r26, r16
    3c12:	b0 e0       	ldi	r27, 0x00	; 0
    3c14:	a5 01       	movw	r20, r10
    3c16:	94 01       	movw	r18, r8
    3c18:	0e 94 89 20 	call	0x4112	; 0x4112 <__muluhisi3>
    3c1c:	9b 01       	movw	r18, r22
    3c1e:	ac 01       	movw	r20, r24
    3c20:	df 01       	movw	r26, r30
    3c22:	0e 94 89 20 	call	0x4112	; 0x4112 <__muluhisi3>
    3c26:	6c 8f       	std	Y+28, r22	; 0x1c
    3c28:	7d 8f       	std	Y+29, r23	; 0x1d
    3c2a:	8e 8f       	std	Y+30, r24	; 0x1e
    3c2c:	9f 8f       	std	Y+31, r25	; 0x1f
	waveHeader.fields.BlockAlign = channels*(bps>>3);
    3c2e:	0e 9f       	mul	r16, r30
    3c30:	c0 01       	movw	r24, r0
    3c32:	0f 9f       	mul	r16, r31
    3c34:	90 0d       	add	r25, r0
    3c36:	11 24       	eor	r1, r1
    3c38:	99 a3       	std	Y+33, r25	; 0x21
    3c3a:	88 a3       	std	Y+32, r24	; 0x20
	waveHeader.fields.BitsPerSample = bps;
    3c3c:	41 2f       	mov	r20, r17
    3c3e:	50 e0       	ldi	r21, 0x00	; 0
    3c40:	5b a3       	std	Y+35, r21	; 0x23
    3c42:	4a a3       	std	Y+34, r20	; 0x22
	
	set_char_array(waveHeader.fields.dataID, "data");
    3c44:	63 ef       	ldi	r22, 0xF3	; 243
    3c46:	71 e0       	ldi	r23, 0x01	; 1
    3c48:	87 ef       	ldi	r24, 0xF7	; 247
    3c4a:	99 e0       	ldi	r25, 0x09	; 9
    3c4c:	0e 94 c0 1d 	call	0x3b80	; 0x3b80 <set_char_array>
	waveHeader.fields.dataSize = 0;		// placeholder, update with NumSamples * BlockAlign
    3c50:	18 a6       	std	Y+40, r1	; 0x28
    3c52:	19 a6       	std	Y+41, r1	; 0x29
    3c54:	1a a6       	std	Y+42, r1	; 0x2a
    3c56:	1b a6       	std	Y+43, r1	; 0x2b
}
    3c58:	df 91       	pop	r29
    3c5a:	cf 91       	pop	r28
    3c5c:	1f 91       	pop	r17
    3c5e:	0f 91       	pop	r16
    3c60:	ff 90       	pop	r15
    3c62:	bf 90       	pop	r11
    3c64:	af 90       	pop	r10
    3c66:	9f 90       	pop	r9
    3c68:	8f 90       	pop	r8
    3c6a:	08 95       	ret

00003c6c <write_wave_header>:
 * Function: write_wave_header
 * 
 * Writes a WAVE header structure into an open file.
 * Wave configuration is hardcoded to 15625 samples per second, 8 bits per sample, mono.
 */
void write_wave_header() {
    3c6c:	cf 93       	push	r28
    3c6e:	df 93       	push	r29
    3c70:	00 d0       	rcall	.+0      	; 0x3c72 <write_wave_header+0x6>
    3c72:	cd b7       	in	r28, 0x3d	; 61
    3c74:	de b7       	in	r29, 0x3e	; 62
	FRESULT result;
	uint16_t bw;
	
	initialise_header(15625, 8, 1);	// Create header for 15.625 kHz, 8-bit per sample, mono WAVE file
    3c76:	21 e0       	ldi	r18, 0x01	; 1
    3c78:	48 e0       	ldi	r20, 0x08	; 8
    3c7a:	69 e0       	ldi	r22, 0x09	; 9
    3c7c:	7d e3       	ldi	r23, 0x3D	; 61
    3c7e:	80 e0       	ldi	r24, 0x00	; 0
    3c80:	90 e0       	ldi	r25, 0x00	; 0
    3c82:	0e 94 cb 1d 	call	0x3b96	; 0x3b96 <initialise_header>
	result = f_write(&file, &(waveHeader.bytes), 44, &bw); // Write header to file
    3c86:	9e 01       	movw	r18, r28
    3c88:	2f 5f       	subi	r18, 0xFF	; 255
    3c8a:	3f 4f       	sbci	r19, 0xFF	; 255
    3c8c:	4c e2       	ldi	r20, 0x2C	; 44
    3c8e:	50 e0       	ldi	r21, 0x00	; 0
    3c90:	63 ed       	ldi	r22, 0xD3	; 211
    3c92:	79 e0       	ldi	r23, 0x09	; 9
    3c94:	83 eb       	ldi	r24, 0xB3	; 179
    3c96:	99 e0       	ldi	r25, 0x09	; 9
    3c98:	0e 94 5f 10 	call	0x20be	; 0x20be <f_write>

	// If error has occurred, write status to console
	if (result) printf("f_write returned error code: %d\n", result);
    3c9c:	88 23       	and	r24, r24
    3c9e:	61 f0       	breq	.+24     	; 0x3cb8 <write_wave_header+0x4c>
    3ca0:	1f 92       	push	r1
    3ca2:	8f 93       	push	r24
    3ca4:	88 ef       	ldi	r24, 0xF8	; 248
    3ca6:	91 e0       	ldi	r25, 0x01	; 1
    3ca8:	9f 93       	push	r25
    3caa:	8f 93       	push	r24
    3cac:	0e 94 a3 20 	call	0x4146	; 0x4146 <printf>
    3cb0:	0f 90       	pop	r0
    3cb2:	0f 90       	pop	r0
    3cb4:	0f 90       	pop	r0
    3cb6:	0f 90       	pop	r0
	if (bw != 44) printf("f_write wrote %d of 44 bytes to file.", bw);
    3cb8:	89 81       	ldd	r24, Y+1	; 0x01
    3cba:	9a 81       	ldd	r25, Y+2	; 0x02
    3cbc:	8c 32       	cpi	r24, 0x2C	; 44
    3cbe:	91 05       	cpc	r25, r1
    3cc0:	61 f0       	breq	.+24     	; 0x3cda <write_wave_header+0x6e>
    3cc2:	9f 93       	push	r25
    3cc4:	8f 93       	push	r24
    3cc6:	89 e1       	ldi	r24, 0x19	; 25
    3cc8:	92 e0       	ldi	r25, 0x02	; 2
    3cca:	9f 93       	push	r25
    3ccc:	8f 93       	push	r24
    3cce:	0e 94 a3 20 	call	0x4146	; 0x4146 <printf>
    3cd2:	0f 90       	pop	r0
    3cd4:	0f 90       	pop	r0
    3cd6:	0f 90       	pop	r0
    3cd8:	0f 90       	pop	r0
	
	// Flag that header requires finalisation
	finaliseHeader = 1;
    3cda:	81 e0       	ldi	r24, 0x01	; 1
    3cdc:	80 93 78 03 	sts	0x0378, r24	; 0x800378 <finaliseHeader>
}
    3ce0:	0f 90       	pop	r0
    3ce2:	0f 90       	pop	r0
    3ce4:	df 91       	pop	r29
    3ce6:	cf 91       	pop	r28
    3ce8:	08 95       	ret

00003cea <read_wave_header>:
 * 
 * Reads a WAVE header from an open file into a structure.
 * 
 * Returns: The number of samples in the opened wave file (as reported in the header)
 */
uint32_t read_wave_header() {
    3cea:	1f 93       	push	r17
    3cec:	cf 93       	push	r28
    3cee:	df 93       	push	r29
    3cf0:	00 d0       	rcall	.+0      	; 0x3cf2 <read_wave_header+0x8>
    3cf2:	cd b7       	in	r28, 0x3d	; 61
    3cf4:	de b7       	in	r29, 0x3e	; 62
	FRESULT result;
	uint16_t br;
	
	// Read header from WAVE file into structure
	result = f_read(&file, &(waveHeader.bytes), 44, &br);
    3cf6:	9e 01       	movw	r18, r28
    3cf8:	2f 5f       	subi	r18, 0xFF	; 255
    3cfa:	3f 4f       	sbci	r19, 0xFF	; 255
    3cfc:	4c e2       	ldi	r20, 0x2C	; 44
    3cfe:	50 e0       	ldi	r21, 0x00	; 0
    3d00:	63 ed       	ldi	r22, 0xD3	; 211
    3d02:	79 e0       	ldi	r23, 0x09	; 9
    3d04:	83 eb       	ldi	r24, 0xB3	; 179
    3d06:	99 e0       	ldi	r25, 0x09	; 9
    3d08:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <f_read>
    3d0c:	18 2f       	mov	r17, r24

	// If error has occurred, write status to console
	if (result) printf("f_read returned error code: %d\n", result);
    3d0e:	88 23       	and	r24, r24
    3d10:	61 f0       	breq	.+24     	; 0x3d2a <read_wave_header+0x40>
    3d12:	1f 92       	push	r1
    3d14:	8f 93       	push	r24
    3d16:	8f e3       	ldi	r24, 0x3F	; 63
    3d18:	92 e0       	ldi	r25, 0x02	; 2
    3d1a:	9f 93       	push	r25
    3d1c:	8f 93       	push	r24
    3d1e:	0e 94 a3 20 	call	0x4146	; 0x4146 <printf>
    3d22:	0f 90       	pop	r0
    3d24:	0f 90       	pop	r0
    3d26:	0f 90       	pop	r0
    3d28:	0f 90       	pop	r0
	if (br != 44) printf("f_read read %d of 44 bytes from file.", br);
    3d2a:	89 81       	ldd	r24, Y+1	; 0x01
    3d2c:	9a 81       	ldd	r25, Y+2	; 0x02
    3d2e:	8c 32       	cpi	r24, 0x2C	; 44
    3d30:	91 05       	cpc	r25, r1
    3d32:	61 f0       	breq	.+24     	; 0x3d4c <read_wave_header+0x62>
    3d34:	9f 93       	push	r25
    3d36:	8f 93       	push	r24
    3d38:	8f e5       	ldi	r24, 0x5F	; 95
    3d3a:	92 e0       	ldi	r25, 0x02	; 2
    3d3c:	9f 93       	push	r25
    3d3e:	8f 93       	push	r24
    3d40:	0e 94 a3 20 	call	0x4146	; 0x4146 <printf>
    3d44:	0f 90       	pop	r0
    3d46:	0f 90       	pop	r0
    3d48:	0f 90       	pop	r0
    3d4a:	0f 90       	pop	r0
	
	
	if (result | (br != 44)) {
    3d4c:	81 e0       	ldi	r24, 0x01	; 1
    3d4e:	90 e0       	ldi	r25, 0x00	; 0
    3d50:	29 81       	ldd	r18, Y+1	; 0x01
    3d52:	3a 81       	ldd	r19, Y+2	; 0x02
    3d54:	2c 32       	cpi	r18, 0x2C	; 44
    3d56:	31 05       	cpc	r19, r1
    3d58:	11 f4       	brne	.+4      	; 0x3d5e <read_wave_header+0x74>
    3d5a:	80 e0       	ldi	r24, 0x00	; 0
    3d5c:	90 e0       	ldi	r25, 0x00	; 0
    3d5e:	81 2b       	or	r24, r17
    3d60:	89 2b       	or	r24, r25
    3d62:	49 f4       	brne	.+18     	; 0x3d76 <read_wave_header+0x8c>
		// Return "empty" wave file if read is unsuccessful
		return 0;
	} else {
		return waveHeader.fields.dataSize;
    3d64:	60 91 fb 09 	lds	r22, 0x09FB	; 0x8009fb <waveHeader+0x28>
    3d68:	70 91 fc 09 	lds	r23, 0x09FC	; 0x8009fc <waveHeader+0x29>
    3d6c:	80 91 fd 09 	lds	r24, 0x09FD	; 0x8009fd <waveHeader+0x2a>
    3d70:	90 91 fe 09 	lds	r25, 0x09FE	; 0x8009fe <waveHeader+0x2b>
    3d74:	03 c0       	rjmp	.+6      	; 0x3d7c <read_wave_header+0x92>
	if (br != 44) printf("f_read read %d of 44 bytes from file.", br);
	
	
	if (result | (br != 44)) {
		// Return "empty" wave file if read is unsuccessful
		return 0;
    3d76:	60 e0       	ldi	r22, 0x00	; 0
    3d78:	70 e0       	ldi	r23, 0x00	; 0
    3d7a:	cb 01       	movw	r24, r22
	} else {
		return waveHeader.fields.dataSize;
	}
}
    3d7c:	0f 90       	pop	r0
    3d7e:	0f 90       	pop	r0
    3d80:	df 91       	pop	r29
    3d82:	cf 91       	pop	r28
    3d84:	1f 91       	pop	r17
    3d86:	08 95       	ret

00003d88 <finalise_wave_header>:
/**
 * Function: finalise_wave_header
 * 
 * Finalises the header of an open WAVE file on the basis of the number of samples written to the file.
 */
void finalise_wave_header() {
    3d88:	cf 93       	push	r28
    3d8a:	df 93       	push	r29
    3d8c:	cd b7       	in	r28, 0x3d	; 61
    3d8e:	de b7       	in	r29, 0x3e	; 62
    3d90:	2a 97       	sbiw	r28, 0x0a	; 10
    3d92:	0f b6       	in	r0, 0x3f	; 63
    3d94:	f8 94       	cli
    3d96:	de bf       	out	0x3e, r29	; 62
    3d98:	0f be       	out	0x3f, r0	; 63
    3d9a:	cd bf       	out	0x3d, r28	; 61
	FRESULT result;
	uint16_t bw;
	
	// Calculate header fields to update
	uint32_t dataSize = sampleCount;
    3d9c:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <sampleCount>
    3da0:	90 91 7a 03 	lds	r25, 0x037A	; 0x80037a <sampleCount+0x1>
    3da4:	a0 91 7b 03 	lds	r26, 0x037B	; 0x80037b <sampleCount+0x2>
    3da8:	b0 91 7c 03 	lds	r27, 0x037C	; 0x80037c <sampleCount+0x3>
    3dac:	8b 83       	std	Y+3, r24	; 0x03
    3dae:	9c 83       	std	Y+4, r25	; 0x04
    3db0:	ad 83       	std	Y+5, r26	; 0x05
    3db2:	be 83       	std	Y+6, r27	; 0x06
	uint32_t chunkSize = 36 + dataSize;
    3db4:	84 96       	adiw	r24, 0x24	; 36
    3db6:	a1 1d       	adc	r26, r1
    3db8:	b1 1d       	adc	r27, r1
    3dba:	8f 83       	std	Y+7, r24	; 0x07
    3dbc:	98 87       	std	Y+8, r25	; 0x08
    3dbe:	a9 87       	std	Y+9, r26	; 0x09
    3dc0:	ba 87       	std	Y+10, r27	; 0x0a
	
	// Finalise wave file header
	// Where errors occur, print to console
	result = f_lseek(&file, 4);						// Seek to dataSize location
    3dc2:	44 e0       	ldi	r20, 0x04	; 4
    3dc4:	50 e0       	ldi	r21, 0x00	; 0
    3dc6:	60 e0       	ldi	r22, 0x00	; 0
    3dc8:	70 e0       	ldi	r23, 0x00	; 0
    3dca:	83 eb       	ldi	r24, 0xB3	; 179
    3dcc:	99 e0       	ldi	r25, 0x09	; 9
    3dce:	0e 94 b5 12 	call	0x256a	; 0x256a <f_lseek>
	if (result) printf("f_lseek returned error code: %d\n", result);
    3dd2:	88 23       	and	r24, r24
    3dd4:	61 f0       	breq	.+24     	; 0x3dee <finalise_wave_header+0x66>
    3dd6:	1f 92       	push	r1
    3dd8:	8f 93       	push	r24
    3dda:	85 e8       	ldi	r24, 0x85	; 133
    3ddc:	92 e0       	ldi	r25, 0x02	; 2
    3dde:	9f 93       	push	r25
    3de0:	8f 93       	push	r24
    3de2:	0e 94 a3 20 	call	0x4146	; 0x4146 <printf>
    3de6:	0f 90       	pop	r0
    3de8:	0f 90       	pop	r0
    3dea:	0f 90       	pop	r0
    3dec:	0f 90       	pop	r0
	result = f_write(&file, &chunkSize, 4, &bw);	// Write dataSize field to file
    3dee:	9e 01       	movw	r18, r28
    3df0:	2f 5f       	subi	r18, 0xFF	; 255
    3df2:	3f 4f       	sbci	r19, 0xFF	; 255
    3df4:	44 e0       	ldi	r20, 0x04	; 4
    3df6:	50 e0       	ldi	r21, 0x00	; 0
    3df8:	be 01       	movw	r22, r28
    3dfa:	69 5f       	subi	r22, 0xF9	; 249
    3dfc:	7f 4f       	sbci	r23, 0xFF	; 255
    3dfe:	83 eb       	ldi	r24, 0xB3	; 179
    3e00:	99 e0       	ldi	r25, 0x09	; 9
    3e02:	0e 94 5f 10 	call	0x20be	; 0x20be <f_write>
	if (result) printf("f_write returned error code: %d\n", result);
    3e06:	88 23       	and	r24, r24
    3e08:	61 f0       	breq	.+24     	; 0x3e22 <finalise_wave_header+0x9a>
    3e0a:	1f 92       	push	r1
    3e0c:	8f 93       	push	r24
    3e0e:	88 ef       	ldi	r24, 0xF8	; 248
    3e10:	91 e0       	ldi	r25, 0x01	; 1
    3e12:	9f 93       	push	r25
    3e14:	8f 93       	push	r24
    3e16:	0e 94 a3 20 	call	0x4146	; 0x4146 <printf>
    3e1a:	0f 90       	pop	r0
    3e1c:	0f 90       	pop	r0
    3e1e:	0f 90       	pop	r0
    3e20:	0f 90       	pop	r0
	if (bw != 4) printf("f_write wrote %d of 4 bytes to file.", bw);
    3e22:	89 81       	ldd	r24, Y+1	; 0x01
    3e24:	9a 81       	ldd	r25, Y+2	; 0x02
    3e26:	84 30       	cpi	r24, 0x04	; 4
    3e28:	91 05       	cpc	r25, r1
    3e2a:	61 f0       	breq	.+24     	; 0x3e44 <finalise_wave_header+0xbc>
    3e2c:	9f 93       	push	r25
    3e2e:	8f 93       	push	r24
    3e30:	86 ea       	ldi	r24, 0xA6	; 166
    3e32:	92 e0       	ldi	r25, 0x02	; 2
    3e34:	9f 93       	push	r25
    3e36:	8f 93       	push	r24
    3e38:	0e 94 a3 20 	call	0x4146	; 0x4146 <printf>
    3e3c:	0f 90       	pop	r0
    3e3e:	0f 90       	pop	r0
    3e40:	0f 90       	pop	r0
    3e42:	0f 90       	pop	r0
	
	result = f_lseek(&file, 40);					// Seek to chunkSize location
    3e44:	48 e2       	ldi	r20, 0x28	; 40
    3e46:	50 e0       	ldi	r21, 0x00	; 0
    3e48:	60 e0       	ldi	r22, 0x00	; 0
    3e4a:	70 e0       	ldi	r23, 0x00	; 0
    3e4c:	83 eb       	ldi	r24, 0xB3	; 179
    3e4e:	99 e0       	ldi	r25, 0x09	; 9
    3e50:	0e 94 b5 12 	call	0x256a	; 0x256a <f_lseek>
	if (result) printf("f_lseek returned error code: %d\n", result);
    3e54:	88 23       	and	r24, r24
    3e56:	61 f0       	breq	.+24     	; 0x3e70 <finalise_wave_header+0xe8>
    3e58:	1f 92       	push	r1
    3e5a:	8f 93       	push	r24
    3e5c:	85 e8       	ldi	r24, 0x85	; 133
    3e5e:	92 e0       	ldi	r25, 0x02	; 2
    3e60:	9f 93       	push	r25
    3e62:	8f 93       	push	r24
    3e64:	0e 94 a3 20 	call	0x4146	; 0x4146 <printf>
    3e68:	0f 90       	pop	r0
    3e6a:	0f 90       	pop	r0
    3e6c:	0f 90       	pop	r0
    3e6e:	0f 90       	pop	r0
	result = f_write(&file, &dataSize, 4, &bw);		// Write chuckSize field to file
    3e70:	9e 01       	movw	r18, r28
    3e72:	2f 5f       	subi	r18, 0xFF	; 255
    3e74:	3f 4f       	sbci	r19, 0xFF	; 255
    3e76:	44 e0       	ldi	r20, 0x04	; 4
    3e78:	50 e0       	ldi	r21, 0x00	; 0
    3e7a:	be 01       	movw	r22, r28
    3e7c:	6d 5f       	subi	r22, 0xFD	; 253
    3e7e:	7f 4f       	sbci	r23, 0xFF	; 255
    3e80:	83 eb       	ldi	r24, 0xB3	; 179
    3e82:	99 e0       	ldi	r25, 0x09	; 9
    3e84:	0e 94 5f 10 	call	0x20be	; 0x20be <f_write>
	if (result) printf("f_write returned error code: %d\n", result);
    3e88:	88 23       	and	r24, r24
    3e8a:	61 f0       	breq	.+24     	; 0x3ea4 <finalise_wave_header+0x11c>
    3e8c:	1f 92       	push	r1
    3e8e:	8f 93       	push	r24
    3e90:	88 ef       	ldi	r24, 0xF8	; 248
    3e92:	91 e0       	ldi	r25, 0x01	; 1
    3e94:	9f 93       	push	r25
    3e96:	8f 93       	push	r24
    3e98:	0e 94 a3 20 	call	0x4146	; 0x4146 <printf>
    3e9c:	0f 90       	pop	r0
    3e9e:	0f 90       	pop	r0
    3ea0:	0f 90       	pop	r0
    3ea2:	0f 90       	pop	r0
	if (bw != 4) printf("f_write wrote %d of 4 bytes to file.", bw);
    3ea4:	89 81       	ldd	r24, Y+1	; 0x01
    3ea6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ea8:	84 30       	cpi	r24, 0x04	; 4
    3eaa:	91 05       	cpc	r25, r1
    3eac:	61 f0       	breq	.+24     	; 0x3ec6 <finalise_wave_header+0x13e>
    3eae:	9f 93       	push	r25
    3eb0:	8f 93       	push	r24
    3eb2:	86 ea       	ldi	r24, 0xA6	; 166
    3eb4:	92 e0       	ldi	r25, 0x02	; 2
    3eb6:	9f 93       	push	r25
    3eb8:	8f 93       	push	r24
    3eba:	0e 94 a3 20 	call	0x4146	; 0x4146 <printf>
    3ebe:	0f 90       	pop	r0
    3ec0:	0f 90       	pop	r0
    3ec2:	0f 90       	pop	r0
    3ec4:	0f 90       	pop	r0
}
    3ec6:	2a 96       	adiw	r28, 0x0a	; 10
    3ec8:	0f b6       	in	r0, 0x3f	; 63
    3eca:	f8 94       	cli
    3ecc:	de bf       	out	0x3e, r29	; 62
    3ece:	0f be       	out	0x3f, r0	; 63
    3ed0:	cd bf       	out	0x3d, r28	; 61
    3ed2:	df 91       	pop	r29
    3ed4:	cf 91       	pop	r28
    3ed6:	08 95       	ret

00003ed8 <wave_init>:
 * Must be called prior to calling any other function in the WAVE module.
 */
void wave_init() {
	FRESULT result;
	
	result = f_mount(&fs, "/", 1);	// force mount SD card root directory
    3ed8:	41 e0       	ldi	r20, 0x01	; 1
    3eda:	6b ec       	ldi	r22, 0xCB	; 203
    3edc:	72 e0       	ldi	r23, 0x02	; 2
    3ede:	85 e8       	ldi	r24, 0x85	; 133
    3ee0:	97 e0       	ldi	r25, 0x07	; 7
    3ee2:	0e 94 92 0b 	call	0x1724	; 0x1724 <f_mount>

	// If error occurs, write status to console
	if (result) printf("f_mount returned error code: %d\n", result);
    3ee6:	88 23       	and	r24, r24
    3ee8:	61 f0       	breq	.+24     	; 0x3f02 <wave_init+0x2a>
    3eea:	1f 92       	push	r1
    3eec:	8f 93       	push	r24
    3eee:	8d ec       	ldi	r24, 0xCD	; 205
    3ef0:	92 e0       	ldi	r25, 0x02	; 2
    3ef2:	9f 93       	push	r25
    3ef4:	8f 93       	push	r24
    3ef6:	0e 94 a3 20 	call	0x4146	; 0x4146 <printf>
    3efa:	0f 90       	pop	r0
    3efc:	0f 90       	pop	r0
    3efe:	0f 90       	pop	r0
    3f00:	0f 90       	pop	r0
    3f02:	08 95       	ret

00003f04 <wave_create>:
 */
void wave_create() {
	FRESULT result;
	
	// Create new WAVE file with read/write access (force overwrite if file exists)
	result = f_open(&file, "EGB240.WAV", FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
    3f04:	4b e0       	ldi	r20, 0x0B	; 11
    3f06:	6e ee       	ldi	r22, 0xEE	; 238
    3f08:	72 e0       	ldi	r23, 0x02	; 2
    3f0a:	83 eb       	ldi	r24, 0xB3	; 179
    3f0c:	99 e0       	ldi	r25, 0x09	; 9
    3f0e:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <f_open>

	// If error occurs, write status to console
	if (result) printf("f_open returned error code: %d\n", result);
    3f12:	88 23       	and	r24, r24
    3f14:	61 f0       	breq	.+24     	; 0x3f2e <wave_create+0x2a>
    3f16:	1f 92       	push	r1
    3f18:	8f 93       	push	r24
    3f1a:	89 ef       	ldi	r24, 0xF9	; 249
    3f1c:	92 e0       	ldi	r25, 0x02	; 2
    3f1e:	9f 93       	push	r25
    3f20:	8f 93       	push	r24
    3f22:	0e 94 a3 20 	call	0x4146	; 0x4146 <printf>
    3f26:	0f 90       	pop	r0
    3f28:	0f 90       	pop	r0
    3f2a:	0f 90       	pop	r0
    3f2c:	0f 90       	pop	r0
	
	// Write WAVE file header to file
	write_wave_header();
    3f2e:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <write_wave_header>
	
	// Reset sample counter
	sampleCount = 0;
    3f32:	10 92 79 03 	sts	0x0379, r1	; 0x800379 <sampleCount>
    3f36:	10 92 7a 03 	sts	0x037A, r1	; 0x80037a <sampleCount+0x1>
    3f3a:	10 92 7b 03 	sts	0x037B, r1	; 0x80037b <sampleCount+0x2>
    3f3e:	10 92 7c 03 	sts	0x037C, r1	; 0x80037c <sampleCount+0x3>
    3f42:	08 95       	ret

00003f44 <wave_open>:
 */
uint32_t wave_open() {
	FRESULT result;
	
	// Open an existing WAVE file with read only access
	result = f_open(&file, "EGB240.WAV", FA_READ);
    3f44:	41 e0       	ldi	r20, 0x01	; 1
    3f46:	6e ee       	ldi	r22, 0xEE	; 238
    3f48:	72 e0       	ldi	r23, 0x02	; 2
    3f4a:	83 eb       	ldi	r24, 0xB3	; 179
    3f4c:	99 e0       	ldi	r25, 0x09	; 9
    3f4e:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <f_open>

	// If error occurs, write status to console
	if (result) printf("f_open returned error code: %d\n", result);
    3f52:	88 23       	and	r24, r24
    3f54:	61 f0       	breq	.+24     	; 0x3f6e <wave_open+0x2a>
    3f56:	1f 92       	push	r1
    3f58:	8f 93       	push	r24
    3f5a:	89 ef       	ldi	r24, 0xF9	; 249
    3f5c:	92 e0       	ldi	r25, 0x02	; 2
    3f5e:	9f 93       	push	r25
    3f60:	8f 93       	push	r24
    3f62:	0e 94 a3 20 	call	0x4146	; 0x4146 <printf>
    3f66:	0f 90       	pop	r0
    3f68:	0f 90       	pop	r0
    3f6a:	0f 90       	pop	r0
    3f6c:	0f 90       	pop	r0
	
	// Read the WAVE file header and return the number of samples reported
	return read_wave_header();
    3f6e:	0e 94 75 1e 	call	0x3cea	; 0x3cea <read_wave_header>
}
    3f72:	08 95       	ret

00003f74 <wave_close>:
 * Closes an open WAVE file. If required, the WAVE file header is finalised prior to closing.
 */
void wave_close() {
	FRESULT result;
	
	if (finaliseHeader) {
    3f74:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <finaliseHeader>
    3f78:	88 23       	and	r24, r24
    3f7a:	21 f0       	breq	.+8      	; 0x3f84 <wave_close+0x10>
		// Only finalise header where WAVE file is newly created 
		finaliseHeader = 0;
    3f7c:	10 92 78 03 	sts	0x0378, r1	; 0x800378 <finaliseHeader>
		finalise_wave_header();
    3f80:	0e 94 c4 1e 	call	0x3d88	; 0x3d88 <finalise_wave_header>
	}
	
	// Close WAVE file
	result = f_close(&file);
    3f84:	83 eb       	ldi	r24, 0xB3	; 179
    3f86:	99 e0       	ldi	r25, 0x09	; 9
    3f88:	0e 94 a4 12 	call	0x2548	; 0x2548 <f_close>

	// If error occurs, write status to console
	if (result) printf("f_close returned error code: %d\n", result);
    3f8c:	88 23       	and	r24, r24
    3f8e:	61 f0       	breq	.+24     	; 0x3fa8 <wave_close+0x34>
    3f90:	1f 92       	push	r1
    3f92:	8f 93       	push	r24
    3f94:	89 e1       	ldi	r24, 0x19	; 25
    3f96:	93 e0       	ldi	r25, 0x03	; 3
    3f98:	9f 93       	push	r25
    3f9a:	8f 93       	push	r24
    3f9c:	0e 94 a3 20 	call	0x4146	; 0x4146 <printf>
    3fa0:	0f 90       	pop	r0
    3fa2:	0f 90       	pop	r0
    3fa4:	0f 90       	pop	r0
    3fa6:	0f 90       	pop	r0
    3fa8:	08 95       	ret

00003faa <wave_write>:
 *
 * Parameters:
 *    pSamples - Pointer to array of 8-bit audio samples to write to WAVE file.
 *    count - Number of samples to write from array into WAVE file.
 */
void wave_write(uint8_t* pSamples, uint16_t count) {
    3faa:	0f 93       	push	r16
    3fac:	1f 93       	push	r17
    3fae:	cf 93       	push	r28
    3fb0:	df 93       	push	r29
    3fb2:	00 d0       	rcall	.+0      	; 0x3fb4 <wave_write+0xa>
    3fb4:	cd b7       	in	r28, 0x3d	; 61
    3fb6:	de b7       	in	r29, 0x3e	; 62
    3fb8:	8b 01       	movw	r16, r22
	FRESULT result;
	uint16_t bw;
	
	result = f_write(&file, pSamples, count, &bw); // Write samples to file
    3fba:	9e 01       	movw	r18, r28
    3fbc:	2f 5f       	subi	r18, 0xFF	; 255
    3fbe:	3f 4f       	sbci	r19, 0xFF	; 255
    3fc0:	ab 01       	movw	r20, r22
    3fc2:	bc 01       	movw	r22, r24
    3fc4:	83 eb       	ldi	r24, 0xB3	; 179
    3fc6:	99 e0       	ldi	r25, 0x09	; 9
    3fc8:	0e 94 5f 10 	call	0x20be	; 0x20be <f_write>

	// If error occurs, write status to console
	if (result) printf("f_write returned error code: %d\n", result);
    3fcc:	88 23       	and	r24, r24
    3fce:	61 f0       	breq	.+24     	; 0x3fe8 <wave_write+0x3e>
    3fd0:	1f 92       	push	r1
    3fd2:	8f 93       	push	r24
    3fd4:	88 ef       	ldi	r24, 0xF8	; 248
    3fd6:	91 e0       	ldi	r25, 0x01	; 1
    3fd8:	9f 93       	push	r25
    3fda:	8f 93       	push	r24
    3fdc:	0e 94 a3 20 	call	0x4146	; 0x4146 <printf>
    3fe0:	0f 90       	pop	r0
    3fe2:	0f 90       	pop	r0
    3fe4:	0f 90       	pop	r0
    3fe6:	0f 90       	pop	r0
	if (bw != count) printf("f_write wrote %d of %d bytes to file.", bw, count);
    3fe8:	89 81       	ldd	r24, Y+1	; 0x01
    3fea:	9a 81       	ldd	r25, Y+2	; 0x02
    3fec:	08 17       	cp	r16, r24
    3fee:	19 07       	cpc	r17, r25
    3ff0:	81 f0       	breq	.+32     	; 0x4012 <wave_write+0x68>
    3ff2:	1f 93       	push	r17
    3ff4:	0f 93       	push	r16
    3ff6:	9f 93       	push	r25
    3ff8:	8f 93       	push	r24
    3ffa:	8a e3       	ldi	r24, 0x3A	; 58
    3ffc:	93 e0       	ldi	r25, 0x03	; 3
    3ffe:	9f 93       	push	r25
    4000:	8f 93       	push	r24
    4002:	0e 94 a3 20 	call	0x4146	; 0x4146 <printf>
    4006:	0f 90       	pop	r0
    4008:	0f 90       	pop	r0
    400a:	0f 90       	pop	r0
    400c:	0f 90       	pop	r0
    400e:	0f 90       	pop	r0
    4010:	0f 90       	pop	r0

	// Increment sample count by number of samples written to file
	sampleCount += bw;
    4012:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <sampleCount>
    4016:	90 91 7a 03 	lds	r25, 0x037A	; 0x80037a <sampleCount+0x1>
    401a:	a0 91 7b 03 	lds	r26, 0x037B	; 0x80037b <sampleCount+0x2>
    401e:	b0 91 7c 03 	lds	r27, 0x037C	; 0x80037c <sampleCount+0x3>
    4022:	29 81       	ldd	r18, Y+1	; 0x01
    4024:	3a 81       	ldd	r19, Y+2	; 0x02
    4026:	82 0f       	add	r24, r18
    4028:	93 1f       	adc	r25, r19
    402a:	a1 1d       	adc	r26, r1
    402c:	b1 1d       	adc	r27, r1
    402e:	80 93 79 03 	sts	0x0379, r24	; 0x800379 <sampleCount>
    4032:	90 93 7a 03 	sts	0x037A, r25	; 0x80037a <sampleCount+0x1>
    4036:	a0 93 7b 03 	sts	0x037B, r26	; 0x80037b <sampleCount+0x2>
    403a:	b0 93 7c 03 	sts	0x037C, r27	; 0x80037c <sampleCount+0x3>
}
    403e:	0f 90       	pop	r0
    4040:	0f 90       	pop	r0
    4042:	df 91       	pop	r29
    4044:	cf 91       	pop	r28
    4046:	1f 91       	pop	r17
    4048:	0f 91       	pop	r16
    404a:	08 95       	ret

0000404c <wave_read>:
 *
 * Parameters:
 *    pSamples - Pointer to array of 8-bit audio samples into which samples will be read.
 *    count - Number of samples to read into array from WAVE file.
 */
void wave_read(uint8_t* pSamples, uint16_t count) {
    404c:	0f 93       	push	r16
    404e:	1f 93       	push	r17
    4050:	cf 93       	push	r28
    4052:	df 93       	push	r29
    4054:	00 d0       	rcall	.+0      	; 0x4056 <wave_read+0xa>
    4056:	cd b7       	in	r28, 0x3d	; 61
    4058:	de b7       	in	r29, 0x3e	; 62
    405a:	8b 01       	movw	r16, r22
	FRESULT result;
	uint16_t br;
	
	result = f_read(&file, pSamples, count, &br); // Read samples from file
    405c:	9e 01       	movw	r18, r28
    405e:	2f 5f       	subi	r18, 0xFF	; 255
    4060:	3f 4f       	sbci	r19, 0xFF	; 255
    4062:	ab 01       	movw	r20, r22
    4064:	bc 01       	movw	r22, r24
    4066:	83 eb       	ldi	r24, 0xB3	; 179
    4068:	99 e0       	ldi	r25, 0x09	; 9
    406a:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <f_read>

	// If error occurs, write status to console
	if (result) printf("f_write returned error code: %d\n", result);
    406e:	88 23       	and	r24, r24
    4070:	61 f0       	breq	.+24     	; 0x408a <wave_read+0x3e>
    4072:	1f 92       	push	r1
    4074:	8f 93       	push	r24
    4076:	88 ef       	ldi	r24, 0xF8	; 248
    4078:	91 e0       	ldi	r25, 0x01	; 1
    407a:	9f 93       	push	r25
    407c:	8f 93       	push	r24
    407e:	0e 94 a3 20 	call	0x4146	; 0x4146 <printf>
    4082:	0f 90       	pop	r0
    4084:	0f 90       	pop	r0
    4086:	0f 90       	pop	r0
    4088:	0f 90       	pop	r0
	if (br != count) printf("f_write wrote %d of %d bytes to file.", br, count);
    408a:	89 81       	ldd	r24, Y+1	; 0x01
    408c:	9a 81       	ldd	r25, Y+2	; 0x02
    408e:	08 17       	cp	r16, r24
    4090:	19 07       	cpc	r17, r25
    4092:	81 f0       	breq	.+32     	; 0x40b4 <wave_read+0x68>
    4094:	1f 93       	push	r17
    4096:	0f 93       	push	r16
    4098:	9f 93       	push	r25
    409a:	8f 93       	push	r24
    409c:	8a e3       	ldi	r24, 0x3A	; 58
    409e:	93 e0       	ldi	r25, 0x03	; 3
    40a0:	9f 93       	push	r25
    40a2:	8f 93       	push	r24
    40a4:	0e 94 a3 20 	call	0x4146	; 0x4146 <printf>
    40a8:	0f 90       	pop	r0
    40aa:	0f 90       	pop	r0
    40ac:	0f 90       	pop	r0
    40ae:	0f 90       	pop	r0
    40b0:	0f 90       	pop	r0
    40b2:	0f 90       	pop	r0
    40b4:	0f 90       	pop	r0
    40b6:	0f 90       	pop	r0
    40b8:	df 91       	pop	r29
    40ba:	cf 91       	pop	r28
    40bc:	1f 91       	pop	r17
    40be:	0f 91       	pop	r16
    40c0:	08 95       	ret

000040c2 <__udivmodsi4>:
    40c2:	a1 e2       	ldi	r26, 0x21	; 33
    40c4:	1a 2e       	mov	r1, r26
    40c6:	aa 1b       	sub	r26, r26
    40c8:	bb 1b       	sub	r27, r27
    40ca:	fd 01       	movw	r30, r26
    40cc:	0d c0       	rjmp	.+26     	; 0x40e8 <__udivmodsi4_ep>

000040ce <__udivmodsi4_loop>:
    40ce:	aa 1f       	adc	r26, r26
    40d0:	bb 1f       	adc	r27, r27
    40d2:	ee 1f       	adc	r30, r30
    40d4:	ff 1f       	adc	r31, r31
    40d6:	a2 17       	cp	r26, r18
    40d8:	b3 07       	cpc	r27, r19
    40da:	e4 07       	cpc	r30, r20
    40dc:	f5 07       	cpc	r31, r21
    40de:	20 f0       	brcs	.+8      	; 0x40e8 <__udivmodsi4_ep>
    40e0:	a2 1b       	sub	r26, r18
    40e2:	b3 0b       	sbc	r27, r19
    40e4:	e4 0b       	sbc	r30, r20
    40e6:	f5 0b       	sbc	r31, r21

000040e8 <__udivmodsi4_ep>:
    40e8:	66 1f       	adc	r22, r22
    40ea:	77 1f       	adc	r23, r23
    40ec:	88 1f       	adc	r24, r24
    40ee:	99 1f       	adc	r25, r25
    40f0:	1a 94       	dec	r1
    40f2:	69 f7       	brne	.-38     	; 0x40ce <__udivmodsi4_loop>
    40f4:	60 95       	com	r22
    40f6:	70 95       	com	r23
    40f8:	80 95       	com	r24
    40fa:	90 95       	com	r25
    40fc:	9b 01       	movw	r18, r22
    40fe:	ac 01       	movw	r20, r24
    4100:	bd 01       	movw	r22, r26
    4102:	cf 01       	movw	r24, r30
    4104:	08 95       	ret

00004106 <__tablejump2__>:
    4106:	ee 0f       	add	r30, r30
    4108:	ff 1f       	adc	r31, r31
    410a:	05 90       	lpm	r0, Z+
    410c:	f4 91       	lpm	r31, Z
    410e:	e0 2d       	mov	r30, r0
    4110:	09 94       	ijmp

00004112 <__muluhisi3>:
    4112:	0e 94 94 20 	call	0x4128	; 0x4128 <__umulhisi3>
    4116:	a5 9f       	mul	r26, r21
    4118:	90 0d       	add	r25, r0
    411a:	b4 9f       	mul	r27, r20
    411c:	90 0d       	add	r25, r0
    411e:	a4 9f       	mul	r26, r20
    4120:	80 0d       	add	r24, r0
    4122:	91 1d       	adc	r25, r1
    4124:	11 24       	eor	r1, r1
    4126:	08 95       	ret

00004128 <__umulhisi3>:
    4128:	a2 9f       	mul	r26, r18
    412a:	b0 01       	movw	r22, r0
    412c:	b3 9f       	mul	r27, r19
    412e:	c0 01       	movw	r24, r0
    4130:	a3 9f       	mul	r26, r19
    4132:	70 0d       	add	r23, r0
    4134:	81 1d       	adc	r24, r1
    4136:	11 24       	eor	r1, r1
    4138:	91 1d       	adc	r25, r1
    413a:	b2 9f       	mul	r27, r18
    413c:	70 0d       	add	r23, r0
    413e:	81 1d       	adc	r24, r1
    4140:	11 24       	eor	r1, r1
    4142:	91 1d       	adc	r25, r1
    4144:	08 95       	ret

00004146 <printf>:
    4146:	a0 e0       	ldi	r26, 0x00	; 0
    4148:	b0 e0       	ldi	r27, 0x00	; 0
    414a:	e9 ea       	ldi	r30, 0xA9	; 169
    414c:	f0 e2       	ldi	r31, 0x20	; 32
    414e:	0c 94 8a 23 	jmp	0x4714	; 0x4714 <__prologue_saves__+0x20>
    4152:	ae 01       	movw	r20, r28
    4154:	4b 5f       	subi	r20, 0xFB	; 251
    4156:	5f 4f       	sbci	r21, 0xFF	; 255
    4158:	fa 01       	movw	r30, r20
    415a:	61 91       	ld	r22, Z+
    415c:	71 91       	ld	r23, Z+
    415e:	af 01       	movw	r20, r30
    4160:	80 91 01 0a 	lds	r24, 0x0A01	; 0x800a01 <__iob+0x2>
    4164:	90 91 02 0a 	lds	r25, 0x0A02	; 0x800a02 <__iob+0x3>
    4168:	0e 94 e9 20 	call	0x41d2	; 0x41d2 <vfprintf>
    416c:	e2 e0       	ldi	r30, 0x02	; 2
    416e:	0c 94 a6 23 	jmp	0x474c	; 0x474c <__epilogue_restores__+0x20>

00004172 <puts>:
    4172:	0f 93       	push	r16
    4174:	1f 93       	push	r17
    4176:	cf 93       	push	r28
    4178:	df 93       	push	r29
    417a:	e0 91 01 0a 	lds	r30, 0x0A01	; 0x800a01 <__iob+0x2>
    417e:	f0 91 02 0a 	lds	r31, 0x0A02	; 0x800a02 <__iob+0x3>
    4182:	23 81       	ldd	r18, Z+3	; 0x03
    4184:	21 ff       	sbrs	r18, 1
    4186:	1b c0       	rjmp	.+54     	; 0x41be <puts+0x4c>
    4188:	8c 01       	movw	r16, r24
    418a:	d0 e0       	ldi	r29, 0x00	; 0
    418c:	c0 e0       	ldi	r28, 0x00	; 0
    418e:	f8 01       	movw	r30, r16
    4190:	81 91       	ld	r24, Z+
    4192:	8f 01       	movw	r16, r30
    4194:	60 91 01 0a 	lds	r22, 0x0A01	; 0x800a01 <__iob+0x2>
    4198:	70 91 02 0a 	lds	r23, 0x0A02	; 0x800a02 <__iob+0x3>
    419c:	db 01       	movw	r26, r22
    419e:	18 96       	adiw	r26, 0x08	; 8
    41a0:	ed 91       	ld	r30, X+
    41a2:	fc 91       	ld	r31, X
    41a4:	19 97       	sbiw	r26, 0x09	; 9
    41a6:	88 23       	and	r24, r24
    41a8:	31 f0       	breq	.+12     	; 0x41b6 <puts+0x44>
    41aa:	09 95       	icall
    41ac:	89 2b       	or	r24, r25
    41ae:	79 f3       	breq	.-34     	; 0x418e <puts+0x1c>
    41b0:	df ef       	ldi	r29, 0xFF	; 255
    41b2:	cf ef       	ldi	r28, 0xFF	; 255
    41b4:	ec cf       	rjmp	.-40     	; 0x418e <puts+0x1c>
    41b6:	8a e0       	ldi	r24, 0x0A	; 10
    41b8:	09 95       	icall
    41ba:	89 2b       	or	r24, r25
    41bc:	19 f0       	breq	.+6      	; 0x41c4 <puts+0x52>
    41be:	8f ef       	ldi	r24, 0xFF	; 255
    41c0:	9f ef       	ldi	r25, 0xFF	; 255
    41c2:	02 c0       	rjmp	.+4      	; 0x41c8 <puts+0x56>
    41c4:	8d 2f       	mov	r24, r29
    41c6:	9c 2f       	mov	r25, r28
    41c8:	df 91       	pop	r29
    41ca:	cf 91       	pop	r28
    41cc:	1f 91       	pop	r17
    41ce:	0f 91       	pop	r16
    41d0:	08 95       	ret

000041d2 <vfprintf>:
    41d2:	ab e0       	ldi	r26, 0x0B	; 11
    41d4:	b0 e0       	ldi	r27, 0x00	; 0
    41d6:	ef ee       	ldi	r30, 0xEF	; 239
    41d8:	f0 e2       	ldi	r31, 0x20	; 32
    41da:	0c 94 7a 23 	jmp	0x46f4	; 0x46f4 <__prologue_saves__>
    41de:	6c 01       	movw	r12, r24
    41e0:	7b 01       	movw	r14, r22
    41e2:	8a 01       	movw	r16, r20
    41e4:	fc 01       	movw	r30, r24
    41e6:	17 82       	std	Z+7, r1	; 0x07
    41e8:	16 82       	std	Z+6, r1	; 0x06
    41ea:	83 81       	ldd	r24, Z+3	; 0x03
    41ec:	81 ff       	sbrs	r24, 1
    41ee:	cc c1       	rjmp	.+920    	; 0x4588 <vfprintf+0x3b6>
    41f0:	ce 01       	movw	r24, r28
    41f2:	01 96       	adiw	r24, 0x01	; 1
    41f4:	3c 01       	movw	r6, r24
    41f6:	f6 01       	movw	r30, r12
    41f8:	93 81       	ldd	r25, Z+3	; 0x03
    41fa:	f7 01       	movw	r30, r14
    41fc:	93 fd       	sbrc	r25, 3
    41fe:	85 91       	lpm	r24, Z+
    4200:	93 ff       	sbrs	r25, 3
    4202:	81 91       	ld	r24, Z+
    4204:	7f 01       	movw	r14, r30
    4206:	88 23       	and	r24, r24
    4208:	09 f4       	brne	.+2      	; 0x420c <vfprintf+0x3a>
    420a:	ba c1       	rjmp	.+884    	; 0x4580 <vfprintf+0x3ae>
    420c:	85 32       	cpi	r24, 0x25	; 37
    420e:	39 f4       	brne	.+14     	; 0x421e <vfprintf+0x4c>
    4210:	93 fd       	sbrc	r25, 3
    4212:	85 91       	lpm	r24, Z+
    4214:	93 ff       	sbrs	r25, 3
    4216:	81 91       	ld	r24, Z+
    4218:	7f 01       	movw	r14, r30
    421a:	85 32       	cpi	r24, 0x25	; 37
    421c:	29 f4       	brne	.+10     	; 0x4228 <vfprintf+0x56>
    421e:	b6 01       	movw	r22, r12
    4220:	90 e0       	ldi	r25, 0x00	; 0
    4222:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <fputc>
    4226:	e7 cf       	rjmp	.-50     	; 0x41f6 <vfprintf+0x24>
    4228:	91 2c       	mov	r9, r1
    422a:	21 2c       	mov	r2, r1
    422c:	31 2c       	mov	r3, r1
    422e:	ff e1       	ldi	r31, 0x1F	; 31
    4230:	f3 15       	cp	r31, r3
    4232:	d8 f0       	brcs	.+54     	; 0x426a <vfprintf+0x98>
    4234:	8b 32       	cpi	r24, 0x2B	; 43
    4236:	79 f0       	breq	.+30     	; 0x4256 <vfprintf+0x84>
    4238:	38 f4       	brcc	.+14     	; 0x4248 <vfprintf+0x76>
    423a:	80 32       	cpi	r24, 0x20	; 32
    423c:	79 f0       	breq	.+30     	; 0x425c <vfprintf+0x8a>
    423e:	83 32       	cpi	r24, 0x23	; 35
    4240:	a1 f4       	brne	.+40     	; 0x426a <vfprintf+0x98>
    4242:	23 2d       	mov	r18, r3
    4244:	20 61       	ori	r18, 0x10	; 16
    4246:	1d c0       	rjmp	.+58     	; 0x4282 <vfprintf+0xb0>
    4248:	8d 32       	cpi	r24, 0x2D	; 45
    424a:	61 f0       	breq	.+24     	; 0x4264 <vfprintf+0x92>
    424c:	80 33       	cpi	r24, 0x30	; 48
    424e:	69 f4       	brne	.+26     	; 0x426a <vfprintf+0x98>
    4250:	23 2d       	mov	r18, r3
    4252:	21 60       	ori	r18, 0x01	; 1
    4254:	16 c0       	rjmp	.+44     	; 0x4282 <vfprintf+0xb0>
    4256:	83 2d       	mov	r24, r3
    4258:	82 60       	ori	r24, 0x02	; 2
    425a:	38 2e       	mov	r3, r24
    425c:	e3 2d       	mov	r30, r3
    425e:	e4 60       	ori	r30, 0x04	; 4
    4260:	3e 2e       	mov	r3, r30
    4262:	2a c0       	rjmp	.+84     	; 0x42b8 <vfprintf+0xe6>
    4264:	f3 2d       	mov	r31, r3
    4266:	f8 60       	ori	r31, 0x08	; 8
    4268:	1d c0       	rjmp	.+58     	; 0x42a4 <vfprintf+0xd2>
    426a:	37 fc       	sbrc	r3, 7
    426c:	2d c0       	rjmp	.+90     	; 0x42c8 <vfprintf+0xf6>
    426e:	20 ed       	ldi	r18, 0xD0	; 208
    4270:	28 0f       	add	r18, r24
    4272:	2a 30       	cpi	r18, 0x0A	; 10
    4274:	40 f0       	brcs	.+16     	; 0x4286 <vfprintf+0xb4>
    4276:	8e 32       	cpi	r24, 0x2E	; 46
    4278:	b9 f4       	brne	.+46     	; 0x42a8 <vfprintf+0xd6>
    427a:	36 fc       	sbrc	r3, 6
    427c:	81 c1       	rjmp	.+770    	; 0x4580 <vfprintf+0x3ae>
    427e:	23 2d       	mov	r18, r3
    4280:	20 64       	ori	r18, 0x40	; 64
    4282:	32 2e       	mov	r3, r18
    4284:	19 c0       	rjmp	.+50     	; 0x42b8 <vfprintf+0xe6>
    4286:	36 fe       	sbrs	r3, 6
    4288:	06 c0       	rjmp	.+12     	; 0x4296 <vfprintf+0xc4>
    428a:	8a e0       	ldi	r24, 0x0A	; 10
    428c:	98 9e       	mul	r9, r24
    428e:	20 0d       	add	r18, r0
    4290:	11 24       	eor	r1, r1
    4292:	92 2e       	mov	r9, r18
    4294:	11 c0       	rjmp	.+34     	; 0x42b8 <vfprintf+0xe6>
    4296:	ea e0       	ldi	r30, 0x0A	; 10
    4298:	2e 9e       	mul	r2, r30
    429a:	20 0d       	add	r18, r0
    429c:	11 24       	eor	r1, r1
    429e:	22 2e       	mov	r2, r18
    42a0:	f3 2d       	mov	r31, r3
    42a2:	f0 62       	ori	r31, 0x20	; 32
    42a4:	3f 2e       	mov	r3, r31
    42a6:	08 c0       	rjmp	.+16     	; 0x42b8 <vfprintf+0xe6>
    42a8:	8c 36       	cpi	r24, 0x6C	; 108
    42aa:	21 f4       	brne	.+8      	; 0x42b4 <vfprintf+0xe2>
    42ac:	83 2d       	mov	r24, r3
    42ae:	80 68       	ori	r24, 0x80	; 128
    42b0:	38 2e       	mov	r3, r24
    42b2:	02 c0       	rjmp	.+4      	; 0x42b8 <vfprintf+0xe6>
    42b4:	88 36       	cpi	r24, 0x68	; 104
    42b6:	41 f4       	brne	.+16     	; 0x42c8 <vfprintf+0xf6>
    42b8:	f7 01       	movw	r30, r14
    42ba:	93 fd       	sbrc	r25, 3
    42bc:	85 91       	lpm	r24, Z+
    42be:	93 ff       	sbrs	r25, 3
    42c0:	81 91       	ld	r24, Z+
    42c2:	7f 01       	movw	r14, r30
    42c4:	81 11       	cpse	r24, r1
    42c6:	b3 cf       	rjmp	.-154    	; 0x422e <vfprintf+0x5c>
    42c8:	98 2f       	mov	r25, r24
    42ca:	9f 7d       	andi	r25, 0xDF	; 223
    42cc:	95 54       	subi	r25, 0x45	; 69
    42ce:	93 30       	cpi	r25, 0x03	; 3
    42d0:	28 f4       	brcc	.+10     	; 0x42dc <vfprintf+0x10a>
    42d2:	0c 5f       	subi	r16, 0xFC	; 252
    42d4:	1f 4f       	sbci	r17, 0xFF	; 255
    42d6:	9f e3       	ldi	r25, 0x3F	; 63
    42d8:	99 83       	std	Y+1, r25	; 0x01
    42da:	0d c0       	rjmp	.+26     	; 0x42f6 <vfprintf+0x124>
    42dc:	83 36       	cpi	r24, 0x63	; 99
    42de:	31 f0       	breq	.+12     	; 0x42ec <vfprintf+0x11a>
    42e0:	83 37       	cpi	r24, 0x73	; 115
    42e2:	71 f0       	breq	.+28     	; 0x4300 <vfprintf+0x12e>
    42e4:	83 35       	cpi	r24, 0x53	; 83
    42e6:	09 f0       	breq	.+2      	; 0x42ea <vfprintf+0x118>
    42e8:	59 c0       	rjmp	.+178    	; 0x439c <vfprintf+0x1ca>
    42ea:	21 c0       	rjmp	.+66     	; 0x432e <vfprintf+0x15c>
    42ec:	f8 01       	movw	r30, r16
    42ee:	80 81       	ld	r24, Z
    42f0:	89 83       	std	Y+1, r24	; 0x01
    42f2:	0e 5f       	subi	r16, 0xFE	; 254
    42f4:	1f 4f       	sbci	r17, 0xFF	; 255
    42f6:	88 24       	eor	r8, r8
    42f8:	83 94       	inc	r8
    42fa:	91 2c       	mov	r9, r1
    42fc:	53 01       	movw	r10, r6
    42fe:	13 c0       	rjmp	.+38     	; 0x4326 <vfprintf+0x154>
    4300:	28 01       	movw	r4, r16
    4302:	f2 e0       	ldi	r31, 0x02	; 2
    4304:	4f 0e       	add	r4, r31
    4306:	51 1c       	adc	r5, r1
    4308:	f8 01       	movw	r30, r16
    430a:	a0 80       	ld	r10, Z
    430c:	b1 80       	ldd	r11, Z+1	; 0x01
    430e:	36 fe       	sbrs	r3, 6
    4310:	03 c0       	rjmp	.+6      	; 0x4318 <vfprintf+0x146>
    4312:	69 2d       	mov	r22, r9
    4314:	70 e0       	ldi	r23, 0x00	; 0
    4316:	02 c0       	rjmp	.+4      	; 0x431c <vfprintf+0x14a>
    4318:	6f ef       	ldi	r22, 0xFF	; 255
    431a:	7f ef       	ldi	r23, 0xFF	; 255
    431c:	c5 01       	movw	r24, r10
    431e:	0e 94 d5 22 	call	0x45aa	; 0x45aa <strnlen>
    4322:	4c 01       	movw	r8, r24
    4324:	82 01       	movw	r16, r4
    4326:	f3 2d       	mov	r31, r3
    4328:	ff 77       	andi	r31, 0x7F	; 127
    432a:	3f 2e       	mov	r3, r31
    432c:	16 c0       	rjmp	.+44     	; 0x435a <vfprintf+0x188>
    432e:	28 01       	movw	r4, r16
    4330:	22 e0       	ldi	r18, 0x02	; 2
    4332:	42 0e       	add	r4, r18
    4334:	51 1c       	adc	r5, r1
    4336:	f8 01       	movw	r30, r16
    4338:	a0 80       	ld	r10, Z
    433a:	b1 80       	ldd	r11, Z+1	; 0x01
    433c:	36 fe       	sbrs	r3, 6
    433e:	03 c0       	rjmp	.+6      	; 0x4346 <vfprintf+0x174>
    4340:	69 2d       	mov	r22, r9
    4342:	70 e0       	ldi	r23, 0x00	; 0
    4344:	02 c0       	rjmp	.+4      	; 0x434a <vfprintf+0x178>
    4346:	6f ef       	ldi	r22, 0xFF	; 255
    4348:	7f ef       	ldi	r23, 0xFF	; 255
    434a:	c5 01       	movw	r24, r10
    434c:	0e 94 ca 22 	call	0x4594	; 0x4594 <strnlen_P>
    4350:	4c 01       	movw	r8, r24
    4352:	f3 2d       	mov	r31, r3
    4354:	f0 68       	ori	r31, 0x80	; 128
    4356:	3f 2e       	mov	r3, r31
    4358:	82 01       	movw	r16, r4
    435a:	33 fc       	sbrc	r3, 3
    435c:	1b c0       	rjmp	.+54     	; 0x4394 <vfprintf+0x1c2>
    435e:	82 2d       	mov	r24, r2
    4360:	90 e0       	ldi	r25, 0x00	; 0
    4362:	88 16       	cp	r8, r24
    4364:	99 06       	cpc	r9, r25
    4366:	b0 f4       	brcc	.+44     	; 0x4394 <vfprintf+0x1c2>
    4368:	b6 01       	movw	r22, r12
    436a:	80 e2       	ldi	r24, 0x20	; 32
    436c:	90 e0       	ldi	r25, 0x00	; 0
    436e:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <fputc>
    4372:	2a 94       	dec	r2
    4374:	f4 cf       	rjmp	.-24     	; 0x435e <vfprintf+0x18c>
    4376:	f5 01       	movw	r30, r10
    4378:	37 fc       	sbrc	r3, 7
    437a:	85 91       	lpm	r24, Z+
    437c:	37 fe       	sbrs	r3, 7
    437e:	81 91       	ld	r24, Z+
    4380:	5f 01       	movw	r10, r30
    4382:	b6 01       	movw	r22, r12
    4384:	90 e0       	ldi	r25, 0x00	; 0
    4386:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <fputc>
    438a:	21 10       	cpse	r2, r1
    438c:	2a 94       	dec	r2
    438e:	21 e0       	ldi	r18, 0x01	; 1
    4390:	82 1a       	sub	r8, r18
    4392:	91 08       	sbc	r9, r1
    4394:	81 14       	cp	r8, r1
    4396:	91 04       	cpc	r9, r1
    4398:	71 f7       	brne	.-36     	; 0x4376 <vfprintf+0x1a4>
    439a:	e8 c0       	rjmp	.+464    	; 0x456c <vfprintf+0x39a>
    439c:	84 36       	cpi	r24, 0x64	; 100
    439e:	11 f0       	breq	.+4      	; 0x43a4 <vfprintf+0x1d2>
    43a0:	89 36       	cpi	r24, 0x69	; 105
    43a2:	41 f5       	brne	.+80     	; 0x43f4 <vfprintf+0x222>
    43a4:	f8 01       	movw	r30, r16
    43a6:	37 fe       	sbrs	r3, 7
    43a8:	07 c0       	rjmp	.+14     	; 0x43b8 <vfprintf+0x1e6>
    43aa:	60 81       	ld	r22, Z
    43ac:	71 81       	ldd	r23, Z+1	; 0x01
    43ae:	82 81       	ldd	r24, Z+2	; 0x02
    43b0:	93 81       	ldd	r25, Z+3	; 0x03
    43b2:	0c 5f       	subi	r16, 0xFC	; 252
    43b4:	1f 4f       	sbci	r17, 0xFF	; 255
    43b6:	08 c0       	rjmp	.+16     	; 0x43c8 <vfprintf+0x1f6>
    43b8:	60 81       	ld	r22, Z
    43ba:	71 81       	ldd	r23, Z+1	; 0x01
    43bc:	07 2e       	mov	r0, r23
    43be:	00 0c       	add	r0, r0
    43c0:	88 0b       	sbc	r24, r24
    43c2:	99 0b       	sbc	r25, r25
    43c4:	0e 5f       	subi	r16, 0xFE	; 254
    43c6:	1f 4f       	sbci	r17, 0xFF	; 255
    43c8:	f3 2d       	mov	r31, r3
    43ca:	ff 76       	andi	r31, 0x6F	; 111
    43cc:	3f 2e       	mov	r3, r31
    43ce:	97 ff       	sbrs	r25, 7
    43d0:	09 c0       	rjmp	.+18     	; 0x43e4 <vfprintf+0x212>
    43d2:	90 95       	com	r25
    43d4:	80 95       	com	r24
    43d6:	70 95       	com	r23
    43d8:	61 95       	neg	r22
    43da:	7f 4f       	sbci	r23, 0xFF	; 255
    43dc:	8f 4f       	sbci	r24, 0xFF	; 255
    43de:	9f 4f       	sbci	r25, 0xFF	; 255
    43e0:	f0 68       	ori	r31, 0x80	; 128
    43e2:	3f 2e       	mov	r3, r31
    43e4:	2a e0       	ldi	r18, 0x0A	; 10
    43e6:	30 e0       	ldi	r19, 0x00	; 0
    43e8:	a3 01       	movw	r20, r6
    43ea:	0e 94 1c 23 	call	0x4638	; 0x4638 <__ultoa_invert>
    43ee:	88 2e       	mov	r8, r24
    43f0:	86 18       	sub	r8, r6
    43f2:	45 c0       	rjmp	.+138    	; 0x447e <vfprintf+0x2ac>
    43f4:	85 37       	cpi	r24, 0x75	; 117
    43f6:	31 f4       	brne	.+12     	; 0x4404 <vfprintf+0x232>
    43f8:	23 2d       	mov	r18, r3
    43fa:	2f 7e       	andi	r18, 0xEF	; 239
    43fc:	b2 2e       	mov	r11, r18
    43fe:	2a e0       	ldi	r18, 0x0A	; 10
    4400:	30 e0       	ldi	r19, 0x00	; 0
    4402:	25 c0       	rjmp	.+74     	; 0x444e <vfprintf+0x27c>
    4404:	93 2d       	mov	r25, r3
    4406:	99 7f       	andi	r25, 0xF9	; 249
    4408:	b9 2e       	mov	r11, r25
    440a:	8f 36       	cpi	r24, 0x6F	; 111
    440c:	c1 f0       	breq	.+48     	; 0x443e <vfprintf+0x26c>
    440e:	18 f4       	brcc	.+6      	; 0x4416 <vfprintf+0x244>
    4410:	88 35       	cpi	r24, 0x58	; 88
    4412:	79 f0       	breq	.+30     	; 0x4432 <vfprintf+0x260>
    4414:	b5 c0       	rjmp	.+362    	; 0x4580 <vfprintf+0x3ae>
    4416:	80 37       	cpi	r24, 0x70	; 112
    4418:	19 f0       	breq	.+6      	; 0x4420 <vfprintf+0x24e>
    441a:	88 37       	cpi	r24, 0x78	; 120
    441c:	21 f0       	breq	.+8      	; 0x4426 <vfprintf+0x254>
    441e:	b0 c0       	rjmp	.+352    	; 0x4580 <vfprintf+0x3ae>
    4420:	e9 2f       	mov	r30, r25
    4422:	e0 61       	ori	r30, 0x10	; 16
    4424:	be 2e       	mov	r11, r30
    4426:	b4 fe       	sbrs	r11, 4
    4428:	0d c0       	rjmp	.+26     	; 0x4444 <vfprintf+0x272>
    442a:	fb 2d       	mov	r31, r11
    442c:	f4 60       	ori	r31, 0x04	; 4
    442e:	bf 2e       	mov	r11, r31
    4430:	09 c0       	rjmp	.+18     	; 0x4444 <vfprintf+0x272>
    4432:	34 fe       	sbrs	r3, 4
    4434:	0a c0       	rjmp	.+20     	; 0x444a <vfprintf+0x278>
    4436:	29 2f       	mov	r18, r25
    4438:	26 60       	ori	r18, 0x06	; 6
    443a:	b2 2e       	mov	r11, r18
    443c:	06 c0       	rjmp	.+12     	; 0x444a <vfprintf+0x278>
    443e:	28 e0       	ldi	r18, 0x08	; 8
    4440:	30 e0       	ldi	r19, 0x00	; 0
    4442:	05 c0       	rjmp	.+10     	; 0x444e <vfprintf+0x27c>
    4444:	20 e1       	ldi	r18, 0x10	; 16
    4446:	30 e0       	ldi	r19, 0x00	; 0
    4448:	02 c0       	rjmp	.+4      	; 0x444e <vfprintf+0x27c>
    444a:	20 e1       	ldi	r18, 0x10	; 16
    444c:	32 e0       	ldi	r19, 0x02	; 2
    444e:	f8 01       	movw	r30, r16
    4450:	b7 fe       	sbrs	r11, 7
    4452:	07 c0       	rjmp	.+14     	; 0x4462 <vfprintf+0x290>
    4454:	60 81       	ld	r22, Z
    4456:	71 81       	ldd	r23, Z+1	; 0x01
    4458:	82 81       	ldd	r24, Z+2	; 0x02
    445a:	93 81       	ldd	r25, Z+3	; 0x03
    445c:	0c 5f       	subi	r16, 0xFC	; 252
    445e:	1f 4f       	sbci	r17, 0xFF	; 255
    4460:	06 c0       	rjmp	.+12     	; 0x446e <vfprintf+0x29c>
    4462:	60 81       	ld	r22, Z
    4464:	71 81       	ldd	r23, Z+1	; 0x01
    4466:	80 e0       	ldi	r24, 0x00	; 0
    4468:	90 e0       	ldi	r25, 0x00	; 0
    446a:	0e 5f       	subi	r16, 0xFE	; 254
    446c:	1f 4f       	sbci	r17, 0xFF	; 255
    446e:	a3 01       	movw	r20, r6
    4470:	0e 94 1c 23 	call	0x4638	; 0x4638 <__ultoa_invert>
    4474:	88 2e       	mov	r8, r24
    4476:	86 18       	sub	r8, r6
    4478:	fb 2d       	mov	r31, r11
    447a:	ff 77       	andi	r31, 0x7F	; 127
    447c:	3f 2e       	mov	r3, r31
    447e:	36 fe       	sbrs	r3, 6
    4480:	0d c0       	rjmp	.+26     	; 0x449c <vfprintf+0x2ca>
    4482:	23 2d       	mov	r18, r3
    4484:	2e 7f       	andi	r18, 0xFE	; 254
    4486:	a2 2e       	mov	r10, r18
    4488:	89 14       	cp	r8, r9
    448a:	58 f4       	brcc	.+22     	; 0x44a2 <vfprintf+0x2d0>
    448c:	34 fe       	sbrs	r3, 4
    448e:	0b c0       	rjmp	.+22     	; 0x44a6 <vfprintf+0x2d4>
    4490:	32 fc       	sbrc	r3, 2
    4492:	09 c0       	rjmp	.+18     	; 0x44a6 <vfprintf+0x2d4>
    4494:	83 2d       	mov	r24, r3
    4496:	8e 7e       	andi	r24, 0xEE	; 238
    4498:	a8 2e       	mov	r10, r24
    449a:	05 c0       	rjmp	.+10     	; 0x44a6 <vfprintf+0x2d4>
    449c:	b8 2c       	mov	r11, r8
    449e:	a3 2c       	mov	r10, r3
    44a0:	03 c0       	rjmp	.+6      	; 0x44a8 <vfprintf+0x2d6>
    44a2:	b8 2c       	mov	r11, r8
    44a4:	01 c0       	rjmp	.+2      	; 0x44a8 <vfprintf+0x2d6>
    44a6:	b9 2c       	mov	r11, r9
    44a8:	a4 fe       	sbrs	r10, 4
    44aa:	0f c0       	rjmp	.+30     	; 0x44ca <vfprintf+0x2f8>
    44ac:	fe 01       	movw	r30, r28
    44ae:	e8 0d       	add	r30, r8
    44b0:	f1 1d       	adc	r31, r1
    44b2:	80 81       	ld	r24, Z
    44b4:	80 33       	cpi	r24, 0x30	; 48
    44b6:	21 f4       	brne	.+8      	; 0x44c0 <vfprintf+0x2ee>
    44b8:	9a 2d       	mov	r25, r10
    44ba:	99 7e       	andi	r25, 0xE9	; 233
    44bc:	a9 2e       	mov	r10, r25
    44be:	09 c0       	rjmp	.+18     	; 0x44d2 <vfprintf+0x300>
    44c0:	a2 fe       	sbrs	r10, 2
    44c2:	06 c0       	rjmp	.+12     	; 0x44d0 <vfprintf+0x2fe>
    44c4:	b3 94       	inc	r11
    44c6:	b3 94       	inc	r11
    44c8:	04 c0       	rjmp	.+8      	; 0x44d2 <vfprintf+0x300>
    44ca:	8a 2d       	mov	r24, r10
    44cc:	86 78       	andi	r24, 0x86	; 134
    44ce:	09 f0       	breq	.+2      	; 0x44d2 <vfprintf+0x300>
    44d0:	b3 94       	inc	r11
    44d2:	a3 fc       	sbrc	r10, 3
    44d4:	11 c0       	rjmp	.+34     	; 0x44f8 <vfprintf+0x326>
    44d6:	a0 fe       	sbrs	r10, 0
    44d8:	06 c0       	rjmp	.+12     	; 0x44e6 <vfprintf+0x314>
    44da:	b2 14       	cp	r11, r2
    44dc:	88 f4       	brcc	.+34     	; 0x4500 <vfprintf+0x32e>
    44de:	28 0c       	add	r2, r8
    44e0:	92 2c       	mov	r9, r2
    44e2:	9b 18       	sub	r9, r11
    44e4:	0e c0       	rjmp	.+28     	; 0x4502 <vfprintf+0x330>
    44e6:	b2 14       	cp	r11, r2
    44e8:	60 f4       	brcc	.+24     	; 0x4502 <vfprintf+0x330>
    44ea:	b6 01       	movw	r22, r12
    44ec:	80 e2       	ldi	r24, 0x20	; 32
    44ee:	90 e0       	ldi	r25, 0x00	; 0
    44f0:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <fputc>
    44f4:	b3 94       	inc	r11
    44f6:	f7 cf       	rjmp	.-18     	; 0x44e6 <vfprintf+0x314>
    44f8:	b2 14       	cp	r11, r2
    44fa:	18 f4       	brcc	.+6      	; 0x4502 <vfprintf+0x330>
    44fc:	2b 18       	sub	r2, r11
    44fe:	02 c0       	rjmp	.+4      	; 0x4504 <vfprintf+0x332>
    4500:	98 2c       	mov	r9, r8
    4502:	21 2c       	mov	r2, r1
    4504:	a4 fe       	sbrs	r10, 4
    4506:	10 c0       	rjmp	.+32     	; 0x4528 <vfprintf+0x356>
    4508:	b6 01       	movw	r22, r12
    450a:	80 e3       	ldi	r24, 0x30	; 48
    450c:	90 e0       	ldi	r25, 0x00	; 0
    450e:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <fputc>
    4512:	a2 fe       	sbrs	r10, 2
    4514:	17 c0       	rjmp	.+46     	; 0x4544 <vfprintf+0x372>
    4516:	a1 fc       	sbrc	r10, 1
    4518:	03 c0       	rjmp	.+6      	; 0x4520 <vfprintf+0x34e>
    451a:	88 e7       	ldi	r24, 0x78	; 120
    451c:	90 e0       	ldi	r25, 0x00	; 0
    451e:	02 c0       	rjmp	.+4      	; 0x4524 <vfprintf+0x352>
    4520:	88 e5       	ldi	r24, 0x58	; 88
    4522:	90 e0       	ldi	r25, 0x00	; 0
    4524:	b6 01       	movw	r22, r12
    4526:	0c c0       	rjmp	.+24     	; 0x4540 <vfprintf+0x36e>
    4528:	8a 2d       	mov	r24, r10
    452a:	86 78       	andi	r24, 0x86	; 134
    452c:	59 f0       	breq	.+22     	; 0x4544 <vfprintf+0x372>
    452e:	a1 fe       	sbrs	r10, 1
    4530:	02 c0       	rjmp	.+4      	; 0x4536 <vfprintf+0x364>
    4532:	8b e2       	ldi	r24, 0x2B	; 43
    4534:	01 c0       	rjmp	.+2      	; 0x4538 <vfprintf+0x366>
    4536:	80 e2       	ldi	r24, 0x20	; 32
    4538:	a7 fc       	sbrc	r10, 7
    453a:	8d e2       	ldi	r24, 0x2D	; 45
    453c:	b6 01       	movw	r22, r12
    453e:	90 e0       	ldi	r25, 0x00	; 0
    4540:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <fputc>
    4544:	89 14       	cp	r8, r9
    4546:	38 f4       	brcc	.+14     	; 0x4556 <vfprintf+0x384>
    4548:	b6 01       	movw	r22, r12
    454a:	80 e3       	ldi	r24, 0x30	; 48
    454c:	90 e0       	ldi	r25, 0x00	; 0
    454e:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <fputc>
    4552:	9a 94       	dec	r9
    4554:	f7 cf       	rjmp	.-18     	; 0x4544 <vfprintf+0x372>
    4556:	8a 94       	dec	r8
    4558:	f3 01       	movw	r30, r6
    455a:	e8 0d       	add	r30, r8
    455c:	f1 1d       	adc	r31, r1
    455e:	80 81       	ld	r24, Z
    4560:	b6 01       	movw	r22, r12
    4562:	90 e0       	ldi	r25, 0x00	; 0
    4564:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <fputc>
    4568:	81 10       	cpse	r8, r1
    456a:	f5 cf       	rjmp	.-22     	; 0x4556 <vfprintf+0x384>
    456c:	22 20       	and	r2, r2
    456e:	09 f4       	brne	.+2      	; 0x4572 <vfprintf+0x3a0>
    4570:	42 ce       	rjmp	.-892    	; 0x41f6 <vfprintf+0x24>
    4572:	b6 01       	movw	r22, r12
    4574:	80 e2       	ldi	r24, 0x20	; 32
    4576:	90 e0       	ldi	r25, 0x00	; 0
    4578:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <fputc>
    457c:	2a 94       	dec	r2
    457e:	f6 cf       	rjmp	.-20     	; 0x456c <vfprintf+0x39a>
    4580:	f6 01       	movw	r30, r12
    4582:	86 81       	ldd	r24, Z+6	; 0x06
    4584:	97 81       	ldd	r25, Z+7	; 0x07
    4586:	02 c0       	rjmp	.+4      	; 0x458c <vfprintf+0x3ba>
    4588:	8f ef       	ldi	r24, 0xFF	; 255
    458a:	9f ef       	ldi	r25, 0xFF	; 255
    458c:	2b 96       	adiw	r28, 0x0b	; 11
    458e:	e2 e1       	ldi	r30, 0x12	; 18
    4590:	0c 94 96 23 	jmp	0x472c	; 0x472c <__epilogue_restores__>

00004594 <strnlen_P>:
    4594:	fc 01       	movw	r30, r24
    4596:	05 90       	lpm	r0, Z+
    4598:	61 50       	subi	r22, 0x01	; 1
    459a:	70 40       	sbci	r23, 0x00	; 0
    459c:	01 10       	cpse	r0, r1
    459e:	d8 f7       	brcc	.-10     	; 0x4596 <strnlen_P+0x2>
    45a0:	80 95       	com	r24
    45a2:	90 95       	com	r25
    45a4:	8e 0f       	add	r24, r30
    45a6:	9f 1f       	adc	r25, r31
    45a8:	08 95       	ret

000045aa <strnlen>:
    45aa:	fc 01       	movw	r30, r24
    45ac:	61 50       	subi	r22, 0x01	; 1
    45ae:	70 40       	sbci	r23, 0x00	; 0
    45b0:	01 90       	ld	r0, Z+
    45b2:	01 10       	cpse	r0, r1
    45b4:	d8 f7       	brcc	.-10     	; 0x45ac <strnlen+0x2>
    45b6:	80 95       	com	r24
    45b8:	90 95       	com	r25
    45ba:	8e 0f       	add	r24, r30
    45bc:	9f 1f       	adc	r25, r31
    45be:	08 95       	ret

000045c0 <fputc>:
    45c0:	0f 93       	push	r16
    45c2:	1f 93       	push	r17
    45c4:	cf 93       	push	r28
    45c6:	df 93       	push	r29
    45c8:	fb 01       	movw	r30, r22
    45ca:	23 81       	ldd	r18, Z+3	; 0x03
    45cc:	21 fd       	sbrc	r18, 1
    45ce:	03 c0       	rjmp	.+6      	; 0x45d6 <fputc+0x16>
    45d0:	8f ef       	ldi	r24, 0xFF	; 255
    45d2:	9f ef       	ldi	r25, 0xFF	; 255
    45d4:	2c c0       	rjmp	.+88     	; 0x462e <fputc+0x6e>
    45d6:	22 ff       	sbrs	r18, 2
    45d8:	16 c0       	rjmp	.+44     	; 0x4606 <fputc+0x46>
    45da:	46 81       	ldd	r20, Z+6	; 0x06
    45dc:	57 81       	ldd	r21, Z+7	; 0x07
    45de:	24 81       	ldd	r18, Z+4	; 0x04
    45e0:	35 81       	ldd	r19, Z+5	; 0x05
    45e2:	42 17       	cp	r20, r18
    45e4:	53 07       	cpc	r21, r19
    45e6:	44 f4       	brge	.+16     	; 0x45f8 <fputc+0x38>
    45e8:	a0 81       	ld	r26, Z
    45ea:	b1 81       	ldd	r27, Z+1	; 0x01
    45ec:	9d 01       	movw	r18, r26
    45ee:	2f 5f       	subi	r18, 0xFF	; 255
    45f0:	3f 4f       	sbci	r19, 0xFF	; 255
    45f2:	31 83       	std	Z+1, r19	; 0x01
    45f4:	20 83       	st	Z, r18
    45f6:	8c 93       	st	X, r24
    45f8:	26 81       	ldd	r18, Z+6	; 0x06
    45fa:	37 81       	ldd	r19, Z+7	; 0x07
    45fc:	2f 5f       	subi	r18, 0xFF	; 255
    45fe:	3f 4f       	sbci	r19, 0xFF	; 255
    4600:	37 83       	std	Z+7, r19	; 0x07
    4602:	26 83       	std	Z+6, r18	; 0x06
    4604:	14 c0       	rjmp	.+40     	; 0x462e <fputc+0x6e>
    4606:	8b 01       	movw	r16, r22
    4608:	ec 01       	movw	r28, r24
    460a:	fb 01       	movw	r30, r22
    460c:	00 84       	ldd	r0, Z+8	; 0x08
    460e:	f1 85       	ldd	r31, Z+9	; 0x09
    4610:	e0 2d       	mov	r30, r0
    4612:	09 95       	icall
    4614:	89 2b       	or	r24, r25
    4616:	e1 f6       	brne	.-72     	; 0x45d0 <fputc+0x10>
    4618:	d8 01       	movw	r26, r16
    461a:	16 96       	adiw	r26, 0x06	; 6
    461c:	8d 91       	ld	r24, X+
    461e:	9c 91       	ld	r25, X
    4620:	17 97       	sbiw	r26, 0x07	; 7
    4622:	01 96       	adiw	r24, 0x01	; 1
    4624:	17 96       	adiw	r26, 0x07	; 7
    4626:	9c 93       	st	X, r25
    4628:	8e 93       	st	-X, r24
    462a:	16 97       	sbiw	r26, 0x06	; 6
    462c:	ce 01       	movw	r24, r28
    462e:	df 91       	pop	r29
    4630:	cf 91       	pop	r28
    4632:	1f 91       	pop	r17
    4634:	0f 91       	pop	r16
    4636:	08 95       	ret

00004638 <__ultoa_invert>:
    4638:	fa 01       	movw	r30, r20
    463a:	aa 27       	eor	r26, r26
    463c:	28 30       	cpi	r18, 0x08	; 8
    463e:	51 f1       	breq	.+84     	; 0x4694 <__ultoa_invert+0x5c>
    4640:	20 31       	cpi	r18, 0x10	; 16
    4642:	81 f1       	breq	.+96     	; 0x46a4 <__ultoa_invert+0x6c>
    4644:	e8 94       	clt
    4646:	6f 93       	push	r22
    4648:	6e 7f       	andi	r22, 0xFE	; 254
    464a:	6e 5f       	subi	r22, 0xFE	; 254
    464c:	7f 4f       	sbci	r23, 0xFF	; 255
    464e:	8f 4f       	sbci	r24, 0xFF	; 255
    4650:	9f 4f       	sbci	r25, 0xFF	; 255
    4652:	af 4f       	sbci	r26, 0xFF	; 255
    4654:	b1 e0       	ldi	r27, 0x01	; 1
    4656:	3e d0       	rcall	.+124    	; 0x46d4 <__ultoa_invert+0x9c>
    4658:	b4 e0       	ldi	r27, 0x04	; 4
    465a:	3c d0       	rcall	.+120    	; 0x46d4 <__ultoa_invert+0x9c>
    465c:	67 0f       	add	r22, r23
    465e:	78 1f       	adc	r23, r24
    4660:	89 1f       	adc	r24, r25
    4662:	9a 1f       	adc	r25, r26
    4664:	a1 1d       	adc	r26, r1
    4666:	68 0f       	add	r22, r24
    4668:	79 1f       	adc	r23, r25
    466a:	8a 1f       	adc	r24, r26
    466c:	91 1d       	adc	r25, r1
    466e:	a1 1d       	adc	r26, r1
    4670:	6a 0f       	add	r22, r26
    4672:	71 1d       	adc	r23, r1
    4674:	81 1d       	adc	r24, r1
    4676:	91 1d       	adc	r25, r1
    4678:	a1 1d       	adc	r26, r1
    467a:	20 d0       	rcall	.+64     	; 0x46bc <__ultoa_invert+0x84>
    467c:	09 f4       	brne	.+2      	; 0x4680 <__ultoa_invert+0x48>
    467e:	68 94       	set
    4680:	3f 91       	pop	r19
    4682:	2a e0       	ldi	r18, 0x0A	; 10
    4684:	26 9f       	mul	r18, r22
    4686:	11 24       	eor	r1, r1
    4688:	30 19       	sub	r19, r0
    468a:	30 5d       	subi	r19, 0xD0	; 208
    468c:	31 93       	st	Z+, r19
    468e:	de f6       	brtc	.-74     	; 0x4646 <__ultoa_invert+0xe>
    4690:	cf 01       	movw	r24, r30
    4692:	08 95       	ret
    4694:	46 2f       	mov	r20, r22
    4696:	47 70       	andi	r20, 0x07	; 7
    4698:	40 5d       	subi	r20, 0xD0	; 208
    469a:	41 93       	st	Z+, r20
    469c:	b3 e0       	ldi	r27, 0x03	; 3
    469e:	0f d0       	rcall	.+30     	; 0x46be <__ultoa_invert+0x86>
    46a0:	c9 f7       	brne	.-14     	; 0x4694 <__ultoa_invert+0x5c>
    46a2:	f6 cf       	rjmp	.-20     	; 0x4690 <__ultoa_invert+0x58>
    46a4:	46 2f       	mov	r20, r22
    46a6:	4f 70       	andi	r20, 0x0F	; 15
    46a8:	40 5d       	subi	r20, 0xD0	; 208
    46aa:	4a 33       	cpi	r20, 0x3A	; 58
    46ac:	18 f0       	brcs	.+6      	; 0x46b4 <__ultoa_invert+0x7c>
    46ae:	49 5d       	subi	r20, 0xD9	; 217
    46b0:	31 fd       	sbrc	r19, 1
    46b2:	40 52       	subi	r20, 0x20	; 32
    46b4:	41 93       	st	Z+, r20
    46b6:	02 d0       	rcall	.+4      	; 0x46bc <__ultoa_invert+0x84>
    46b8:	a9 f7       	brne	.-22     	; 0x46a4 <__ultoa_invert+0x6c>
    46ba:	ea cf       	rjmp	.-44     	; 0x4690 <__ultoa_invert+0x58>
    46bc:	b4 e0       	ldi	r27, 0x04	; 4
    46be:	a6 95       	lsr	r26
    46c0:	97 95       	ror	r25
    46c2:	87 95       	ror	r24
    46c4:	77 95       	ror	r23
    46c6:	67 95       	ror	r22
    46c8:	ba 95       	dec	r27
    46ca:	c9 f7       	brne	.-14     	; 0x46be <__ultoa_invert+0x86>
    46cc:	00 97       	sbiw	r24, 0x00	; 0
    46ce:	61 05       	cpc	r22, r1
    46d0:	71 05       	cpc	r23, r1
    46d2:	08 95       	ret
    46d4:	9b 01       	movw	r18, r22
    46d6:	ac 01       	movw	r20, r24
    46d8:	0a 2e       	mov	r0, r26
    46da:	06 94       	lsr	r0
    46dc:	57 95       	ror	r21
    46de:	47 95       	ror	r20
    46e0:	37 95       	ror	r19
    46e2:	27 95       	ror	r18
    46e4:	ba 95       	dec	r27
    46e6:	c9 f7       	brne	.-14     	; 0x46da <__ultoa_invert+0xa2>
    46e8:	62 0f       	add	r22, r18
    46ea:	73 1f       	adc	r23, r19
    46ec:	84 1f       	adc	r24, r20
    46ee:	95 1f       	adc	r25, r21
    46f0:	a0 1d       	adc	r26, r0
    46f2:	08 95       	ret

000046f4 <__prologue_saves__>:
    46f4:	2f 92       	push	r2
    46f6:	3f 92       	push	r3
    46f8:	4f 92       	push	r4
    46fa:	5f 92       	push	r5
    46fc:	6f 92       	push	r6
    46fe:	7f 92       	push	r7
    4700:	8f 92       	push	r8
    4702:	9f 92       	push	r9
    4704:	af 92       	push	r10
    4706:	bf 92       	push	r11
    4708:	cf 92       	push	r12
    470a:	df 92       	push	r13
    470c:	ef 92       	push	r14
    470e:	ff 92       	push	r15
    4710:	0f 93       	push	r16
    4712:	1f 93       	push	r17
    4714:	cf 93       	push	r28
    4716:	df 93       	push	r29
    4718:	cd b7       	in	r28, 0x3d	; 61
    471a:	de b7       	in	r29, 0x3e	; 62
    471c:	ca 1b       	sub	r28, r26
    471e:	db 0b       	sbc	r29, r27
    4720:	0f b6       	in	r0, 0x3f	; 63
    4722:	f8 94       	cli
    4724:	de bf       	out	0x3e, r29	; 62
    4726:	0f be       	out	0x3f, r0	; 63
    4728:	cd bf       	out	0x3d, r28	; 61
    472a:	09 94       	ijmp

0000472c <__epilogue_restores__>:
    472c:	2a 88       	ldd	r2, Y+18	; 0x12
    472e:	39 88       	ldd	r3, Y+17	; 0x11
    4730:	48 88       	ldd	r4, Y+16	; 0x10
    4732:	5f 84       	ldd	r5, Y+15	; 0x0f
    4734:	6e 84       	ldd	r6, Y+14	; 0x0e
    4736:	7d 84       	ldd	r7, Y+13	; 0x0d
    4738:	8c 84       	ldd	r8, Y+12	; 0x0c
    473a:	9b 84       	ldd	r9, Y+11	; 0x0b
    473c:	aa 84       	ldd	r10, Y+10	; 0x0a
    473e:	b9 84       	ldd	r11, Y+9	; 0x09
    4740:	c8 84       	ldd	r12, Y+8	; 0x08
    4742:	df 80       	ldd	r13, Y+7	; 0x07
    4744:	ee 80       	ldd	r14, Y+6	; 0x06
    4746:	fd 80       	ldd	r15, Y+5	; 0x05
    4748:	0c 81       	ldd	r16, Y+4	; 0x04
    474a:	1b 81       	ldd	r17, Y+3	; 0x03
    474c:	aa 81       	ldd	r26, Y+2	; 0x02
    474e:	b9 81       	ldd	r27, Y+1	; 0x01
    4750:	ce 0f       	add	r28, r30
    4752:	d1 1d       	adc	r29, r1
    4754:	0f b6       	in	r0, 0x3f	; 63
    4756:	f8 94       	cli
    4758:	de bf       	out	0x3e, r29	; 62
    475a:	0f be       	out	0x3f, r0	; 63
    475c:	cd bf       	out	0x3d, r28	; 61
    475e:	ed 01       	movw	r28, r26
    4760:	08 95       	ret

00004762 <_exit>:
    4762:	f8 94       	cli

00004764 <__stop_program>:
    4764:	ff cf       	rjmp	.-2      	; 0x4764 <__stop_program>
